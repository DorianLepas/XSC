/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package cea.language.sml;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import cea.language.sml.psi.SmlTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SmlLexerDefinition.flex</tt>
 */
public class SmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATES_NAMES = 2;
  public static final int ALIAS_NAMES = 4;
  public static final int EVENTS_NAMES = 6;
  public static final int EVENTS_DEFINITIONS = 8;
  public static final int INSTRUCTIONS = 10;
  public static final int CONDITIONS = 12;
  public static final int OPTIONS = 14;
  public static final int STATES_CALLS = 16;
  public static final int THREADS_NAMES = 18;
  public static final int BINDINGS = 20;
  public static final int JAVASCRIPT_CODE = 22;
  public static final int CALL = 24;
  public static final int SET = 26;
  public static final int WAIT = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15776 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\151\1\31\4\13\1\152\1\153\1\154\1\155\1\13\1\155\1\13\1\156"+
    "\1\154\1\157\5\13\1\160\1\123\1\1\1\161\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\155\2\13\1\43\1\13\1\162\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\163\1\122\4\1\4\13\1\43\1\123\1\164\1"+
    "\156\3\13\1\40\3\13\1\156\3\13\1\26\1\165\1\40\1\13\1\42\1\153\4\1\1\166\1"+
    "\13\1\167\17\13\1\170\21\13\1\147\2\13\1\147\1\171\1\13\1\42\3\13\1\172\1"+
    "\173\1\174\1\135\1\173\1\175\1\1\1\176\1\177\1\64\1\200\1\1\1\201\1\1\1\135"+
    "\3\1\2\13\1\64\1\202\1\203\1\204\1\205\1\206\1\1\2\13\1\153\62\1\1\207\2\13"+
    "\1\162\161\1\2\13\1\122\2\13\1\122\10\13\1\210\1\156\2\13\1\141\3\13\1\211"+
    "\1\177\1\13\1\212\4\213\2\13\2\1\1\177\35\1\1\214\1\1\1\24\1\215\1\24\4\13"+
    "\1\216\1\24\4\13\1\142\1\217\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1"+
    "\13\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1"+
    "\135\1\13\1\220\1\1\3\13\1\221\7\13\1\16\1\1\1\222\1\223\5\13\1\224\1\13\1"+
    "\122\1\26\3\1\1\222\2\13\1\26\1\1\3\13\1\156\4\13\1\60\1\123\1\13\1\225\1"+
    "\40\1\13\1\42\2\13\1\156\1\13\1\135\4\13\1\226\1\123\1\13\1\227\3\13\1\212"+
    "\1\42\1\123\1\13\1\115\4\13\1\32\1\161\1\13\1\230\1\231\1\232\1\213\2\13\1"+
    "\142\1\60\7\13\1\233\1\123\72\13\1\156\1\13\1\234\2\13\1\43\20\1\26\13\1\42"+
    "\6\13\1\162\2\1\1\212\1\235\1\35\1\236\1\237\6\13\1\16\1\1\1\240\25\13\1\42"+
    "\1\1\4\13\1\223\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\241\1\242\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\243\1\24\1\31\1\207\4\13\1\122\1\244\1\245\2\1\1\246"+
    "\1\13\1\14\1\247\2\42\2\1\7\13\1\31\4\1\3\13\1\155\7\1\1\250\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\251\1\252\2\1"+
    "\11\13\1\42\1\123\2\13\1\251\1\13\1\43\2\13\1\26\3\13\1\156\11\1\23\13\1\212"+
    "\1\13\1\60\1\26\11\1\1\253\2\13\1\254\1\13\1\60\1\13\1\212\1\13\1\122\4\1"+
    "\1\13\1\255\1\13\1\60\1\13\1\162\4\1\3\13\1\256\4\1\1\257\1\260\1\13\1\261"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\212\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\153\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\212"+
    "\1\1\1\57\1\177\3\13\1\31\1\1\1\13\1\153\1\123\3\13\1\262\1\1\2\13\1\263\4"+
    "\13\1\264\1\265\2\1\1\13\1\22\1\13\1\266\4\1\1\267\1\27\1\153\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\270\1\271\1\155\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\272\1\123\12\1\3\13\1\273\1\64\1\274\2\1\4\13\1\275\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\177\34\1\3\13\1\153"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\223\1\13\1\223\1\134\1\212\64\1\71\13"+
    "\1\162\6\1\6\13\1\122\1\1\14\13\1\156\53\1\2\13\1\122\75\1\44\13\1\212\33"+
    "\1\43\13\1\153\1\13\1\122\1\123\6\1\1\13\1\42\1\155\3\13\1\212\1\156\1\123"+
    "\1\240\1\276\1\13\67\1\4\13\1\155\2\13\1\122\1\177\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\153\1\277\114\1\1\300"+
    "\1\301\1\302\1\1\1\303\11\1\1\304\33\1\5\13\1\136\3\13\1\154\1\305\1\306\1"+
    "\307\3\13\1\310\1\311\1\13\1\312\1\313\1\101\24\13\1\273\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\314\3\315\40\1\3\13\1\234\2\13\1\135\1\316\1\317\1\164\1\24\25\1\1\14\1"+
    "\224\1\320\75\1\14\13\1\155\1\212\2\1\4\13\1\31\1\123\112\1\1\307\1\13\1\321"+
    "\1\322\1\323\1\324\1\325\1\326\1\327\1\43\1\330\1\43\47\1\1\13\1\162\1\13"+
    "\1\162\1\13\1\162\47\1\55\13\1\212\2\1\103\13\1\155\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3472 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\2\1\4\22\0\1\63\1\46\1\37\1\20\1\16\1\0\1\13\1\14\1\35\1\36"+
    "\1\6\1\42\1\15\1\43\1\33\1\5\12\41\1\7\1\0\1\47\1\45\1\47\1\0\1\34\1\67\1"+
    "\72\1\50\1\71\1\65\1\50\1\70\1\50\1\77\3\50\1\64\1\76\3\50\1\75\1\66\1\50"+
    "\1\73\1\50\1\74\3\50\4\0\1\17\1\0\1\25\1\56\1\31\1\26\1\24\1\101\1\57\1\22"+
    "\1\52\1\50\1\61\1\51\1\53\1\55\1\30\1\27\1\50\1\23\1\32\1\21\1\62\1\54\1\100"+
    "\1\60\2\50\1\10\1\44\1\11\7\0\1\2\12\0\1\1\11\0\1\12\12\0\1\12\4\0\1\12\5"+
    "\0\27\12\1\0\12\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\2\0\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\23\12\1\0\11\12"+
    "\1\0\26\12\2\0\1\12\6\0\10\12\10\0\16\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\1"+
    "\12\10\0\13\12\5\0\3\12\15\0\12\40\4\0\6\12\1\0\10\12\2\0\12\12\1\0\6\12\12"+
    "\40\3\12\2\0\14\12\2\0\3\12\12\40\14\12\4\0\1\12\5\0\16\12\2\0\14\12\4\0\5"+
    "\12\1\0\10\12\6\0\20\12\2\0\12\40\1\12\2\0\16\12\1\0\1\12\3\0\4\12\2\0\11"+
    "\12\2\0\2\12\2\0\4\12\10\0\1\12\4\0\2\12\1\0\1\12\1\0\3\12\1\0\6\12\4\0\2"+
    "\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\12\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12"+
    "\7\0\4\12\1\0\1\12\7\0\12\40\6\12\13\0\3\12\1\0\11\12\1\0\2\12\1\0\2\12\1"+
    "\0\5\12\2\0\12\12\1\0\3\12\1\0\3\12\2\0\1\12\30\0\1\12\7\0\3\12\1\0\10\12"+
    "\2\0\6\12\2\0\2\12\2\0\3\12\10\0\2\12\4\0\2\12\1\0\1\12\1\0\1\12\20\0\2\12"+
    "\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3"+
    "\0\14\12\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\12\6\0\1\12\10\0\4\12\1\0\10\12"+
    "\1\0\3\12\1\0\30\12\3\0\10\12\1\0\3\12\1\0\4\12\7\0\2\12\1\0\3\12\5\0\4\12"+
    "\1\0\5\12\2\0\4\12\5\0\2\12\7\0\1\12\2\0\2\12\16\0\3\12\1\0\10\12\1\0\7\12"+
    "\1\0\3\12\1\0\5\12\5\0\4\12\7\0\1\12\12\0\6\12\2\0\2\12\1\0\22\12\3\0\10\12"+
    "\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\12\4\0\6\12\1\0\1\12\1\0\10\12\2\0\2\12"+
    "\14\0\17\12\1\0\12\40\7\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12"+
    "\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\15\12\1\0\3\12\2\0\5\12"+
    "\1\0\1\12\1\0\6\12\2\0\12\40\2\0\4\12\10\0\2\12\13\0\1\12\1\0\1\12\1\0\1\12"+
    "\4\0\12\12\1\0\24\12\3\0\5\12\1\0\12\12\6\0\1\12\11\0\12\40\4\12\2\0\6\12"+
    "\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12"+
    "\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16\12\2\0\6\12\2\0\15\12"+
    "\2\0\1\12\1\1\32\12\3\0\13\12\7\0\15\12\1\0\7\12\13\0\4\12\14\0\1\12\1\0\2"+
    "\12\14\0\4\12\3\0\1\12\4\0\2\12\15\0\3\12\2\0\12\12\15\0\1\12\23\0\5\12\12"+
    "\40\3\0\6\12\1\0\23\12\1\0\2\12\6\0\6\12\5\0\15\12\1\0\1\12\1\0\1\12\1\0\1"+
    "\12\1\0\6\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\13"+
    "\1\15\0\2\2\5\0\1\1\17\0\1\12\4\0\1\12\12\0\1\1\1\0\1\12\15\0\1\12\2\0\1\12"+
    "\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12"+
    "\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\7\0\17\12\6\0\15\12\7\0\10\12\11\0\7"+
    "\12\1\0\7\12\1\0\1\1\4\0\3\12\11\0\5\12\2\0\5\12\3\0\7\12\2\0\2\12\2\0\3\12"+
    "\5\0\13\12\12\40\2\12\4\0\3\12\1\0\12\12\1\0\1\12\7\0\11\12\2\0\27\12\2\0"+
    "\15\12\3\0\1\12\1\0\1\12\2\0\1\12\16\0\1\12\12\40\5\12\3\0\5\12\12\0\6\12"+
    "\2\0\6\12\2\0\6\12\11\0\13\12\1\0\2\12\2\0\7\12\4\0\5\12\3\0\5\12\5\0\12\12"+
    "\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\12\12\3\0\15\12\3\0\2\12\30\0\16"+
    "\12\4\0\1\12\2\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\14\12\1\0\16\12\1\0\2"+
    "\12\1\0\1\12\15\0\1\12\2\0\4\12\4\0\10\12\1\0\5\12\12\0\6\12\2\0\1\12\1\0"+
    "\14\12\1\0\2\12\3\0\1\12\2\0\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1\0\2\12\5"+
    "\0\10\12\1\0\3\12\1\0\13\12\4\0\3\12\4\0\6\12\1\0\12\40\4\12\2\0\1\12\11\0"+
    "\5\12\5\0\3\12\3\0\12\40\1\12\1\0\1\12\3\0\10\12\6\0\1\12\1\0\7\12\1\0\1\12"+
    "\1\0\4\12\1\0\2\12\6\0\1\12\5\0\7\12\2\0\7\12\3\0\6\12\1\0\1\12\10\0\6\12"+
    "\2\0\10\12\10\0\6\12\2\0\1\12\3\0\1\12\13\0\10\12\5\0\15\12\3\0\2\12\6\0\5"+
    "\12\3\0\6\12\10\0\10\12\2\0\7\12\16\0\4\12\4\0\3\12\15\0\1\12\2\0\2\12\2\0"+
    "\4\12\1\0\14\12\1\0\1\12\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12\1"+
    "\0\14\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\11\12\1\0\10\12\2\0\22\40\5\0\1\12"+
    "\16\0\1\12\13\0\2\12\1\0\2\12\1\0\5\12\6\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12"+
    "\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1\12\1\0\3\12\1"+
    "\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0"+
    "\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12\1\0\12\12\1\0\5\12\1\0"+
    "\3\12\1\0\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\1\1\1\3\1\4\1\5\7\1"+
    "\1\6\1\7\1\10\2\1\1\11\1\12\3\1\6\13"+
    "\2\1\1\14\7\13\2\15\2\1\1\16\1\17\1\20"+
    "\1\1\1\21\2\1\1\22\1\23\1\1\1\24\1\25"+
    "\1\26\1\27\1\30\2\31\1\1\1\16\2\32\1\33"+
    "\1\34\1\35\1\36\1\0\11\1\2\0\3\32\2\13"+
    "\1\0\7\13\2\0\1\37\6\13\1\0\1\16\1\0"+
    "\1\16\1\0\1\23\2\0\1\16\1\32\2\36\1\0"+
    "\12\1\1\10\2\0\2\32\12\13\1\40\1\41\6\13"+
    "\2\16\1\21\1\0\1\16\3\1\1\42\6\1\1\32"+
    "\1\0\2\32\1\13\1\43\2\13\1\44\2\13\1\45"+
    "\6\13\1\46\1\0\1\47\1\50\1\51\1\52\1\53"+
    "\1\1\1\54\2\1\1\0\2\32\1\13\1\0\6\13"+
    "\1\0\1\13\1\55\1\13\1\0\1\56\1\57\1\1"+
    "\3\32\1\13\1\0\4\13\1\60\1\13\1\0\2\13"+
    "\1\0\1\61\1\62\1\32\1\13\1\0\1\63\4\13"+
    "\1\61\1\0\1\64\1\65\1\0\1\66\1\13\1\0"+
    "\1\67\1\0\2\13\2\0\1\13\2\0\1\70\1\13"+
    "\1\0\1\71\1\72\2\0\1\13\1\73\2\0\1\13"+
    "\1\74\1\0\1\13\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u018c\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u03de\0\u03de\0\u03de\0\u04a4\0\u04e6\0\u0528"+
    "\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u06f6"+
    "\0\u0738\0\u03de\0\u03de\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882"+
    "\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u03de\0\u0a50"+
    "\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0462\0\u03de"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u03de\0\u03de\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0daa\0\u0daa\0\u0dec\0\u0e2e\0\u03de\0\u0e70\0\u0eb2"+
    "\0\u03de\0\u03de\0\u0462\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u03de"+
    "\0\u03de\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u077a\0\u1356"+
    "\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566"+
    "\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u0882\0\u1734"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u0c1e\0\u18c0\0\u1902"+
    "\0\u03de\0\u1944\0\u03de\0\u1986\0\u0ef4\0\u19c8\0\u1a0a\0\u03de"+
    "\0\u1a4c\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u03de\0\u1d64\0\u1da6\0\u1de8"+
    "\0\u1e2a\0\u1e6c\0\u1eae\0\u14a0\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\u207c\0\u16b0\0\u03de\0\u20be\0\u2100\0\u2142"+
    "\0\u2184\0\u21c6\0\u2208\0\u224a\0\u1902\0\u03de\0\u228c\0\u22ce"+
    "\0\u2310\0\u2352\0\u2394\0\u04a4\0\u23d6\0\u2418\0\u245a\0\u249c"+
    "\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac"+
    "\0\u26ee\0\u2730\0\u0882\0\u2772\0\u27b4\0\u03de\0\u27f6\0\u2838"+
    "\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u0882\0\u2982\0\u04a4\0\u04a4"+
    "\0\u04a4\0\u04a4\0\u04a4\0\u29c4\0\u04a4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a"+
    "\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u0882\0\u2de4\0\u2e26\0\u04a4"+
    "\0\u04a4\0\u2e68\0\u03de\0\u2eaa\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2"+
    "\0\u2ff4\0\u3036\0\u3078\0\u0882\0\u30ba\0\u30fc\0\u313e\0\u3180"+
    "\0\u31c2\0\u04a4\0\u1356\0\u3204\0\u3246\0\u3288\0\u03de\0\u32ca"+
    "\0\u330c\0\u334e\0\u3390\0\u0882\0\u33d2\0\u0882\0\u0882\0\u3414"+
    "\0\u1356\0\u3456\0\u3498\0\u0882\0\u34da\0\u351c\0\u355e\0\u35a0"+
    "\0\u35e2\0\u3624\0\u3666\0\u36a8\0\u0882\0\u36ea\0\u372c\0\u03de"+
    "\0\u0882\0\u376e\0\u37b0\0\u37f2\0\u03de\0\u3834\0\u3876\0\u38b8"+
    "\0\u03de\0\u38fa\0\u393c\0\u03de\0\u0882";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\4\21\1\22\1\20\1\23\1\24\1\25\1\26"+
    "\4\20\1\26\1\20\1\27\2\26\1\30\1\31\2\26"+
    "\1\32\1\26\1\33\5\20\2\26\6\20\6\26\1\34"+
    "\4\26\1\21\16\26\1\20\4\21\1\22\1\20\1\23"+
    "\1\24\1\25\1\35\4\20\1\35\1\20\12\35\5\20"+
    "\2\35\6\20\13\35\1\21\16\35\1\20\4\21\1\22"+
    "\1\20\1\23\1\24\1\25\1\36\4\20\1\36\1\20"+
    "\12\36\5\20\2\36\6\20\13\36\1\21\16\36\1\20"+
    "\4\21\1\22\1\20\1\23\1\24\1\25\1\37\1\40"+
    "\1\41\2\20\1\37\1\20\12\37\5\20\2\37\6\20"+
    "\13\37\1\21\16\37\1\20\4\21\1\22\1\42\1\23"+
    "\1\24\1\25\1\37\1\40\1\41\1\43\1\20\1\37"+
    "\1\20\12\37\5\20\2\37\6\20\13\37\1\21\16\37"+
    "\1\20\4\21\1\22\1\20\1\23\1\24\1\25\1\44"+
    "\3\20\1\45\1\44\1\46\1\47\2\50\1\51\2\50"+
    "\1\52\1\50\1\53\1\54\1\20\1\45\1\55\1\20"+
    "\1\56\2\44\1\57\5\20\2\50\1\60\3\50\1\61"+
    "\1\62\3\50\1\21\1\63\4\50\1\64\2\50\1\65"+
    "\3\50\1\66\1\50\1\20\4\21\1\67\1\70\1\23"+
    "\1\24\1\25\1\71\1\72\2\20\1\45\1\71\1\46"+
    "\12\73\1\20\1\45\1\74\1\75\1\76\2\77\2\70"+
    "\1\100\1\101\1\102\1\103\13\73\1\21\16\73\1\20"+
    "\4\21\1\22\1\20\1\23\1\24\1\25\43\20\1\104"+
    "\5\20\1\21\17\20\4\21\1\22\1\20\1\23\1\24"+
    "\1\25\1\105\4\20\1\105\1\20\12\105\1\106\1\20"+
    "\1\55\2\20\2\105\6\20\13\105\1\21\16\105\1\20"+
    "\4\21\1\22\1\20\1\23\1\24\1\25\1\107\4\20"+
    "\1\107\1\20\12\107\5\20\2\107\6\20\13\107\1\21"+
    "\16\107\1\20\4\21\1\22\1\20\1\23\1\24\1\25"+
    "\1\110\3\20\1\45\1\110\1\45\12\110\1\20\1\45"+
    "\3\20\2\110\3\20\1\111\2\20\13\110\1\21\16\110"+
    "\1\112\4\21\1\113\1\112\1\23\1\24\1\25\51\112"+
    "\1\21\16\112\1\20\4\21\1\22\1\20\1\23\1\24"+
    "\1\25\1\114\4\20\1\114\1\20\12\115\5\20\2\114"+
    "\6\20\13\115\1\21\16\115\1\20\4\21\1\22\1\20"+
    "\1\23\1\24\1\25\4\20\1\116\1\117\1\46\12\117"+
    "\1\120\1\45\1\55\3\20\1\117\3\20\1\121\2\20"+
    "\13\117\1\21\16\117\1\20\4\21\1\22\1\20\1\23"+
    "\1\24\1\25\26\20\2\122\21\20\1\21\16\20\103\0"+
    "\4\21\56\0\1\21\23\0\1\123\1\124\105\0\1\26"+
    "\4\0\1\26\1\0\12\26\5\0\2\26\6\0\13\26"+
    "\1\0\16\26\12\0\1\26\4\0\1\26\1\0\2\26"+
    "\1\125\7\26\5\0\2\26\6\0\13\26\1\0\16\26"+
    "\12\0\1\26\4\0\1\26\1\0\12\26\5\0\2\26"+
    "\6\0\4\26\1\126\1\127\2\26\1\130\2\26\1\0"+
    "\16\26\12\0\1\26\4\0\1\26\1\0\12\26\5\0"+
    "\2\26\6\0\1\26\1\131\11\26\1\0\16\26\12\0"+
    "\1\26\4\0\1\26\1\0\6\26\1\132\3\26\5\0"+
    "\2\26\6\0\13\26\1\0\16\26\12\0\1\26\4\0"+
    "\1\26\1\0\1\133\7\26\1\134\1\26\5\0\2\26"+
    "\6\0\13\26\1\0\16\26\12\0\1\26\4\0\1\26"+
    "\1\0\12\26\5\0\2\26\6\0\2\26\1\135\10\26"+
    "\1\0\16\26\12\0\1\35\4\0\1\35\1\0\12\35"+
    "\5\0\2\35\6\0\13\35\1\0\16\35\12\0\1\36"+
    "\4\0\1\36\1\0\12\36\5\0\2\36\6\0\13\36"+
    "\1\0\16\36\12\0\1\37\4\0\1\37\1\0\12\37"+
    "\5\0\2\37\6\0\13\37\1\0\16\37\14\136\1\0"+
    "\65\136\12\0\1\137\4\0\1\137\1\0\12\50\5\0"+
    "\2\137\6\0\13\50\1\0\16\50\12\0\1\140\4\0"+
    "\1\140\1\0\12\140\5\0\2\140\6\0\13\140\1\0"+
    "\16\140\12\0\1\140\4\0\1\140\1\0\1\141\5\140"+
    "\1\142\3\140\5\0\2\140\6\0\13\140\1\0\16\140"+
    "\12\0\1\50\4\0\1\50\1\0\1\50\1\143\10\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\16\50\12\0\1\50\4\0\1\50\1\0\12\50\1\144"+
    "\1\0\1\145\2\0\2\50\6\0\13\50\1\0\16\50"+
    "\12\0\1\50\4\0\1\50\1\0\12\50\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\1\50\1\146\6\50\1\147"+
    "\2\50\1\0\16\50\12\0\1\50\4\0\1\50\1\0"+
    "\2\50\1\150\7\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\0\16\50\12\0\1\50\4\0\1\50"+
    "\1\0\4\50\1\151\2\50\1\152\2\50\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\13\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\3\50\1\153\4\50\1\154"+
    "\1\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\0\16\50\2\155\3\0\75\155\37\156\1\0\42\156"+
    "\12\0\1\50\4\0\1\50\1\0\12\50\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\13\50\1\0\15\50\1\157"+
    "\12\0\1\50\4\0\1\50\1\0\12\50\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\2\50\1\160\10\50\1\0"+
    "\16\50\12\0\1\50\4\0\1\50\1\0\7\50\1\161"+
    "\2\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\0\16\50\12\0\1\50\4\0\1\50\1\0\12\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\1\50\1\162\14\50\12\0\1\50\4\0\1\50\1\0"+
    "\12\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\0\1\50\1\163\14\50\12\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\3\50\1\164\12\50\12\0\1\50\4\0"+
    "\1\50\1\0\4\50\1\165\5\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\0\16\50\12\0\1\166"+
    "\4\0\1\166\1\0\12\73\5\0\2\166\6\0\13\73"+
    "\1\0\16\73\13\0\1\70\100\0\1\73\4\0\1\73"+
    "\1\0\12\73\1\167\1\0\1\170\1\171\1\0\2\73"+
    "\6\0\13\73\1\0\16\73\37\172\1\0\42\172\12\0"+
    "\1\166\4\0\1\166\1\0\12\73\5\0\2\77\6\0"+
    "\13\73\1\0\16\73\44\0\1\70\102\0\1\173\64\0"+
    "\1\174\63\0\1\105\4\0\1\105\1\0\12\105\5\0"+
    "\2\105\6\0\13\105\1\0\16\105\12\0\1\107\4\0"+
    "\1\107\1\0\12\107\5\0\2\107\6\0\13\107\1\0"+
    "\16\107\12\0\1\110\4\0\1\110\1\0\12\110\5\0"+
    "\2\110\6\0\13\110\1\0\16\110\12\0\1\175\4\0"+
    "\1\175\1\0\12\115\5\0\2\175\6\0\13\115\1\0"+
    "\16\115\12\0\1\115\4\0\1\115\1\0\12\115\1\176"+
    "\1\0\1\170\2\0\2\115\6\0\13\115\1\0\16\115"+
    "\12\0\1\140\3\0\1\117\1\177\1\0\12\177\5\0"+
    "\1\140\1\177\6\0\13\177\1\0\16\177\16\0\2\117"+
    "\1\0\12\117\6\0\1\117\6\0\13\117\1\0\16\117"+
    "\40\0\2\122\40\0\3\123\1\200\1\201\75\123\6\124"+
    "\1\202\73\124\12\0\1\26\4\0\1\26\1\0\4\26"+
    "\1\203\5\26\5\0\2\26\6\0\13\26\1\0\16\26"+
    "\12\0\1\26\4\0\1\26\1\0\3\26\1\204\6\26"+
    "\5\0\2\26\6\0\13\26\1\0\16\26\12\0\1\26"+
    "\4\0\1\26\1\0\1\205\11\26\5\0\2\26\6\0"+
    "\13\26\1\0\16\26\12\0\1\26\4\0\1\26\1\0"+
    "\12\26\5\0\2\26\6\0\2\26\1\206\10\26\1\0"+
    "\16\26\12\0\1\26\4\0\1\26\1\0\4\26\1\207"+
    "\5\26\5\0\2\26\6\0\2\26\1\210\10\26\1\0"+
    "\16\26\12\0\1\26\4\0\1\26\1\0\1\211\11\26"+
    "\5\0\2\26\6\0\13\26\1\0\16\26\12\0\1\26"+
    "\4\0\1\26\1\0\4\26\1\212\5\26\5\0\2\26"+
    "\6\0\13\26\1\0\16\26\12\0\1\26\4\0\1\26"+
    "\1\0\2\26\1\213\7\26\5\0\2\26\6\0\13\26"+
    "\1\0\16\26\12\0\1\26\4\0\1\26\1\0\12\26"+
    "\5\0\2\26\6\0\5\26\1\214\5\26\1\0\16\26"+
    "\14\136\1\215\65\136\12\0\1\140\4\0\1\140\1\0"+
    "\12\140\1\216\1\0\1\217\2\0\2\140\6\0\13\140"+
    "\1\0\16\140\12\0\1\140\4\0\1\140\1\0\1\140"+
    "\1\220\10\140\1\216\1\0\1\217\2\0\2\140\6\0"+
    "\13\140\1\0\16\140\12\0\1\140\4\0\1\140\1\0"+
    "\2\140\1\221\7\140\1\216\1\0\1\217\2\0\2\140"+
    "\6\0\13\140\1\0\16\140\12\0\1\50\4\0\1\50"+
    "\1\0\2\50\1\222\7\50\1\144\1\0\1\145\2\0"+
    "\2\50\6\0\13\50\1\0\16\50\12\0\1\223\4\0"+
    "\1\223\1\0\12\223\1\144\1\0\1\145\2\0\2\223"+
    "\6\0\13\223\1\0\16\223\2\145\3\0\31\145\1\224"+
    "\43\145\12\0\1\50\4\0\1\50\1\0\11\50\1\225"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\16\50\12\0\1\50\4\0\1\50\1\0\3\50\1\226"+
    "\6\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\0\16\50\12\0\1\50\4\0\1\50\1\0\7\50"+
    "\1\227\2\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\16\50\12\0\1\50\4\0\1\50\1\0"+
    "\12\50\1\144\1\0\1\145\2\0\2\50\6\0\1\50"+
    "\1\230\11\50\1\0\16\50\12\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\5\50\1\231\5\50\1\0\16\50\12\0\1\50\4\0"+
    "\1\50\1\0\1\232\11\50\1\144\1\0\1\145\2\0"+
    "\2\50\6\0\13\50\1\0\16\50\12\0\1\50\4\0"+
    "\1\50\1\0\2\50\1\233\7\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\0\16\50\2\155\3\0"+
    "\31\155\1\234\43\155\37\156\1\235\42\156\12\0\1\50"+
    "\4\0\1\50\1\0\12\50\1\144\1\0\1\145\2\0"+
    "\2\50\6\0\5\50\1\236\5\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\1\237\11\50\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\13\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\12\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\0\2\50\1\240\13\50"+
    "\12\0\1\50\4\0\1\50\1\0\12\50\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\13\50\1\0\6\50\1\241"+
    "\7\50\12\0\1\50\4\0\1\50\1\0\12\50\1\144"+
    "\1\0\1\145\2\0\2\50\6\0\13\50\1\0\11\50"+
    "\1\242\4\50\12\0\1\50\4\0\1\50\1\0\12\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\2\50\1\243"+
    "\10\50\1\0\16\50\12\0\1\244\4\0\1\244\1\0"+
    "\12\244\1\167\1\0\1\170\1\171\1\0\2\244\6\0"+
    "\13\244\1\0\16\244\2\170\3\0\31\170\1\245\43\170"+
    "\37\172\1\246\42\172\17\0\1\247\74\0\1\250\4\0"+
    "\1\250\1\0\12\250\1\176\1\0\1\170\2\0\2\250"+
    "\6\0\13\250\1\0\16\250\12\0\1\140\3\0\1\117"+
    "\1\177\1\0\12\177\1\216\1\0\1\217\2\0\1\140"+
    "\1\177\6\0\13\177\1\0\16\177\3\0\1\200\76\0"+
    "\5\124\1\200\1\202\73\124\12\0\1\26\4\0\1\26"+
    "\1\0\10\26\1\251\1\26\5\0\2\26\6\0\13\26"+
    "\1\0\16\26\12\0\1\26\4\0\1\26\1\0\12\26"+
    "\5\0\2\26\6\0\5\26\1\252\5\26\1\0\16\26"+
    "\12\0\1\26\4\0\1\26\1\0\3\26\1\253\6\26"+
    "\5\0\2\26\6\0\13\26\1\0\16\26\12\0\1\26"+
    "\4\0\1\26\1\0\1\254\11\26\5\0\2\26\6\0"+
    "\13\26\1\0\16\26\12\0\1\26\4\0\1\26\1\0"+
    "\2\26\1\255\7\26\5\0\2\26\6\0\13\26\1\0"+
    "\16\26\12\0\1\26\4\0\1\26\1\0\4\26\1\256"+
    "\5\26\5\0\2\26\6\0\13\26\1\0\16\26\12\0"+
    "\1\26\4\0\1\26\1\0\12\26\5\0\2\26\6\0"+
    "\2\26\1\257\10\26\1\0\16\26\12\0\1\26\4\0"+
    "\1\26\1\0\1\260\11\26\5\0\2\26\6\0\13\26"+
    "\1\0\16\26\12\0\1\26\4\0\1\26\1\0\12\26"+
    "\5\0\2\26\6\0\2\26\1\261\10\26\1\0\16\26"+
    "\12\0\1\26\4\0\1\26\1\0\5\26\1\262\4\26"+
    "\5\0\2\26\6\0\13\26\1\0\16\26\12\0\1\263"+
    "\4\0\1\263\1\0\12\263\5\0\2\263\6\0\13\263"+
    "\1\0\16\263\16\0\1\264\1\0\1\264\13\0\1\264"+
    "\57\0\1\140\4\0\1\140\1\0\2\140\1\265\7\140"+
    "\1\216\1\0\1\217\2\0\2\140\6\0\13\140\1\0"+
    "\16\140\12\0\1\140\4\0\1\140\1\0\7\140\1\266"+
    "\2\140\1\216\1\0\1\217\2\0\2\140\6\0\13\140"+
    "\1\0\16\140\12\0\1\50\4\0\1\50\1\0\3\50"+
    "\1\267\6\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\16\50\12\0\1\223\4\0\1\223\1\0"+
    "\12\223\2\0\1\145\2\0\2\223\6\0\13\223\1\0"+
    "\16\223\12\0\1\50\4\0\1\50\1\0\3\50\1\270"+
    "\6\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\0\16\50\12\0\1\50\4\0\1\50\1\0\10\50"+
    "\1\271\1\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\16\50\12\0\1\50\4\0\1\50\1\0"+
    "\10\50\1\272\1\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\0\16\50\12\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\1\50\1\273\11\50\1\0\16\50\12\0\1\50\4\0"+
    "\1\50\1\0\5\50\1\274\3\50\1\275\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\13\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\12\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\276\16\50\12\0\1\50"+
    "\4\0\1\50\1\0\12\50\1\144\1\0\1\145\2\0"+
    "\2\50\6\0\2\50\1\277\10\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\5\50\1\300\4\50\1\144"+
    "\1\0\1\145\2\0\2\50\6\0\13\50\1\0\16\50"+
    "\12\0\1\50\4\0\1\50\1\0\7\50\1\301\2\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\16\50\12\0\1\50\4\0\1\50\1\0\12\50\1\144"+
    "\1\0\1\145\2\0\2\50\6\0\13\50\1\0\2\50"+
    "\1\302\13\50\12\0\1\50\4\0\1\50\1\0\12\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\7\50\1\303\6\50\12\0\1\50\4\0\1\50\1\0"+
    "\12\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\0\12\50\1\304\3\50\12\0\1\50\4\0\1\50"+
    "\1\0\1\305\11\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\0\16\50\12\0\1\244\4\0\1\244"+
    "\1\0\12\244\2\0\1\170\1\171\1\0\2\244\6\0"+
    "\13\244\1\0\16\244\51\0\1\306\42\0\1\250\4\0"+
    "\1\250\1\0\12\250\2\0\1\170\2\0\2\250\6\0"+
    "\13\250\1\0\16\250\12\0\1\26\4\0\1\26\1\0"+
    "\3\26\1\307\6\26\5\0\2\26\6\0\13\26\1\0"+
    "\16\26\12\0\1\26\4\0\1\26\1\0\1\310\11\26"+
    "\5\0\2\26\6\0\13\26\1\0\16\26\12\0\1\26"+
    "\4\0\1\26\1\0\2\26\1\311\7\26\5\0\2\26"+
    "\6\0\13\26\1\0\16\26\12\0\1\26\4\0\1\26"+
    "\1\0\12\26\5\0\2\26\6\0\3\26\1\312\7\26"+
    "\1\0\16\26\12\0\1\26\4\0\1\26\1\0\11\26"+
    "\1\313\5\0\2\26\6\0\13\26\1\0\16\26\12\0"+
    "\1\26\4\0\1\26\1\0\7\26\1\314\2\26\5\0"+
    "\2\26\6\0\13\26\1\0\16\26\12\0\1\26\4\0"+
    "\1\26\1\0\3\26\1\315\6\26\5\0\2\26\6\0"+
    "\13\26\1\0\16\26\12\0\1\26\4\0\1\26\1\0"+
    "\6\26\1\316\3\26\5\0\2\26\6\0\13\26\1\0"+
    "\16\26\12\0\1\26\4\0\1\26\1\0\12\26\5\0"+
    "\2\26\6\0\2\26\1\317\10\26\1\0\16\26\12\0"+
    "\1\263\4\0\1\263\1\0\12\263\1\216\4\0\2\263"+
    "\6\0\13\263\1\0\16\263\12\0\1\320\4\0\1\320"+
    "\1\0\12\320\5\0\2\320\6\0\13\320\1\0\16\320"+
    "\12\0\1\140\4\0\1\140\1\0\3\140\1\321\6\140"+
    "\1\216\1\0\1\217\2\0\2\140\6\0\13\140\1\0"+
    "\16\140\12\0\1\140\4\0\1\140\1\0\10\140\1\322"+
    "\1\140\1\216\1\0\1\217\2\0\2\140\6\0\13\140"+
    "\1\0\16\140\12\0\1\50\4\0\1\50\1\0\4\50"+
    "\1\323\5\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\16\50\12\0\1\50\4\0\1\50\1\0"+
    "\12\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\324\16\50\12\0\1\50\4\0\1\325\1\0\12\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\16\50\12\0\1\50\4\0\1\50\1\0\3\50\1\326"+
    "\6\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\0\16\50\12\0\1\50\4\0\1\50\1\0\12\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\2\50\1\327"+
    "\10\50\1\0\16\50\12\0\1\50\4\0\1\50\1\0"+
    "\12\50\1\144\1\0\1\145\2\0\2\50\6\0\12\50"+
    "\1\330\1\0\16\50\12\0\1\50\4\0\1\50\1\0"+
    "\6\50\1\331\3\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\0\16\50\12\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\2\50\1\332\10\50\1\0\16\50\12\0\1\50\4\0"+
    "\1\50\1\0\12\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\333\16\50\12\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\3\50\1\334\12\50\12\0\1\50\4\0"+
    "\1\50\1\0\12\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\0\4\50\1\335\11\50\12\0\1\50"+
    "\4\0\1\50\1\0\12\50\1\144\1\0\1\145\2\0"+
    "\2\50\6\0\13\50\1\0\13\50\1\336\2\50\30\0"+
    "\1\337\63\0\1\26\4\0\1\26\1\0\12\26\5\0"+
    "\2\26\6\0\5\26\1\340\5\26\1\0\16\26\12\0"+
    "\1\26\4\0\1\26\1\0\1\341\11\26\5\0\2\26"+
    "\6\0\13\26\1\0\16\26\12\0\1\26\4\0\1\26"+
    "\1\0\12\26\5\0\2\26\6\0\5\26\1\342\5\26"+
    "\1\0\16\26\12\0\1\320\4\0\1\320\1\0\12\320"+
    "\3\0\1\343\1\0\2\320\6\0\13\320\1\0\16\320"+
    "\12\0\1\140\4\0\1\140\1\0\4\140\1\344\5\140"+
    "\1\216\1\0\1\217\2\0\2\140\6\0\13\140\1\0"+
    "\16\140\12\0\1\140\4\0\1\140\1\0\3\140\1\345"+
    "\6\140\1\216\1\0\1\217\2\0\2\140\6\0\13\140"+
    "\1\0\16\140\12\0\1\50\4\0\1\50\1\0\5\50"+
    "\1\346\4\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\16\50\52\0\1\347\41\0\1\50\4\0"+
    "\1\50\1\0\3\50\1\350\6\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\0\16\50\12\0\1\50"+
    "\4\0\1\50\1\0\11\50\1\351\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\0\16\50\12\0\1\50"+
    "\4\0\1\50\1\0\1\352\11\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\0\16\50\12\0\1\50"+
    "\4\0\1\50\1\0\12\50\1\144\1\0\1\145\2\0"+
    "\2\50\6\0\3\50\1\353\7\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\1\354\11\50\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\13\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\12\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\5\50\1\355\5\50\1\0\16\50"+
    "\32\0\1\356\61\0\1\50\4\0\1\50\1\0\12\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\4\50\1\357\11\50\12\0\1\50\4\0\1\50\1\0"+
    "\12\50\1\144\1\0\1\145\2\0\2\50\6\0\13\50"+
    "\1\0\12\50\1\360\3\50\30\0\1\361\63\0\1\26"+
    "\4\0\1\26\1\0\12\26\5\0\2\26\6\0\7\26"+
    "\1\362\3\26\1\0\16\26\12\0\1\140\4\0\1\140"+
    "\1\0\5\140\1\363\4\140\1\216\1\0\1\217\2\0"+
    "\2\140\6\0\13\140\1\0\16\140\12\0\1\140\4\0"+
    "\1\140\1\0\11\140\1\364\1\216\1\0\1\217\2\0"+
    "\2\140\6\0\13\140\1\0\16\140\12\0\1\50\4\0"+
    "\1\365\1\0\12\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\366\16\50\101\0\1\367\12\0\1\50"+
    "\4\0\1\50\1\0\12\50\1\144\1\0\1\145\2\0"+
    "\2\50\6\0\5\50\1\370\5\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\11\50\1\371\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\13\50\1\0\16\50\12\0"+
    "\1\50\4\0\1\50\1\0\12\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\2\50\1\372\10\50\1\0\16\50"+
    "\12\0\1\50\4\0\1\50\1\0\3\50\1\373\6\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\16\50\12\0\1\50\4\0\1\50\1\0\12\50\1\144"+
    "\1\0\1\145\2\0\2\50\6\0\7\50\1\374\3\50"+
    "\1\0\16\50\21\0\1\375\72\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\1\50\1\376\14\50\12\0\1\50\4\0"+
    "\1\50\1\0\12\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\0\4\50\1\377\11\50\61\0\1\u0100"+
    "\32\0\1\140\4\0\1\140\1\0\11\140\1\u0101\1\216"+
    "\1\0\1\217\2\0\2\140\6\0\13\140\1\0\16\140"+
    "\12\0\1\50\4\0\1\50\1\0\3\50\1\u0102\6\50"+
    "\1\144\1\0\1\145\2\0\2\50\6\0\13\50\1\0"+
    "\16\50\32\0\1\u0103\61\0\1\50\4\0\1\50\1\0"+
    "\5\50\1\u0104\4\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\0\16\50\12\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\u0105\16\50\12\0\1\50\4\0\1\50\1\0"+
    "\7\50\1\u0106\2\50\1\144\1\0\1\145\2\0\2\50"+
    "\6\0\13\50\1\0\16\50\12\0\1\50\4\0\1\u0107"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\16\50\25\0\1\u0108\136\0\1\u0109\31\0"+
    "\1\50\4\0\1\50\1\0\12\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\5\50\1\u010a\5\50\1\0\16\50"+
    "\21\0\1\u010b\112\0\1\u010c\61\0\1\50\4\0\1\50"+
    "\1\0\12\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\5\50\1\u010d\5\50\1\0\16\50\12\0\1\50\4\0"+
    "\1\50\1\0\3\50\1\u010e\6\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\0\16\50\21\0\1\u010f"+
    "\107\0\1\u0110\64\0\1\50\4\0\1\50\1\0\5\50"+
    "\1\u0111\4\50\1\144\1\0\1\145\2\0\2\50\6\0"+
    "\13\50\1\0\16\50\25\0\1\u0112\75\0\1\u0113\72\0"+
    "\1\50\4\0\1\50\1\0\12\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\4\50\1\u0114\6\50\1\0\16\50"+
    "\24\0\1\u0115\76\0\1\u0116\105\0\1\u0117\66\0\1\50"+
    "\4\0\1\50\1\0\3\50\1\u0118\6\50\1\144\1\0"+
    "\1\145\2\0\2\50\6\0\13\50\1\0\16\50\24\0"+
    "\1\u0119\76\0\1\u011a\72\0\1\50\4\0\1\50\1\0"+
    "\12\50\1\144\1\0\1\145\2\0\2\50\6\0\5\50"+
    "\1\u011b\5\50\1\0\16\50\24\0\1\u011c\67\0\1\50"+
    "\4\0\1\50\1\0\1\u011d\11\50\1\144\1\0\1\145"+
    "\2\0\2\50\6\0\13\50\1\0\16\50";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14718];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\1\11\2\1\3\11\14\1\2\11\13\1\1\11"+
    "\10\1\1\11\3\1\2\11\10\1\1\11\2\1\2\11"+
    "\5\1\2\11\2\1\1\0\11\1\2\0\5\1\1\0"+
    "\7\1\2\0\7\1\1\0\1\1\1\0\1\11\1\0"+
    "\1\11\2\0\2\1\1\11\1\1\1\0\12\1\1\11"+
    "\2\0\15\1\1\11\10\1\1\11\1\0\14\1\1\0"+
    "\11\1\1\11\7\1\1\0\11\1\1\0\3\1\1\0"+
    "\6\1\1\0\3\1\1\0\3\1\1\11\3\1\1\0"+
    "\6\1\1\0\2\1\1\0\4\1\1\0\1\11\5\1"+
    "\1\0\2\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\2\0\2\1\1\0\1\11\1\1\2\0"+
    "\1\1\1\11\2\0\1\1\1\11\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Vrai si le lexer se trouve dans un bloc if, else if, else ou condition
    boolean conditionBlock = false;
    // Vrao si le script que le lexer vient de lire se trouve à la racine du fichier
    boolean rootScript = false;

    // Nombre de début de bloc trouvé dans un code Javascript
    int nbBlockBegin = 0;
    // Nombre de fin de bloc trouvé dans un code Javascript
    int nbBlockEnd = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 63: break;
          case 2: 
            { if(yystate() == STATES_CALLS) { yybegin(INSTRUCTIONS); } return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 64: break;
          case 3: 
            { return SmlTypes.SEPARATOR;
            } 
            // fall through
          case 65: break;
          case 4: 
            { if(yystate() == JAVASCRIPT_CODE) {
          nbBlockBegin++;
          return SmlTypes.JAVASCRIPT_CODE;
        } else if(yystate() == EVENTS_DEFINITIONS) {
          yybegin(INSTRUCTIONS);
        }
        return SmlTypes.BEGIN_BLOCK;
            } 
            // fall through
          case 66: break;
          case 5: 
            { if(yystate() == JAVASCRIPT_CODE && nbBlockBegin > nbBlockEnd && nbBlockBegin != 0) {
          nbBlockEnd++;
          return SmlTypes.JAVASCRIPT_CODE;
        } else if(yystate() == BINDINGS) {
          yybegin(JAVASCRIPT_CODE);
        } else if(conditionBlock) {
          conditionBlock = false;
          yybegin(INSTRUCTIONS);
        } else if(yystate() == INSTRUCTIONS || yystate() == OPTIONS || yystate() == EVENTS_NAMES) {
          yybegin(YYINITIAL);
        } else if(yystate() == JAVASCRIPT_CODE) {
          yybegin(rootScript ? YYINITIAL : INSTRUCTIONS);
        }
        return SmlTypes.END_BLOCK;
            } 
            // fall through
          case 67: break;
          case 6: 
            { yybegin(YYINITIAL); return SmlTypes.STATE_NAME;
            } 
            // fall through
          case 68: break;
          case 7: 
            { yybegin(EVENTS_NAMES); return SmlTypes.ALIAS_NAME;
            } 
            // fall through
          case 69: break;
          case 8: 
            { return SmlTypes.EVENT_NAME;
            } 
            // fall through
          case 70: break;
          case 9: 
            { return SmlTypes.ALL_EVENTS;
            } 
            // fall through
          case 71: break;
          case 10: 
            { return SmlTypes.EVENT_NAME_SEPARATOR;
            } 
            // fall through
          case 72: break;
          case 11: 
            { return SmlTypes.JAVA_FUNCTION_CALL;
            } 
            // fall through
          case 73: break;
          case 12: 
            { return SmlTypes.TRACE_MESSAGE_SEPARATOR;
            } 
            // fall through
          case 74: break;
          case 13: 
            { return SmlTypes.OP_CONDS;
            } 
            // fall through
          case 75: break;
          case 14: 
            { yybegin(INSTRUCTIONS); return SmlTypes.JAVA_FUNCTION_CALL;
            } 
            // fall through
          case 76: break;
          case 15: 
            { return SmlTypes.BEGIN_PARENTHESE;
            } 
            // fall through
          case 77: break;
          case 16: 
            { yybegin(INSTRUCTIONS); return SmlTypes.END_PARENTHESE;
            } 
            // fall through
          case 78: break;
          case 17: 
            { return SmlTypes.CONST_CONDS;
            } 
            // fall through
          case 79: break;
          case 18: 
            { return SmlTypes.OPERATORS_NOT;
            } 
            // fall through
          case 80: break;
          case 19: 
            { return SmlTypes.COMP_CONDS;
            } 
            // fall through
          case 81: break;
          case 20: 
            { return SmlTypes.STATE_NAME;
            } 
            // fall through
          case 82: break;
          case 21: 
            { return SmlTypes.STATE_NAME_SEPARATOR;
            } 
            // fall through
          case 83: break;
          case 22: 
            { yybegin(INSTRUCTIONS); return SmlTypes.THREAD_NAME;
            } 
            // fall through
          case 84: break;
          case 23: 
            { return SmlTypes.BIND_NAME;
            } 
            // fall through
          case 85: break;
          case 24: 
            { return SmlTypes.EQUALS_SEPARATOR;
            } 
            // fall through
          case 86: break;
          case 25: 
            { return SmlTypes.JAVASCRIPT_CODE;
            } 
            // fall through
          case 87: break;
          case 26: 
            { return SmlTypes.SML_VARS;
            } 
            // fall through
          case 88: break;
          case 27: 
            { return SmlTypes.DOT_SEPARATOR;
            } 
            // fall through
          case 89: break;
          case 28: 
            { yybegin(INSTRUCTIONS); return SmlTypes.EQUALS_SEPARATOR;
            } 
            // fall through
          case 90: break;
          case 29: 
            { yybegin(INSTRUCTIONS); return SmlTypes.WAIT_TIMER;
            } 
            // fall through
          case 91: break;
          case 30: 
            { return SmlTypes.COMMENT;
            } 
            // fall through
          case 92: break;
          case 31: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.IF;
            } 
            // fall through
          case 93: break;
          case 32: 
            { return SmlTypes.IDENTIFICATION_KEY;
            } 
            // fall through
          case 94: break;
          case 33: 
            { return SmlTypes.TRACE_MESSAGE_STRING;
            } 
            // fall through
          case 95: break;
          case 34: 
            { yybegin(INSTRUCTIONS); return SmlTypes.EXIT;
            } 
            // fall through
          case 96: break;
          case 35: 
            { return SmlTypes.ELSE;
            } 
            // fall through
          case 97: break;
          case 36: 
            { yybegin(CALL);return SmlTypes.CALL;
            } 
            // fall through
          case 98: break;
          case 37: 
            { yybegin(SET); return SmlTypes.SET;
            } 
            // fall through
          case 99: break;
          case 38: 
            { yybegin(WAIT); return SmlTypes.WAIT;
            } 
            // fall through
          case 100: break;
          case 39: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.TRACE;
            } 
            // fall through
          case 101: break;
          case 40: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.EVENT;
            } 
            // fall through
          case 102: break;
          case 41: 
            { yybegin(INSTRUCTIONS); return SmlTypes.ENTER;
            } 
            // fall through
          case 103: break;
          case 42: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.ALARM;
            } 
            // fall through
          case 104: break;
          case 43: 
            { yybegin(ALIAS_NAMES); return SmlTypes.ALIAS;
            } 
            // fall through
          case 105: break;
          case 44: 
            { yybegin(STATES_NAMES); return SmlTypes.STATE;
            } 
            // fall through
          case 106: break;
          case 45: 
            { return SmlTypes.DEBUG;
            } 
            // fall through
          case 107: break;
          case 46: 
            { yybegin(OPTIONS); return SmlTypes.OPTION;
            } 
            // fall through
          case 108: break;
          case 47: 
            { rootScript = true; return SmlTypes.SCRIPT;
            } 
            // fall through
          case 109: break;
          case 48: 
            { rootScript = false; return SmlTypes.SCRIPT;
            } 
            // fall through
          case 110: break;
          case 49: 
            { yybegin(BINDINGS); return SmlTypes.BINDING;
            } 
            // fall through
          case 111: break;
          case 50: 
            { return SmlTypes.THREAD_KEYWORD;
            } 
            // fall through
          case 112: break;
          case 51: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.ELSE_IF;
            } 
            // fall through
          case 113: break;
          case 52: 
            { return SmlTypes.MESSAGE;
            } 
            // fall through
          case 114: break;
          case 53: 
            { return SmlTypes.WARNING;
            } 
            // fall through
          case 115: break;
          case 54: 
            { return SmlTypes.PROCESS_KEYWORD;
            } 
            // fall through
          case 116: break;
          case 55: 
            { return SmlTypes.EXEC_END;
            } 
            // fall through
          case 117: break;
          case 56: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.CONDITION;
            } 
            // fall through
          case 118: break;
          case 57: 
            { return SmlTypes.OPTIONS;
            } 
            // fall through
          case 119: break;
          case 58: 
            { return SmlTypes.THREAD_END;
            } 
            // fall through
          case 120: break;
          case 59: 
            { yybegin(STATES_CALLS); return SmlTypes.GOTO_STATE;
            } 
            // fall through
          case 121: break;
          case 60: 
            { yybegin(THREADS_NAMES); return SmlTypes.THREAD_STATE;
            } 
            // fall through
          case 122: break;
          case 61: 
            { yybegin(STATES_CALLS); return SmlTypes.PROCESS_STATE;
            } 
            // fall through
          case 123: break;
          case 62: 
            { return SmlTypes.CONSUME_EVENT;
            } 
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
