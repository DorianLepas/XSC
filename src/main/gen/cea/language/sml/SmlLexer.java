/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package cea.language.sml;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import cea.language.sml.psi.SmlTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SmlLexerDefinition.flex</tt>
 */
public class SmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATES_NAMES = 2;
  public static final int ALIAS_NAMES = 4;
  public static final int EVENTS_NAMES = 6;
  public static final int EVENTS_DEFINITIONS = 8;
  public static final int INSTRUCTIONS = 10;
  public static final int CONDITIONS = 12;
  public static final int OPTIONS = 14;
  public static final int STATES_CALLS = 16;
  public static final int THREADS_NAMES = 18;
  public static final int BINDINGS = 20;
  public static final int JAVASCRIPT_CODE = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1"+
    "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22"+
    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1"+
    "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107"+
    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13"+
    "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1"+
    "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121"+
    "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1"+
    "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13"+
    "\1\145\1\31\4\13\1\146\1\147\1\150\1\151\1\13\1\151\1\13\1\152\1\150\1\153"+
    "\5\13\1\154\1\121\1\1\1\155\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120"+
    "\2\42\1\56\1\13\1\41\1\151\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1"+
    "\13\1\36\2\121\1\156\1\120\4\1\4\13\1\42\1\121\1\157\1\152\7\13\1\152\3\13"+
    "\1\26\1\100\2\13\1\41\1\147\4\1\1\160\1\13\1\161\17\13\1\162\21\13\1\144\2"+
    "\13\1\144\1\163\1\13\1\41\3\13\1\164\1\165\1\166\1\133\1\165\1\167\1\1\1\170"+
    "\1\171\1\63\1\172\1\1\1\173\1\1\1\133\3\1\2\13\1\63\1\174\1\175\1\176\1\127"+
    "\1\177\1\1\2\13\1\147\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10"+
    "\13\1\200\1\152\2\13\1\136\3\13\1\201\1\171\1\13\1\202\4\203\2\13\2\1\1\171"+
    "\35\1\1\204\1\1\1\24\1\205\1\24\4\13\1\206\1\24\4\13\1\137\1\207\1\13\1\41"+
    "\1\24\4\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2"+
    "\1\10\13\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\210\7\13\1\16"+
    "\1\1\1\211\1\212\5\13\1\213\1\13\1\120\1\26\3\1\1\211\2\13\1\26\1\1\3\13\1"+
    "\152\4\13\1\57\1\121\1\13\1\214\2\13\1\41\2\13\1\152\1\13\1\133\4\13\1\215"+
    "\1\121\1\13\1\120\3\13\1\202\1\41\1\121\1\13\1\113\4\13\1\32\1\155\1\13\1"+
    "\216\1\217\1\220\1\203\2\13\1\137\1\57\7\13\1\221\1\121\72\13\1\152\1\13\1"+
    "\222\2\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\202\1\223\1\35\1\224\1\225"+
    "\6\13\1\16\1\1\1\226\25\13\1\41\1\1\4\13\1\212\2\13\1\26\2\1\1\42\1\13\1\1"+
    "\1\13\1\227\1\230\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\231\1\24\1\31\1\56"+
    "\4\13\1\120\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\41\2\1\7\13\1\31\4\1\3"+
    "\13\1\151\7\1\1\236\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13"+
    "\1\31\1\13\1\41\2\13\1\237\1\240\2\1\11\13\1\41\1\121\2\13\1\237\1\13\1\42"+
    "\2\13\1\26\3\13\1\152\11\1\23\13\1\202\1\13\1\57\1\26\11\1\1\241\2\13\1\242"+
    "\1\13\1\57\1\13\1\202\1\13\1\120\4\1\1\13\1\243\1\13\1\57\1\13\1\121\4\1\3"+
    "\13\1\244\4\1\1\245\1\246\1\13\1\247\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1"+
    "\13\1\202\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\147\3\1\3"+
    "\13\1\32\3\13\1\32\60\1\4\13\1\202\1\1\1\56\1\171\3\13\1\31\1\1\1\13\1\147"+
    "\1\121\3\13\1\134\1\1\2\13\1\250\4\13\1\251\1\252\2\1\1\13\1\22\1\13\1\253"+
    "\4\1\1\254\1\27\1\147\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\255\1\256"+
    "\1\151\10\1\4\13\1\31\1\121\2\1\4\13\1\257\1\121\12\1\3\13\1\260\1\63\1\261"+
    "\2\1\4\13\1\262\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4"+
    "\13\1\121\1\171\34\1\3\13\1\147\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\212\1"+
    "\13\1\212\1\132\1\202\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\152\53\1"+
    "\2\13\1\120\75\1\44\13\1\202\33\1\43\13\1\147\1\13\1\120\1\121\6\1\1\13\1"+
    "\41\1\151\3\13\1\202\1\152\1\121\1\226\1\263\1\13\67\1\4\13\1\151\2\13\1\120"+
    "\1\171\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1"+
    "\31\1\133\1\147\1\264\114\1\1\265\1\266\1\267\1\1\1\270\11\1\1\271\33\1\5"+
    "\13\1\134\3\13\1\150\1\272\1\273\1\274\3\13\1\275\1\276\1\13\1\277\1\300\1"+
    "\77\24\13\1\260\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13"+
    "\1\120\1\13\1\35\1\13\1\35\1\13\1\301\3\13\40\1\3\13\1\222\2\13\1\133\1\302"+
    "\1\303\1\157\1\24\25\1\1\14\1\213\1\304\75\1\14\13\1\151\1\202\2\1\4\13\1"+
    "\31\1\121\112\1\1\274\1\13\1\305\1\306\1\307\1\310\1\311\1\312\1\313\1\42"+
    "\1\314\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\202\2\1\103"+
    "\13\1\151\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3280 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\2\1\4\22\0\1\56\1\30\1\22\2\16\1\0\1\13\1\14\1\17\1\20\1\6"+
    "\1\24\1\15\1\25\1\21\1\5\12\23\1\7\1\0\1\31\1\27\1\31\1\0\1\16\1\63\1\66\1"+
    "\12\1\65\1\61\1\12\1\64\1\12\1\73\3\12\1\60\1\72\3\12\1\71\1\62\1\12\1\67"+
    "\1\12\1\70\3\12\4\0\1\53\1\0\1\34\1\46\1\44\1\47\1\35\1\74\1\50\1\57\1\37"+
    "\1\12\1\54\1\36\1\41\1\43\1\52\1\45\1\12\1\40\1\32\1\33\1\55\1\42\1\12\1\51"+
    "\2\12\1\10\1\26\1\11\7\0\1\2\12\0\1\1\11\0\1\12\12\0\1\12\4\0\1\12\5\0\27"+
    "\12\1\0\12\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12\2\0"+
    "\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\23\12\1\0\11\12\1\0"+
    "\26\12\2\0\1\12\6\0\10\12\10\0\16\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\1\12\10"+
    "\0\13\12\5\0\3\12\15\0\12\12\4\0\6\12\1\0\10\12\2\0\12\12\1\0\23\12\2\0\14"+
    "\12\2\0\11\12\4\0\1\12\5\0\16\12\2\0\14\12\4\0\5\12\1\0\10\12\6\0\20\12\2"+
    "\0\13\12\2\0\16\12\1\0\1\12\3\0\4\12\2\0\11\12\2\0\2\12\2\0\4\12\10\0\1\12"+
    "\4\0\2\12\1\0\1\12\1\0\3\12\1\0\6\12\4\0\2\12\1\0\2\12\1\0\2\12\1\0\2\12\2"+
    "\0\1\12\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12\7\0\4\12\1\0\1\12\7\0\20\12\13"+
    "\0\3\12\1\0\11\12\1\0\2\12\1\0\2\12\1\0\5\12\2\0\12\12\1\0\3\12\1\0\3\12\2"+
    "\0\1\12\30\0\1\12\7\0\3\12\1\0\10\12\2\0\6\12\2\0\2\12\2\0\3\12\10\0\2\12"+
    "\4\0\2\12\1\0\1\12\1\0\1\12\20\0\2\12\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3\0\5\12\3\0\3\12\1\0\4\12\2\0\1\12\6"+
    "\0\1\12\10\0\4\12\1\0\10\12\1\0\3\12\1\0\30\12\3\0\10\12\1\0\3\12\1\0\4\12"+
    "\7\0\2\12\1\0\3\12\5\0\4\12\1\0\5\12\2\0\4\12\5\0\2\12\7\0\1\12\2\0\2\12\16"+
    "\0\3\12\1\0\10\12\1\0\7\12\1\0\3\12\1\0\5\12\5\0\4\12\7\0\1\12\12\0\6\12\2"+
    "\0\2\12\1\0\22\12\3\0\10\12\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\12\4\0\6\12"+
    "\1\0\1\12\1\0\10\12\2\0\2\12\14\0\17\12\1\0\12\12\7\0\2\12\1\0\1\12\2\0\2"+
    "\12\1\0\1\12\2\0\1\12\6\0\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12"+
    "\1\0\15\12\1\0\3\12\2\0\5\12\1\0\1\12\1\0\6\12\2\0\12\12\2\0\4\12\10\0\2\12"+
    "\13\0\1\12\1\0\1\12\1\0\1\12\4\0\12\12\1\0\24\12\3\0\5\12\1\0\12\12\6\0\1"+
    "\12\11\0\6\12\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0\7\12\1\0"+
    "\1\12\1\0\4\12\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16\12\2\0"+
    "\6\12\2\0\1\1\32\12\3\0\13\12\7\0\15\12\1\0\7\12\13\0\4\12\14\0\1\12\1\0\2"+
    "\12\14\0\4\12\3\0\1\12\4\0\2\12\15\0\3\12\11\0\1\12\23\0\10\12\1\0\23\12\1"+
    "\0\2\12\6\0\6\12\5\0\15\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\6\12\1\0\7\12\1"+
    "\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\13\1\15\0\2\2\5\0\1\1\17\0"+
    "\1\12\4\0\1\12\12\0\1\1\1\0\1\12\15\0\1\12\2\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12\1\0\1\12\5\0\5\12\4\0\1"+
    "\12\1\0\5\12\6\0\15\12\7\0\10\12\11\0\7\12\1\0\7\12\1\0\1\1\4\0\3\12\11\0"+
    "\5\12\2\0\5\12\3\0\7\12\2\0\2\12\2\0\3\12\5\0\16\12\1\0\12\12\1\0\1\12\7\0"+
    "\11\12\2\0\27\12\2\0\15\12\3\0\1\12\1\0\1\12\2\0\1\12\16\0\1\12\2\0\5\12\12"+
    "\0\6\12\2\0\6\12\2\0\6\12\11\0\13\12\1\0\2\12\2\0\7\12\4\0\5\12\3\0\5\12\5"+
    "\0\12\12\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\12\12\3\0\15\12\3\0\2\12"+
    "\30\0\16\12\4\0\1\12\2\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\14\12\1\0\16"+
    "\12\1\0\2\12\1\0\1\12\15\0\1\12\2\0\4\12\4\0\10\12\1\0\5\12\12\0\6\12\2\0"+
    "\1\12\1\0\14\12\1\0\2\12\3\0\1\12\2\0\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1"+
    "\0\2\12\5\0\10\12\1\0\3\12\1\0\13\12\4\0\3\12\4\0\5\12\2\0\1\12\11\0\5\12"+
    "\5\0\3\12\3\0\13\12\1\0\1\12\3\0\10\12\6\0\1\12\1\0\7\12\1\0\1\12\1\0\4\12"+
    "\1\0\2\12\6\0\1\12\5\0\7\12\2\0\7\12\3\0\6\12\1\0\1\12\10\0\6\12\2\0\10\12"+
    "\10\0\6\12\2\0\1\12\3\0\1\12\13\0\10\12\5\0\15\12\3\0\2\12\6\0\5\12\3\0\6"+
    "\12\10\0\10\12\2\0\7\12\16\0\4\12\4\0\3\12\15\0\1\12\2\0\2\12\2\0\4\12\1\0"+
    "\14\12\1\0\1\12\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12\1\0\14\12\1"+
    "\0\4\12\1\0\5\12\1\0\1\12\3\0\11\12\1\0\10\12\2\0\2\12\5\0\1\12\16\0\1\12"+
    "\13\0\2\12\1\0\2\12\1\0\5\12\6\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12\1\0\4\12"+
    "\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1\12\1\0\3\12\1\0\2\12\1"+
    "\0\1\12\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0\1\12\2\0"+
    "\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12\1\0\12\12\1\0\5\12\1\0\3\12\1\0"+
    "\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\1\1\1\3\1\4\1\5\7\1"+
    "\1\6\1\7\1\10\2\1\1\11\1\12\4\1\1\13"+
    "\13\1\2\14\1\1\1\15\1\16\1\1\1\17\2\1"+
    "\1\20\1\1\1\21\1\22\1\23\1\24\1\25\2\26"+
    "\1\27\1\0\11\1\3\0\1\30\6\0\1\31\11\0"+
    "\1\20\1\0\2\27\1\0\12\1\1\10\3\0\1\32"+
    "\1\33\14\0\1\17\1\0\7\1\1\34\2\1\2\0"+
    "\1\30\2\0\1\35\1\0\1\36\11\0\1\37\1\1"+
    "\1\40\1\41\1\42\1\43\1\44\2\1\1\45\13\0"+
    "\1\46\2\0\1\47\1\1\1\50\1\30\1\51\13\0"+
    "\1\52\2\0\1\53\4\0\1\52\1\0\1\54\1\55"+
    "\3\0\1\56\10\0\1\57\2\0\1\60\1\61\3\0"+
    "\1\62\3\0\1\63\2\0\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u02dc"+
    "\0\u02dc\0\u02dc\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05b8\0\u05f5\0\u02dc\0\u02dc"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u02dc\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988"+
    "\0\u0356\0\u02dc\0\u09c5\0\u02dc\0\u02dc\0\u0a02\0\u0a3f\0\u0a7c"+
    "\0\u0ab9\0\u0ab9\0\u0af6\0\u0b33\0\u02dc\0\u0b70\0\u0bad\0\u02dc"+
    "\0\u02dc\0\u0356\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b"+
    "\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0632\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u0632"+
    "\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u02dc\0\u12d3\0\u02dc\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af"+
    "\0\u0e89\0\u15ec\0\u1629\0\u1666\0\u0f40\0\u02dc\0\u16a3\0\u16e0"+
    "\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u02dc\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73"+
    "\0\u1ab0\0\u1aed\0\u1b2a\0\u0393\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u0632\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u0393"+
    "\0\u1fb1\0\u0393\0\u0393\0\u0393\0\u0393\0\u0393\0\u1fee\0\u202b"+
    "\0\u1be1\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6"+
    "\0\u2213\0\u2250\0\u228d\0\u22ca\0\u0632\0\u2307\0\u2344\0\u0393"+
    "\0\u2381\0\u0393\0\u02dc\0\u0632\0\u23be\0\u23fb\0\u2438\0\u2475"+
    "\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u0393"+
    "\0\u265d\0\u269a\0\u02dc\0\u26d7\0\u2714\0\u2751\0\u278e\0\u0632"+
    "\0\u27cb\0\u0632\0\u0632\0\u2808\0\u2845\0\u2882\0\u0632\0\u28bf"+
    "\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u0632"+
    "\0\u2aa7\0\u2ae4\0\u02dc\0\u0632\0\u2b21\0\u2b5e\0\u2b9b\0\u02dc"+
    "\0\u2bd8\0\u2c15\0\u2c52\0\u02dc\0\u2c8f\0\u2ccc\0\u0632\0\u02dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\4\16\1\17\1\15\1\20\1\21\1\22\1\23"+
    "\10\15\1\23\6\15\1\24\1\25\1\26\1\27\10\23"+
    "\1\30\3\23\1\31\3\23\1\16\16\23\1\15\4\16"+
    "\1\17\1\15\1\20\1\21\1\22\1\32\10\15\1\32"+
    "\6\15\24\32\1\16\16\32\1\15\4\16\1\17\1\15"+
    "\1\20\1\21\1\22\1\33\10\15\1\33\6\15\24\33"+
    "\1\16\16\33\1\15\4\16\1\17\1\15\1\20\1\21"+
    "\1\22\1\34\1\35\1\36\6\15\1\34\6\15\24\34"+
    "\1\16\16\34\1\15\4\16\1\17\1\37\1\20\1\21"+
    "\1\22\1\34\1\35\1\36\1\40\5\15\1\34\6\15"+
    "\24\34\1\16\16\34\1\15\4\16\1\17\1\15\1\20"+
    "\1\21\1\22\1\41\3\15\1\42\1\43\2\15\1\44"+
    "\1\41\1\45\5\15\1\46\1\47\1\41\1\50\1\41"+
    "\1\51\4\41\1\52\1\53\1\54\1\41\1\55\5\41"+
    "\1\16\1\41\1\56\4\41\1\57\2\41\1\60\4\41"+
    "\1\15\4\16\1\61\1\62\1\20\1\21\1\22\1\15"+
    "\1\63\2\15\1\42\1\64\1\65\1\15\1\66\1\67"+
    "\2\62\1\70\2\71\1\72\24\15\1\16\17\15\4\16"+
    "\1\17\1\15\1\20\1\21\1\22\31\15\1\73\12\15"+
    "\1\16\17\15\4\16\1\17\1\15\1\20\1\21\1\22"+
    "\1\74\4\15\1\43\1\15\1\75\1\15\1\74\6\15"+
    "\24\74\1\16\16\74\1\15\4\16\1\17\1\15\1\20"+
    "\1\21\1\22\1\76\10\15\1\76\6\15\24\76\1\16"+
    "\16\76\1\15\4\16\1\17\1\15\1\20\1\21\1\22"+
    "\1\77\3\15\1\42\4\15\1\77\3\15\1\100\2\15"+
    "\24\77\1\16\16\77\1\101\4\16\1\102\1\101\1\20"+
    "\1\21\1\22\44\101\1\16\16\101\76\0\4\16\51\0"+
    "\1\16\23\0\1\103\1\104\100\0\1\23\10\0\1\23"+
    "\6\0\24\23\1\0\16\23\12\0\1\23\10\0\1\23"+
    "\6\0\1\23\1\105\10\23\1\106\11\23\1\0\16\23"+
    "\12\0\1\23\10\0\1\23\6\0\6\23\1\107\15\23"+
    "\1\0\16\23\12\0\1\23\10\0\1\23\6\0\4\23"+
    "\1\110\17\23\1\0\16\23\12\0\1\23\10\0\1\23"+
    "\6\0\10\23\1\111\1\112\5\23\1\113\4\23\1\0"+
    "\16\23\12\0\1\23\10\0\1\23\6\0\5\23\1\114"+
    "\16\23\1\0\16\23\12\0\1\23\10\0\1\23\6\0"+
    "\13\23\1\115\10\23\1\0\16\23\12\0\1\32\10\0"+
    "\1\32\6\0\24\32\1\0\16\32\12\0\1\33\10\0"+
    "\1\33\6\0\24\33\1\0\16\33\12\0\1\34\10\0"+
    "\1\34\6\0\24\34\1\0\16\34\2\116\3\0\70\116"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\24\117"+
    "\1\0\16\117\12\0\1\121\10\0\1\121\6\0\24\121"+
    "\1\0\16\121\2\122\3\0\70\122\22\123\1\0\52\123"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\12\117"+
    "\1\124\11\117\1\0\16\117\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\24\117\1\0\1\125\15\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\4\117\1\126"+
    "\12\117\1\127\4\117\1\0\16\117\12\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\24\117\1\0\15\117\1\130"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\2\117"+
    "\1\131\15\117\1\132\3\117\1\0\16\117\12\0\1\117"+
    "\6\0\1\120\1\0\1\117\6\0\6\117\1\133\15\117"+
    "\1\0\16\117\12\0\1\117\6\0\1\120\1\0\1\117"+
    "\6\0\5\117\1\134\16\117\1\0\16\117\12\0\1\117"+
    "\6\0\1\120\1\0\1\117\6\0\20\117\1\135\3\117"+
    "\1\0\16\117\12\0\1\117\6\0\1\120\1\0\1\117"+
    "\6\0\24\117\1\0\2\117\1\136\13\117\12\0\1\117"+
    "\6\0\1\120\1\0\1\117\6\0\24\117\1\0\2\117"+
    "\1\137\13\117\12\0\1\117\6\0\1\120\1\0\1\117"+
    "\6\0\24\117\1\0\4\117\1\140\11\117\13\0\1\62"+
    "\61\0\22\141\1\0\52\141\23\0\1\67\77\0\1\62"+
    "\75\0\1\142\117\0\1\143\34\0\1\74\10\0\1\74"+
    "\6\0\24\74\1\0\16\74\12\0\1\76\10\0\1\76"+
    "\6\0\24\76\1\0\16\76\12\0\1\77\10\0\1\77"+
    "\6\0\24\77\1\0\16\77\3\103\1\144\1\145\70\103"+
    "\6\104\1\146\66\104\12\0\1\23\10\0\1\23\6\0"+
    "\2\23\1\147\21\23\1\0\16\23\12\0\1\23\10\0"+
    "\1\23\6\0\6\23\1\150\15\23\1\0\16\23\12\0"+
    "\1\23\10\0\1\23\6\0\2\23\1\151\21\23\1\0"+
    "\16\23\12\0\1\23\10\0\1\23\6\0\2\23\1\152"+
    "\2\23\1\153\16\23\1\0\16\23\12\0\1\23\10\0"+
    "\1\23\6\0\3\23\1\154\20\23\1\0\16\23\12\0"+
    "\1\23\10\0\1\23\6\0\1\23\1\155\22\23\1\0"+
    "\16\23\12\0\1\23\10\0\1\23\6\0\5\23\1\156"+
    "\16\23\1\0\16\23\12\0\1\23\10\0\1\23\6\0"+
    "\11\23\1\157\12\23\1\0\16\23\12\0\1\23\10\0"+
    "\1\23\6\0\1\23\1\160\22\23\1\0\16\23\2\116"+
    "\3\0\7\116\1\161\60\116\12\0\1\162\10\0\1\162"+
    "\6\0\24\162\1\0\16\162\12\0\1\121\4\0\1\163"+
    "\1\0\1\164\1\0\1\121\6\0\24\121\1\0\16\121"+
    "\2\122\3\0\13\122\1\165\54\122\22\123\1\166\52\123"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\6\117"+
    "\1\167\15\117\1\0\16\117\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\6\117\1\170\15\117\1\0\16\117"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\1\171"+
    "\23\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\3\117\1\172\20\117\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\4\117\1\173"+
    "\17\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\11\117\1\174\12\117\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\20\117\1\175"+
    "\3\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\11\117\1\176\12\117\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\1\117\1\177"+
    "\22\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\24\117\1\0\3\117\1\200\12\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\24\117\1\0"+
    "\7\117\1\201\6\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\24\117\1\0\12\117\1\202\3\117\22\141"+
    "\1\203\52\141\53\0\1\204\24\0\1\144\71\0\5\104"+
    "\1\144\1\146\66\104\12\0\1\23\10\0\1\23\6\0"+
    "\1\23\1\205\22\23\1\0\16\23\12\0\1\23\10\0"+
    "\1\23\6\0\5\23\1\206\16\23\1\0\16\23\12\0"+
    "\1\23\10\0\1\23\6\0\12\23\1\207\11\23\1\0"+
    "\16\23\12\0\1\23\10\0\1\23\6\0\6\23\1\210"+
    "\15\23\1\0\16\23\12\0\1\23\10\0\1\23\6\0"+
    "\2\23\1\211\21\23\1\0\16\23\12\0\1\23\10\0"+
    "\1\23\6\0\11\23\1\212\12\23\1\0\16\23\12\0"+
    "\1\23\10\0\1\23\6\0\3\23\1\213\20\23\1\0"+
    "\16\23\12\0\1\23\10\0\1\23\6\0\1\23\1\214"+
    "\22\23\1\0\16\23\12\0\1\23\10\0\1\23\6\0"+
    "\15\23\1\215\6\23\1\0\16\23\12\0\1\23\10\0"+
    "\1\23\6\0\5\23\1\216\16\23\1\0\16\23\12\0"+
    "\1\162\4\0\1\217\3\0\1\162\6\0\24\162\1\0"+
    "\16\162\16\0\1\220\70\0\1\221\10\0\1\221\6\0"+
    "\24\221\1\0\16\221\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\5\117\1\222\16\117\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\3\117\1\223"+
    "\20\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\3\117\1\224\20\117\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\12\117\1\225"+
    "\11\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\4\117\1\226\17\117\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\1\227\14\117"+
    "\1\230\6\117\1\0\16\117\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\12\117\1\231\11\117\1\0\16\117"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\15\117"+
    "\1\232\6\117\1\0\16\117\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\20\117\1\233\3\117\1\0\16\117"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\24\117"+
    "\1\0\3\117\1\234\12\117\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\24\117\1\0\10\117\1\235\5\117"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\24\117"+
    "\1\0\13\117\1\236\2\117\36\0\1\237\50\0\1\23"+
    "\10\0\1\23\6\0\3\23\1\240\20\23\1\0\16\23"+
    "\12\0\1\23\10\0\1\23\6\0\13\23\1\241\10\23"+
    "\1\0\16\23\12\0\1\23\10\0\1\23\6\0\3\23"+
    "\1\242\20\23\1\0\16\23\12\0\1\23\10\0\1\23"+
    "\6\0\7\23\1\243\14\23\1\0\16\23\12\0\1\23"+
    "\10\0\1\23\6\0\1\244\23\23\1\0\16\23\12\0"+
    "\1\23\10\0\1\23\6\0\1\23\1\245\22\23\1\0"+
    "\16\23\12\0\1\23\10\0\1\23\6\0\6\23\1\246"+
    "\15\23\1\0\16\23\12\0\1\23\10\0\1\23\6\0"+
    "\5\23\1\247\16\23\1\0\16\23\12\0\1\23\10\0"+
    "\1\23\6\0\20\23\1\250\3\23\1\0\16\23\2\217"+
    "\3\0\13\217\1\251\54\217\12\0\1\252\10\0\1\252"+
    "\6\0\24\252\1\0\16\252\12\0\1\221\6\0\1\164"+
    "\1\0\1\221\6\0\24\221\1\0\16\221\12\0\1\117"+
    "\6\0\1\120\1\0\1\117\6\0\13\117\1\253\10\117"+
    "\1\0\16\117\12\0\1\117\6\0\1\120\1\0\1\117"+
    "\6\0\2\117\1\254\21\117\1\0\16\117\12\0\1\117"+
    "\6\0\1\120\1\0\1\117\6\0\24\117\1\255\16\117"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\21\117"+
    "\1\256\2\117\1\0\16\117\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\23\117\1\257\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\5\117\1\260"+
    "\16\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\3\117\1\261\20\117\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\5\117\1\262"+
    "\16\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\24\117\1\263\16\117\12\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\24\117\1\0\4\117\1\264"+
    "\11\117\12\0\1\117\6\0\1\120\1\0\1\117\6\0"+
    "\24\117\1\0\5\117\1\265\10\117\12\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\24\117\1\0\14\117\1\266"+
    "\1\117\52\0\1\267\34\0\1\23\10\0\1\23\6\0"+
    "\1\23\1\270\22\23\1\0\16\23\12\0\1\23\10\0"+
    "\1\23\6\0\11\23\1\271\12\23\1\0\16\23\12\0"+
    "\1\23\10\0\1\23\6\0\11\23\1\272\12\23\1\0"+
    "\16\23\12\0\1\252\5\0\1\273\2\0\1\252\6\0"+
    "\24\252\1\0\16\252\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\1\117\1\274\22\117\1\0\16\117\12\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\15\117\1\275"+
    "\6\117\1\0\16\117\37\0\1\276\47\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\3\117\1\277\20\117\1\0"+
    "\16\117\12\0\1\117\6\0\1\120\1\0\1\117\6\0"+
    "\7\117\1\300\14\117\1\0\16\117\12\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\1\117\1\301\22\117\1\0"+
    "\16\117\12\0\1\117\6\0\1\120\1\0\1\117\6\0"+
    "\1\302\23\117\1\0\16\117\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\11\117\1\303\12\117\1\0\16\117"+
    "\32\0\1\304\54\0\1\117\6\0\1\120\1\0\1\117"+
    "\6\0\24\117\1\0\5\117\1\305\10\117\12\0\1\117"+
    "\6\0\1\120\1\0\1\117\6\0\24\117\1\0\13\117"+
    "\1\306\2\117\52\0\1\307\34\0\1\23\10\0\1\23"+
    "\6\0\16\23\1\310\5\23\1\0\16\23\12\0\1\117"+
    "\6\0\1\120\1\0\1\117\6\0\21\117\1\311\2\117"+
    "\1\312\16\117\74\0\1\313\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\11\117\1\314\12\117\1\0\16\117"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\3\117"+
    "\1\315\20\117\1\0\16\117\12\0\1\117\6\0\1\120"+
    "\1\0\1\117\6\0\5\117\1\316\16\117\1\0\16\117"+
    "\12\0\1\117\6\0\1\120\1\0\1\117\6\0\1\317"+
    "\23\117\1\0\16\117\12\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\16\117\1\320\5\117\1\0\16\117\33\0"+
    "\1\321\53\0\1\117\6\0\1\120\1\0\1\117\6\0"+
    "\24\117\1\0\2\117\1\322\13\117\12\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\24\117\1\0\5\117\1\323"+
    "\10\117\54\0\1\324\32\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\3\117\1\325\20\117\1\0\16\117\32\0"+
    "\1\326\54\0\1\117\6\0\1\120\1\0\1\117\6\0"+
    "\15\117\1\327\6\117\1\0\16\117\12\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\21\117\1\330\2\117\1\0"+
    "\16\117\12\0\1\117\6\0\1\120\1\0\1\117\6\0"+
    "\20\117\1\331\3\117\1\0\16\117\12\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\24\117\1\332\16\117\34\0"+
    "\1\333\115\0\1\334\31\0\1\117\6\0\1\120\1\0"+
    "\1\117\6\0\11\117\1\335\12\117\1\0\16\117\33\0"+
    "\1\336\53\0\1\117\6\0\1\120\1\0\1\117\6\0"+
    "\3\117\1\337\20\117\1\0\16\117\12\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\11\117\1\340\12\117\1\0"+
    "\16\117\32\0\1\341\75\0\1\342\106\0\1\343\41\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\15\117\1\344"+
    "\6\117\1\0\16\117\34\0\1\345\52\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\10\117\1\346\13\117\1\0"+
    "\16\117\33\0\1\347\76\0\1\350\72\0\1\351\53\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\3\117\1\352"+
    "\20\117\1\0\16\117\34\0\1\353\75\0\1\354\51\0"+
    "\1\117\6\0\1\120\1\0\1\117\6\0\11\117\1\355"+
    "\12\117\1\0\16\117\33\0\1\356\53\0\1\117\6\0"+
    "\1\120\1\0\1\117\6\0\1\117\1\357\22\117\1\0"+
    "\16\117\35\0\1\360\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11529];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\2\1\3\11\14\1\2\11\4\1\1\11"+
    "\14\1\1\11\1\1\2\11\7\1\1\11\2\1\2\11"+
    "\2\1\1\0\11\1\3\0\1\1\6\0\1\1\11\0"+
    "\1\11\1\0\1\11\1\1\1\0\13\1\3\0\1\1"+
    "\1\11\14\0\1\11\1\0\12\1\2\0\1\1\2\0"+
    "\1\1\1\0\1\1\11\0\12\1\13\0\1\1\2\0"+
    "\3\1\1\11\1\1\13\0\1\1\2\0\1\11\4\0"+
    "\1\1\1\0\2\1\3\0\1\1\10\0\1\1\2\0"+
    "\1\11\1\1\3\0\1\11\3\0\1\11\2\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Vrai si le lexer se trouve dans un bloc if, else if, else ou condition
    boolean conditionBlock = false;
    // Vrao si le script que le lexer vient de lire se trouve à la racine du fichier
    boolean rootScript = false;

    // Nombre de début de bloc trouvé dans un code Javascript
    int nbBlockBegin = 0;
    // Nombre de fin de bloc trouvé dans un code Javascript
    int nbBlockEnd = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 54: break;
          case 2: 
            { if(yystate() == STATES_CALLS) { yybegin(INSTRUCTIONS); } return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 55: break;
          case 3: 
            { return SmlTypes.SEPARATOR;
            } 
            // fall through
          case 56: break;
          case 4: 
            { if(yystate() == JAVASCRIPT_CODE) {
          nbBlockBegin++;
          return SmlTypes.JAVASCRIPT_CODE;
        } else if(yystate() == EVENTS_DEFINITIONS) {
          yybegin(INSTRUCTIONS);
        }
        return SmlTypes.BEGIN_BLOCK;
            } 
            // fall through
          case 57: break;
          case 5: 
            { if(yystate() == JAVASCRIPT_CODE && nbBlockBegin > nbBlockEnd && nbBlockBegin != 0) {
          nbBlockEnd++;
          return SmlTypes.JAVASCRIPT_CODE;
        } else if(yystate() == BINDINGS) {
          yybegin(JAVASCRIPT_CODE);
        } else if(conditionBlock) {
          conditionBlock = false;
          yybegin(INSTRUCTIONS);
        } else if(yystate() == INSTRUCTIONS || yystate() == OPTIONS || yystate() == EVENTS_NAMES) {
          yybegin(YYINITIAL);
        } else if(yystate() == JAVASCRIPT_CODE) {
          yybegin(rootScript ? YYINITIAL : INSTRUCTIONS);
        }
        return SmlTypes.END_BLOCK;
            } 
            // fall through
          case 58: break;
          case 6: 
            { yybegin(YYINITIAL); return SmlTypes.STATE_NAME;
            } 
            // fall through
          case 59: break;
          case 7: 
            { yybegin(EVENTS_NAMES); return SmlTypes.ALIAS_NAME;
            } 
            // fall through
          case 60: break;
          case 8: 
            { return SmlTypes.EVENT_NAME;
            } 
            // fall through
          case 61: break;
          case 9: 
            { return SmlTypes.ALL_EVENTS;
            } 
            // fall through
          case 62: break;
          case 10: 
            { return SmlTypes.EVENT_NAME_SEPARATOR;
            } 
            // fall through
          case 63: break;
          case 11: 
            { return SmlTypes.TRACE_MESSAGE_SEPARATOR;
            } 
            // fall through
          case 64: break;
          case 12: 
            { return SmlTypes.OP_CONDS;
            } 
            // fall through
          case 65: break;
          case 13: 
            { return SmlTypes.BEGIN_PARENTHESE;
            } 
            // fall through
          case 66: break;
          case 14: 
            { yybegin(INSTRUCTIONS); return SmlTypes.END_PARENTHESE;
            } 
            // fall through
          case 67: break;
          case 15: 
            { return SmlTypes.CONST_CONDS;
            } 
            // fall through
          case 68: break;
          case 16: 
            { return SmlTypes.COMP_CONDS;
            } 
            // fall through
          case 69: break;
          case 17: 
            { return SmlTypes.STATE_NAME;
            } 
            // fall through
          case 70: break;
          case 18: 
            { return SmlTypes.STATE_NAME_SEPARATOR;
            } 
            // fall through
          case 71: break;
          case 19: 
            { yybegin(INSTRUCTIONS); return SmlTypes.THREAD_NAME;
            } 
            // fall through
          case 72: break;
          case 20: 
            { return SmlTypes.BIND_NAME;
            } 
            // fall through
          case 73: break;
          case 21: 
            { return SmlTypes.BINDS_SEPARATOR;
            } 
            // fall through
          case 74: break;
          case 22: 
            { return SmlTypes.JAVASCRIPT_CODE;
            } 
            // fall through
          case 75: break;
          case 23: 
            { return SmlTypes.COMMENT;
            } 
            // fall through
          case 76: break;
          case 24: 
            { return SmlTypes.SML_VARS;
            } 
            // fall through
          case 77: break;
          case 25: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.IF;
            } 
            // fall through
          case 78: break;
          case 26: 
            { return SmlTypes.IDENTIFICATION_KEY;
            } 
            // fall through
          case 79: break;
          case 27: 
            { return SmlTypes.TRACE_MESSAGE_STRING;
            } 
            // fall through
          case 80: break;
          case 28: 
            { yybegin(INSTRUCTIONS); return SmlTypes.EXIT;
            } 
            // fall through
          case 81: break;
          case 29: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.ELSE;
            } 
            // fall through
          case 82: break;
          case 30: 
            { return SmlTypes.CALL;
            } 
            // fall through
          case 83: break;
          case 31: 
            { yybegin(STATES_NAMES); return SmlTypes.STATE;
            } 
            // fall through
          case 84: break;
          case 32: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.TRACE;
            } 
            // fall through
          case 85: break;
          case 33: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.ALARM;
            } 
            // fall through
          case 86: break;
          case 34: 
            { yybegin(ALIAS_NAMES); return SmlTypes.ALIAS;
            } 
            // fall through
          case 87: break;
          case 35: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.EVENT;
            } 
            // fall through
          case 88: break;
          case 36: 
            { yybegin(INSTRUCTIONS); return SmlTypes.ENTER;
            } 
            // fall through
          case 89: break;
          case 37: 
            { return SmlTypes.JAVA_FUNCTION_CALL;
            } 
            // fall through
          case 90: break;
          case 38: 
            { return SmlTypes.DEBUG;
            } 
            // fall through
          case 91: break;
          case 39: 
            { rootScript = true; return SmlTypes.SCRIPT;
            } 
            // fall through
          case 92: break;
          case 40: 
            { yybegin(OPTIONS); return SmlTypes.OPTION;
            } 
            // fall through
          case 93: break;
          case 41: 
            { rootScript = false; return SmlTypes.SCRIPT;
            } 
            // fall through
          case 94: break;
          case 42: 
            { yybegin(BINDINGS); return SmlTypes.BINDING;
            } 
            // fall through
          case 95: break;
          case 43: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.ELSE_IF;
            } 
            // fall through
          case 96: break;
          case 44: 
            { return SmlTypes.MESSAGE;
            } 
            // fall through
          case 97: break;
          case 45: 
            { return SmlTypes.WARNING;
            } 
            // fall through
          case 98: break;
          case 46: 
            { return SmlTypes.EXEC_END;
            } 
            // fall through
          case 99: break;
          case 47: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.CONDITION;
            } 
            // fall through
          case 100: break;
          case 48: 
            { return SmlTypes.OPTIONS;
            } 
            // fall through
          case 101: break;
          case 49: 
            { return SmlTypes.THREAD_END;
            } 
            // fall through
          case 102: break;
          case 50: 
            { yybegin(STATES_CALLS); return SmlTypes.GOTO_STATE;
            } 
            // fall through
          case 103: break;
          case 51: 
            { yybegin(THREADS_NAMES); return SmlTypes.THREAD_STATE;
            } 
            // fall through
          case 104: break;
          case 52: 
            { return SmlTypes.CONSUME_EVENT;
            } 
            // fall through
          case 105: break;
          case 53: 
            { yybegin(STATES_CALLS); return SmlTypes.PROCESS_STATE;
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
