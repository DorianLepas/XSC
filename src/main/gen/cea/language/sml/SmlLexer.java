/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package cea.language.sml;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import cea.language.sml.psi.SmlTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>SmlLexerDefinition.flex</tt>
 */
public class SmlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STATES_NAMES = 2;
  public static final int ALIAS_NAMES = 4;
  public static final int EVENTS_NAMES = 6;
  public static final int EVENTS_DEFINITIONS = 8;
  public static final int INSTRUCTIONS = 10;
  public static final int CONDITIONS = 12;
  public static final int OPTIONS = 14;
  public static final int STATES_CALLS = 16;
  public static final int THREADS_NAMES = 18;
  public static final int BINDINGS = 20;
  public static final int JAVASCRIPT_CODE = 22;
  public static final int CALL = 24;
  public static final int SET = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15776 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\151\1\31\4\13\1\152\1\153\1\154\1\155\1\13\1\155\1\13\1\156"+
    "\1\154\1\157\5\13\1\160\1\123\1\1\1\161\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\155\2\13\1\43\1\13\1\162\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\163\1\122\4\1\4\13\1\43\1\123\1\164\1"+
    "\156\3\13\1\40\3\13\1\156\3\13\1\26\1\165\1\40\1\13\1\42\1\153\4\1\1\166\1"+
    "\13\1\167\17\13\1\170\21\13\1\147\2\13\1\147\1\171\1\13\1\42\3\13\1\172\1"+
    "\173\1\174\1\135\1\173\1\175\1\1\1\176\1\177\1\64\1\200\1\1\1\201\1\1\1\135"+
    "\3\1\2\13\1\64\1\202\1\203\1\204\1\205\1\206\1\1\2\13\1\153\62\1\1\207\2\13"+
    "\1\162\161\1\2\13\1\122\2\13\1\122\10\13\1\210\1\156\2\13\1\141\3\13\1\211"+
    "\1\177\1\13\1\212\4\213\2\13\2\1\1\177\35\1\1\214\1\1\1\24\1\215\1\24\4\13"+
    "\1\216\1\24\4\13\1\142\1\217\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1"+
    "\13\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1"+
    "\135\1\13\1\220\1\1\3\13\1\221\7\13\1\16\1\1\1\222\1\223\5\13\1\224\1\13\1"+
    "\122\1\26\3\1\1\222\2\13\1\26\1\1\3\13\1\156\4\13\1\60\1\123\1\13\1\225\1"+
    "\40\1\13\1\42\2\13\1\156\1\13\1\135\4\13\1\226\1\123\1\13\1\227\3\13\1\212"+
    "\1\42\1\123\1\13\1\115\4\13\1\32\1\161\1\13\1\230\1\231\1\232\1\213\2\13\1"+
    "\142\1\60\7\13\1\233\1\123\72\13\1\156\1\13\1\234\2\13\1\43\20\1\26\13\1\42"+
    "\6\13\1\162\2\1\1\212\1\235\1\35\1\236\1\237\6\13\1\16\1\1\1\240\25\13\1\42"+
    "\1\1\4\13\1\223\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\241\1\242\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\243\1\24\1\31\1\207\4\13\1\122\1\244\1\245\2\1\1\246"+
    "\1\13\1\14\1\247\2\42\2\1\7\13\1\31\4\1\3\13\1\155\7\1\1\250\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\251\1\252\2\1"+
    "\11\13\1\42\1\123\2\13\1\251\1\13\1\43\2\13\1\26\3\13\1\156\11\1\23\13\1\212"+
    "\1\13\1\60\1\26\11\1\1\253\2\13\1\254\1\13\1\60\1\13\1\212\1\13\1\122\4\1"+
    "\1\13\1\255\1\13\1\60\1\13\1\162\4\1\3\13\1\256\4\1\1\257\1\260\1\13\1\261"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\212\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\153\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\212"+
    "\1\1\1\57\1\177\3\13\1\31\1\1\1\13\1\153\1\123\3\13\1\262\1\1\2\13\1\263\4"+
    "\13\1\264\1\265\2\1\1\13\1\22\1\13\1\266\4\1\1\267\1\27\1\153\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\270\1\271\1\155\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\272\1\123\12\1\3\13\1\273\1\64\1\274\2\1\4\13\1\275\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\177\34\1\3\13\1\153"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\223\1\13\1\223\1\134\1\212\64\1\71\13"+
    "\1\162\6\1\6\13\1\122\1\1\14\13\1\156\53\1\2\13\1\122\75\1\44\13\1\212\33"+
    "\1\43\13\1\153\1\13\1\122\1\123\6\1\1\13\1\42\1\155\3\13\1\212\1\156\1\123"+
    "\1\240\1\276\1\13\67\1\4\13\1\155\2\13\1\122\1\177\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\153\1\277\114\1\1\300"+
    "\1\301\1\302\1\1\1\303\11\1\1\304\33\1\5\13\1\136\3\13\1\154\1\305\1\306\1"+
    "\307\3\13\1\310\1\311\1\13\1\312\1\313\1\101\24\13\1\273\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\314\3\315\40\1\3\13\1\234\2\13\1\135\1\316\1\317\1\164\1\24\25\1\1\14\1"+
    "\224\1\320\75\1\14\13\1\155\1\212\2\1\4\13\1\31\1\123\112\1\1\307\1\13\1\321"+
    "\1\322\1\323\1\324\1\325\1\326\1\327\1\43\1\330\1\43\47\1\1\13\1\162\1\13"+
    "\1\162\1\13\1\162\47\1\55\13\1\212\2\1\103\13\1\155\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3472 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\3\2\2\1\4\22\0\1\63\1\46\1\37\1\20\1\16\1\0\1\13\1\14\1\35\1\36"+
    "\1\6\1\42\1\15\1\43\1\33\1\5\12\41\1\7\1\0\1\47\1\45\1\47\1\0\1\34\1\67\1"+
    "\72\1\50\1\71\1\65\1\50\1\70\1\50\1\77\3\50\1\64\1\76\3\50\1\75\1\66\1\50"+
    "\1\73\1\50\1\74\3\50\4\0\1\17\1\0\1\25\1\56\1\31\1\26\1\24\1\100\1\57\1\22"+
    "\1\52\1\50\1\61\1\51\1\53\1\55\1\30\1\27\1\50\1\23\1\32\1\21\1\62\1\54\1\50"+
    "\1\60\2\50\1\10\1\44\1\11\7\0\1\2\12\0\1\1\11\0\1\12\12\0\1\12\4\0\1\12\5"+
    "\0\27\12\1\0\12\12\4\0\14\12\16\0\5\12\7\0\1\12\1\0\1\12\1\0\5\12\1\0\2\12"+
    "\2\0\4\12\1\0\1\12\6\0\1\12\1\0\3\12\1\0\1\12\1\0\4\12\1\0\23\12\1\0\11\12"+
    "\1\0\26\12\2\0\1\12\6\0\10\12\10\0\16\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\1"+
    "\12\10\0\13\12\5\0\3\12\15\0\12\40\4\0\6\12\1\0\10\12\2\0\12\12\1\0\6\12\12"+
    "\40\3\12\2\0\14\12\2\0\3\12\12\40\14\12\4\0\1\12\5\0\16\12\2\0\14\12\4\0\5"+
    "\12\1\0\10\12\6\0\20\12\2\0\12\40\1\12\2\0\16\12\1\0\1\12\3\0\4\12\2\0\11"+
    "\12\2\0\2\12\2\0\4\12\10\0\1\12\4\0\2\12\1\0\1\12\1\0\3\12\1\0\6\12\4\0\2"+
    "\12\1\0\2\12\1\0\2\12\1\0\2\12\2\0\1\12\1\0\5\12\4\0\2\12\2\0\3\12\3\0\1\12"+
    "\7\0\4\12\1\0\1\12\7\0\12\40\6\12\13\0\3\12\1\0\11\12\1\0\2\12\1\0\2\12\1"+
    "\0\5\12\2\0\12\12\1\0\3\12\1\0\3\12\2\0\1\12\30\0\1\12\7\0\3\12\1\0\10\12"+
    "\2\0\6\12\2\0\2\12\2\0\3\12\10\0\2\12\4\0\2\12\1\0\1\12\1\0\1\12\20\0\2\12"+
    "\1\0\6\12\3\0\3\12\1\0\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0\3\12\3"+
    "\0\14\12\4\0\5\12\3\0\3\12\1\0\4\12\2\0\1\12\6\0\1\12\10\0\4\12\1\0\10\12"+
    "\1\0\3\12\1\0\30\12\3\0\10\12\1\0\3\12\1\0\4\12\7\0\2\12\1\0\3\12\5\0\4\12"+
    "\1\0\5\12\2\0\4\12\5\0\2\12\7\0\1\12\2\0\2\12\16\0\3\12\1\0\10\12\1\0\7\12"+
    "\1\0\3\12\1\0\5\12\5\0\4\12\7\0\1\12\12\0\6\12\2\0\2\12\1\0\22\12\3\0\10\12"+
    "\1\0\11\12\1\0\1\12\2\0\7\12\3\0\1\12\4\0\6\12\1\0\1\12\1\0\10\12\2\0\2\12"+
    "\14\0\17\12\1\0\12\40\7\0\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0\4\12"+
    "\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0\2\12\1\0\15\12\1\0\3\12\2\0\5\12"+
    "\1\0\1\12\1\0\6\12\2\0\12\40\2\0\4\12\10\0\2\12\13\0\1\12\1\0\1\12\1\0\1\12"+
    "\4\0\12\12\1\0\24\12\3\0\5\12\1\0\12\12\6\0\1\12\11\0\12\40\4\12\2\0\6\12"+
    "\1\0\1\12\5\0\1\12\2\0\13\12\1\0\15\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12"+
    "\2\0\1\12\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\16\12\2\0\6\12\2\0\15\12"+
    "\2\0\1\12\1\1\32\12\3\0\13\12\7\0\15\12\1\0\7\12\13\0\4\12\14\0\1\12\1\0\2"+
    "\12\14\0\4\12\3\0\1\12\4\0\2\12\15\0\3\12\2\0\12\12\15\0\1\12\23\0\5\12\12"+
    "\40\3\0\6\12\1\0\23\12\1\0\2\12\6\0\6\12\5\0\15\12\1\0\1\12\1\0\1\12\1\0\1"+
    "\12\1\0\6\12\1\0\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0\6\12\4\0\13"+
    "\1\15\0\2\2\5\0\1\1\17\0\1\12\4\0\1\12\12\0\1\1\1\0\1\12\15\0\1\12\2\0\1\12"+
    "\4\0\1\12\2\0\12\12\1\0\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0\4\12"+
    "\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\7\0\17\12\6\0\15\12\7\0\10\12\11\0\7"+
    "\12\1\0\7\12\1\0\1\1\4\0\3\12\11\0\5\12\2\0\5\12\3\0\7\12\2\0\2\12\2\0\3\12"+
    "\5\0\13\12\12\40\2\12\4\0\3\12\1\0\12\12\1\0\1\12\7\0\11\12\2\0\27\12\2\0"+
    "\15\12\3\0\1\12\1\0\1\12\2\0\1\12\16\0\1\12\12\40\5\12\3\0\5\12\12\0\6\12"+
    "\2\0\6\12\2\0\6\12\11\0\13\12\1\0\2\12\2\0\7\12\4\0\5\12\3\0\5\12\5\0\12\12"+
    "\1\0\5\12\1\0\1\12\1\0\2\12\1\0\2\12\1\0\12\12\3\0\15\12\3\0\2\12\30\0\16"+
    "\12\4\0\1\12\2\0\6\12\2\0\6\12\2\0\6\12\2\0\3\12\3\0\14\12\1\0\16\12\1\0\2"+
    "\12\1\0\1\12\15\0\1\12\2\0\4\12\4\0\10\12\1\0\5\12\12\0\6\12\2\0\1\12\1\0"+
    "\14\12\1\0\2\12\3\0\1\12\2\0\4\12\1\0\2\12\12\0\10\12\6\0\6\12\1\0\2\12\5"+
    "\0\10\12\1\0\3\12\1\0\13\12\4\0\3\12\4\0\6\12\1\0\12\40\4\12\2\0\1\12\11\0"+
    "\5\12\5\0\3\12\3\0\12\40\1\12\1\0\1\12\3\0\10\12\6\0\1\12\1\0\7\12\1\0\1\12"+
    "\1\0\4\12\1\0\2\12\6\0\1\12\5\0\7\12\2\0\7\12\3\0\6\12\1\0\1\12\10\0\6\12"+
    "\2\0\10\12\10\0\6\12\2\0\1\12\3\0\1\12\13\0\10\12\5\0\15\12\3\0\2\12\6\0\5"+
    "\12\3\0\6\12\10\0\10\12\2\0\7\12\16\0\4\12\4\0\3\12\15\0\1\12\2\0\2\12\2\0"+
    "\4\12\1\0\14\12\1\0\1\12\1\0\7\12\1\0\21\12\1\0\4\12\2\0\10\12\1\0\7\12\1"+
    "\0\14\12\1\0\4\12\1\0\5\12\1\0\1\12\3\0\11\12\1\0\10\12\2\0\22\40\5\0\1\12"+
    "\16\0\1\12\13\0\2\12\1\0\2\12\1\0\5\12\6\0\2\12\1\0\1\12\2\0\1\12\1\0\12\12"+
    "\1\0\4\12\1\0\1\12\1\0\1\12\6\0\1\12\4\0\1\12\1\0\1\12\1\0\1\12\1\0\3\12\1"+
    "\0\2\12\1\0\1\12\2\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\1\12\1\0\2\12\1\0"+
    "\1\12\2\0\4\12\1\0\7\12\1\0\4\12\1\0\4\12\1\0\1\12\1\0\12\12\1\0\5\12\1\0"+
    "\3\12\1\0\5\12\1\0\5\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\1\1\1\3\1\4\1\5\7\1"+
    "\1\6\1\7\1\10\2\1\1\11\1\12\3\1\6\13"+
    "\2\1\1\14\6\13\2\15\2\1\1\16\1\17\1\20"+
    "\1\1\1\21\2\1\1\22\1\1\1\23\1\24\1\25"+
    "\1\26\1\27\2\30\1\1\1\16\2\31\1\32\1\33"+
    "\1\34\1\0\11\1\2\0\3\31\2\13\1\0\7\13"+
    "\2\0\1\35\5\13\1\0\1\16\1\0\1\16\1\0"+
    "\1\22\2\0\1\16\1\31\2\34\1\0\12\1\1\10"+
    "\2\0\2\31\12\13\1\36\1\37\5\13\2\16\1\21"+
    "\1\0\1\16\3\1\1\40\6\1\1\31\1\0\2\31"+
    "\1\13\1\41\2\13\1\42\2\13\1\43\6\13\1\0"+
    "\1\44\1\45\1\46\1\47\1\50\1\1\1\51\2\1"+
    "\1\0\2\31\1\13\1\0\6\13\1\0\1\13\1\52"+
    "\1\13\1\0\1\53\1\54\1\1\3\31\1\13\1\0"+
    "\4\13\1\55\1\13\1\0\2\13\1\0\1\56\1\57"+
    "\1\31\1\13\1\0\1\60\4\13\1\56\1\0\1\61"+
    "\1\62\1\0\1\63\1\13\1\0\1\64\1\0\2\13"+
    "\2\0\1\13\2\0\1\65\1\13\1\0\1\66\1\67"+
    "\2\0\1\13\1\70\2\0\1\13\1\71\1\0\1\13"+
    "\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u038e\0\u038e\0\u038e\0\u0451\0\u0492\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u069a\0\u06db"+
    "\0\u038e\0\u038e\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861"+
    "\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u038e\0\u09e7\0\u0a28"+
    "\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0410\0\u038e\0\u0b6d\0\u0bae"+
    "\0\u0bef\0\u038e\0\u038e\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0cf3"+
    "\0\u0d34\0\u0d75\0\u038e\0\u0db6\0\u0df7\0\u038e\0\u038e\0\u0410"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u038e\0\u038e\0\u0f3c\0\u0f7d"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u071c\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c"+
    "\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554"+
    "\0\u1595\0\u15d6\0\u0820\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b"+
    "\0\u0b6d\0\u175c\0\u179d\0\u038e\0\u17de\0\u038e\0\u181f\0\u0e38"+
    "\0\u1860\0\u18a1\0\u038e\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1207"+
    "\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u138d\0\u1d74"+
    "\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1595\0\u038e"+
    "\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u179d\0\u038e"+
    "\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u0451\0\u2206\0\u2247"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u0820\0\u2594\0\u25d5\0\u038e"+
    "\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u0451"+
    "\0\u0451\0\u0451\0\u0451\0\u0451\0\u27dd\0\u0451\0\u281e\0\u285f"+
    "\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67"+
    "\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u0820\0\u2bed\0\u2c2e"+
    "\0\u0451\0\u0451\0\u2c6f\0\u038e\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73"+
    "\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u0820\0\u2eb8\0\u2ef9\0\u2f3a"+
    "\0\u2f7b\0\u2fbc\0\u0451\0\u1248\0\u2ffd\0\u303e\0\u307f\0\u038e"+
    "\0\u30c0\0\u3101\0\u3142\0\u3183\0\u0820\0\u31c4\0\u0820\0\u0820"+
    "\0\u3205\0\u1248\0\u3246\0\u3287\0\u0820\0\u32c8\0\u3309\0\u334a"+
    "\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f\0\u0820\0\u34d0\0\u3511"+
    "\0\u038e\0\u0820\0\u3552\0\u3593\0\u35d4\0\u038e\0\u3615\0\u3656"+
    "\0\u3697\0\u038e\0\u36d8\0\u3719\0\u038e\0\u0820";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\4\20\1\21\1\17\1\22\1\23\1\24\1\25"+
    "\4\17\1\25\1\17\1\26\2\25\1\27\1\30\2\25"+
    "\1\31\1\25\1\32\5\17\2\25\6\17\6\25\1\33"+
    "\4\25\1\20\15\25\1\17\4\20\1\21\1\17\1\22"+
    "\1\23\1\24\1\34\4\17\1\34\1\17\12\34\5\17"+
    "\2\34\6\17\13\34\1\20\15\34\1\17\4\20\1\21"+
    "\1\17\1\22\1\23\1\24\1\35\4\17\1\35\1\17"+
    "\12\35\5\17\2\35\6\17\13\35\1\20\15\35\1\17"+
    "\4\20\1\21\1\17\1\22\1\23\1\24\1\36\1\37"+
    "\1\40\2\17\1\36\1\17\12\36\5\17\2\36\6\17"+
    "\13\36\1\20\15\36\1\17\4\20\1\21\1\41\1\22"+
    "\1\23\1\24\1\36\1\37\1\40\1\42\1\17\1\36"+
    "\1\17\12\36\5\17\2\36\6\17\13\36\1\20\15\36"+
    "\1\17\4\20\1\21\1\17\1\22\1\23\1\24\1\43"+
    "\3\17\1\44\1\43\1\45\1\46\2\47\1\50\2\47"+
    "\1\51\1\47\1\52\1\53\1\17\1\44\1\54\1\17"+
    "\1\55\2\43\1\56\5\17\2\47\1\57\3\47\1\60"+
    "\1\61\3\47\1\20\1\62\4\47\1\63\2\47\1\64"+
    "\4\47\1\17\4\20\1\65\1\66\1\22\1\23\1\24"+
    "\1\67\1\70\2\17\1\44\1\67\1\45\12\71\1\17"+
    "\1\44\1\72\1\73\1\74\2\75\2\66\1\76\2\77"+
    "\1\100\13\71\1\20\15\71\1\17\4\20\1\21\1\17"+
    "\1\22\1\23\1\24\43\17\1\101\5\17\1\20\16\17"+
    "\4\20\1\21\1\17\1\22\1\23\1\24\1\102\4\17"+
    "\1\102\1\17\12\102\1\103\1\17\1\54\2\17\2\102"+
    "\6\17\13\102\1\20\15\102\1\17\4\20\1\21\1\17"+
    "\1\22\1\23\1\24\1\104\4\17\1\104\1\17\12\104"+
    "\5\17\2\104\6\17\13\104\1\20\15\104\1\17\4\20"+
    "\1\21\1\17\1\22\1\23\1\24\1\105\3\17\1\44"+
    "\1\105\1\44\12\105\1\17\1\44\3\17\2\105\3\17"+
    "\1\106\2\17\13\105\1\20\15\105\1\107\4\20\1\110"+
    "\1\107\1\22\1\23\1\24\51\107\1\20\15\107\1\17"+
    "\4\20\1\21\1\17\1\22\1\23\1\24\1\111\4\17"+
    "\1\111\1\17\12\112\5\17\2\111\6\17\13\112\1\20"+
    "\15\112\1\17\4\20\1\21\1\17\1\22\1\23\1\24"+
    "\4\17\1\113\1\114\1\45\12\114\1\115\1\44\1\54"+
    "\3\17\1\114\3\17\1\116\2\17\13\114\1\20\15\114"+
    "\102\0\4\20\56\0\1\20\22\0\1\117\1\120\104\0"+
    "\1\25\4\0\1\25\1\0\12\25\5\0\2\25\6\0"+
    "\13\25\1\0\15\25\12\0\1\25\4\0\1\25\1\0"+
    "\2\25\1\121\7\25\5\0\2\25\6\0\13\25\1\0"+
    "\15\25\12\0\1\25\4\0\1\25\1\0\12\25\5\0"+
    "\2\25\6\0\4\25\1\122\1\123\2\25\1\124\2\25"+
    "\1\0\15\25\12\0\1\25\4\0\1\25\1\0\12\25"+
    "\5\0\2\25\6\0\1\25\1\125\11\25\1\0\15\25"+
    "\12\0\1\25\4\0\1\25\1\0\6\25\1\126\3\25"+
    "\5\0\2\25\6\0\13\25\1\0\15\25\12\0\1\25"+
    "\4\0\1\25\1\0\1\127\7\25\1\130\1\25\5\0"+
    "\2\25\6\0\13\25\1\0\15\25\12\0\1\25\4\0"+
    "\1\25\1\0\12\25\5\0\2\25\6\0\2\25\1\131"+
    "\10\25\1\0\15\25\12\0\1\34\4\0\1\34\1\0"+
    "\12\34\5\0\2\34\6\0\13\34\1\0\15\34\12\0"+
    "\1\35\4\0\1\35\1\0\12\35\5\0\2\35\6\0"+
    "\13\35\1\0\15\35\12\0\1\36\4\0\1\36\1\0"+
    "\12\36\5\0\2\36\6\0\13\36\1\0\15\36\2\132"+
    "\3\0\74\132\12\0\1\133\4\0\1\133\1\0\12\47"+
    "\5\0\2\133\6\0\13\47\1\0\15\47\12\0\1\134"+
    "\4\0\1\134\1\0\12\134\5\0\2\134\6\0\13\134"+
    "\1\0\15\134\12\0\1\134\4\0\1\134\1\0\1\135"+
    "\5\134\1\136\3\134\5\0\2\134\6\0\13\134\1\0"+
    "\15\134\12\0\1\47\4\0\1\47\1\0\1\47\1\137"+
    "\10\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\15\47\12\0\1\47\4\0\1\47\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\15\47\12\0\1\47\4\0\1\47\1\0\12\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\1\47\1\142\6\47"+
    "\1\143\2\47\1\0\15\47\12\0\1\47\4\0\1\47"+
    "\1\0\2\47\1\144\7\47\1\140\1\0\1\141\2\0"+
    "\2\47\6\0\13\47\1\0\15\47\12\0\1\47\4\0"+
    "\1\47\1\0\4\47\1\145\2\47\1\146\2\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\13\47\1\0\15\47"+
    "\12\0\1\47\4\0\1\47\1\0\3\47\1\147\4\47"+
    "\1\150\1\47\1\140\1\0\1\141\2\0\2\47\6\0"+
    "\13\47\1\0\15\47\2\151\3\0\74\151\37\152\1\0"+
    "\41\152\12\0\1\47\4\0\1\47\1\0\12\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\13\47\1\0\14\47"+
    "\1\153\12\0\1\47\4\0\1\47\1\0\12\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\2\47\1\154\10\47"+
    "\1\0\15\47\12\0\1\47\4\0\1\47\1\0\7\47"+
    "\1\155\2\47\1\140\1\0\1\141\2\0\2\47\6\0"+
    "\13\47\1\0\15\47\12\0\1\47\4\0\1\47\1\0"+
    "\12\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\1\47\1\156\13\47\12\0\1\47\4\0\1\47"+
    "\1\0\12\47\1\140\1\0\1\141\2\0\2\47\6\0"+
    "\13\47\1\0\1\47\1\157\13\47\12\0\1\47\4\0"+
    "\1\47\1\0\12\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\0\3\47\1\160\11\47\12\0\1\161"+
    "\4\0\1\161\1\0\12\71\5\0\2\161\6\0\13\71"+
    "\1\0\15\71\13\0\1\66\77\0\1\71\4\0\1\71"+
    "\1\0\12\71\1\162\1\0\1\163\1\164\1\0\2\71"+
    "\6\0\13\71\1\0\15\71\37\165\1\0\41\165\12\0"+
    "\1\161\4\0\1\161\1\0\12\71\5\0\2\75\6\0"+
    "\13\71\1\0\15\71\44\0\1\66\101\0\1\166\63\0"+
    "\1\167\62\0\1\102\4\0\1\102\1\0\12\102\5\0"+
    "\2\102\6\0\13\102\1\0\15\102\12\0\1\104\4\0"+
    "\1\104\1\0\12\104\5\0\2\104\6\0\13\104\1\0"+
    "\15\104\12\0\1\105\4\0\1\105\1\0\12\105\5\0"+
    "\2\105\6\0\13\105\1\0\15\105\12\0\1\170\4\0"+
    "\1\170\1\0\12\112\5\0\2\170\6\0\13\112\1\0"+
    "\15\112\12\0\1\112\4\0\1\112\1\0\12\112\1\171"+
    "\1\0\1\163\2\0\2\112\6\0\13\112\1\0\15\112"+
    "\12\0\1\134\3\0\1\114\1\172\1\0\12\172\5\0"+
    "\1\134\1\172\6\0\13\172\1\0\15\172\16\0\2\114"+
    "\1\0\12\114\6\0\1\114\6\0\13\114\1\0\15\114"+
    "\3\117\1\173\1\174\74\117\6\120\1\175\72\120\12\0"+
    "\1\25\4\0\1\25\1\0\4\25\1\176\5\25\5\0"+
    "\2\25\6\0\13\25\1\0\15\25\12\0\1\25\4\0"+
    "\1\25\1\0\3\25\1\177\6\25\5\0\2\25\6\0"+
    "\13\25\1\0\15\25\12\0\1\25\4\0\1\25\1\0"+
    "\1\200\11\25\5\0\2\25\6\0\13\25\1\0\15\25"+
    "\12\0\1\25\4\0\1\25\1\0\12\25\5\0\2\25"+
    "\6\0\2\25\1\201\10\25\1\0\15\25\12\0\1\25"+
    "\4\0\1\25\1\0\4\25\1\202\5\25\5\0\2\25"+
    "\6\0\2\25\1\203\10\25\1\0\15\25\12\0\1\25"+
    "\4\0\1\25\1\0\1\204\11\25\5\0\2\25\6\0"+
    "\13\25\1\0\15\25\12\0\1\25\4\0\1\25\1\0"+
    "\4\25\1\205\5\25\5\0\2\25\6\0\13\25\1\0"+
    "\15\25\12\0\1\25\4\0\1\25\1\0\2\25\1\206"+
    "\7\25\5\0\2\25\6\0\13\25\1\0\15\25\12\0"+
    "\1\25\4\0\1\25\1\0\12\25\5\0\2\25\6\0"+
    "\5\25\1\207\5\25\1\0\15\25\2\132\3\0\7\132"+
    "\1\210\64\132\12\0\1\134\4\0\1\134\1\0\12\134"+
    "\1\211\1\0\1\212\2\0\2\134\6\0\13\134\1\0"+
    "\15\134\12\0\1\134\4\0\1\134\1\0\1\134\1\213"+
    "\10\134\1\211\1\0\1\212\2\0\2\134\6\0\13\134"+
    "\1\0\15\134\12\0\1\134\4\0\1\134\1\0\2\134"+
    "\1\214\7\134\1\211\1\0\1\212\2\0\2\134\6\0"+
    "\13\134\1\0\15\134\12\0\1\47\4\0\1\47\1\0"+
    "\2\47\1\215\7\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\0\15\47\12\0\1\216\4\0\1\216"+
    "\1\0\12\216\1\140\1\0\1\141\2\0\2\216\6\0"+
    "\13\216\1\0\15\216\2\141\3\0\31\141\1\217\42\141"+
    "\12\0\1\47\4\0\1\47\1\0\11\47\1\220\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\13\47\1\0\15\47"+
    "\12\0\1\47\4\0\1\47\1\0\3\47\1\221\6\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\15\47\12\0\1\47\4\0\1\47\1\0\7\47\1\222"+
    "\2\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\15\47\12\0\1\47\4\0\1\47\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\1\47\1\223"+
    "\11\47\1\0\15\47\12\0\1\47\4\0\1\47\1\0"+
    "\12\47\1\140\1\0\1\141\2\0\2\47\6\0\5\47"+
    "\1\224\5\47\1\0\15\47\12\0\1\47\4\0\1\47"+
    "\1\0\1\225\11\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\0\15\47\12\0\1\47\4\0\1\47"+
    "\1\0\2\47\1\226\7\47\1\140\1\0\1\141\2\0"+
    "\2\47\6\0\13\47\1\0\15\47\2\151\3\0\31\151"+
    "\1\227\42\151\37\152\1\230\41\152\12\0\1\47\4\0"+
    "\1\47\1\0\12\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\5\47\1\231\5\47\1\0\15\47\12\0\1\47"+
    "\4\0\1\47\1\0\1\232\11\47\1\140\1\0\1\141"+
    "\2\0\2\47\6\0\13\47\1\0\15\47\12\0\1\47"+
    "\4\0\1\47\1\0\12\47\1\140\1\0\1\141\2\0"+
    "\2\47\6\0\13\47\1\0\2\47\1\233\12\47\12\0"+
    "\1\47\4\0\1\47\1\0\12\47\1\140\1\0\1\141"+
    "\2\0\2\47\6\0\13\47\1\0\6\47\1\234\6\47"+
    "\12\0\1\47\4\0\1\47\1\0\12\47\1\140\1\0"+
    "\1\141\2\0\2\47\6\0\13\47\1\0\11\47\1\235"+
    "\3\47\12\0\1\236\4\0\1\236\1\0\12\236\1\162"+
    "\1\0\1\163\1\164\1\0\2\236\6\0\13\236\1\0"+
    "\15\236\2\163\3\0\31\163\1\237\42\163\37\165\1\240"+
    "\41\165\17\0\1\241\73\0\1\242\4\0\1\242\1\0"+
    "\12\242\1\171\1\0\1\163\2\0\2\242\6\0\13\242"+
    "\1\0\15\242\12\0\1\134\3\0\1\114\1\172\1\0"+
    "\12\172\1\211\1\0\1\212\2\0\1\134\1\172\6\0"+
    "\13\172\1\0\15\172\3\0\1\173\75\0\5\120\1\173"+
    "\1\175\72\120\12\0\1\25\4\0\1\25\1\0\10\25"+
    "\1\243\1\25\5\0\2\25\6\0\13\25\1\0\15\25"+
    "\12\0\1\25\4\0\1\25\1\0\12\25\5\0\2\25"+
    "\6\0\5\25\1\244\5\25\1\0\15\25\12\0\1\25"+
    "\4\0\1\25\1\0\3\25\1\245\6\25\5\0\2\25"+
    "\6\0\13\25\1\0\15\25\12\0\1\25\4\0\1\25"+
    "\1\0\1\246\11\25\5\0\2\25\6\0\13\25\1\0"+
    "\15\25\12\0\1\25\4\0\1\25\1\0\2\25\1\247"+
    "\7\25\5\0\2\25\6\0\13\25\1\0\15\25\12\0"+
    "\1\25\4\0\1\25\1\0\4\25\1\250\5\25\5\0"+
    "\2\25\6\0\13\25\1\0\15\25\12\0\1\25\4\0"+
    "\1\25\1\0\12\25\5\0\2\25\6\0\2\25\1\251"+
    "\10\25\1\0\15\25\12\0\1\25\4\0\1\25\1\0"+
    "\1\252\11\25\5\0\2\25\6\0\13\25\1\0\15\25"+
    "\12\0\1\25\4\0\1\25\1\0\12\25\5\0\2\25"+
    "\6\0\2\25\1\253\10\25\1\0\15\25\12\0\1\25"+
    "\4\0\1\25\1\0\5\25\1\254\4\25\5\0\2\25"+
    "\6\0\13\25\1\0\15\25\12\0\1\255\4\0\1\255"+
    "\1\0\12\255\5\0\2\255\6\0\13\255\1\0\15\255"+
    "\16\0\1\256\1\0\1\256\13\0\1\256\56\0\1\134"+
    "\4\0\1\134\1\0\2\134\1\257\7\134\1\211\1\0"+
    "\1\212\2\0\2\134\6\0\13\134\1\0\15\134\12\0"+
    "\1\134\4\0\1\134\1\0\7\134\1\260\2\134\1\211"+
    "\1\0\1\212\2\0\2\134\6\0\13\134\1\0\15\134"+
    "\12\0\1\47\4\0\1\47\1\0\3\47\1\261\6\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\15\47\12\0\1\216\4\0\1\216\1\0\12\216\2\0"+
    "\1\141\2\0\2\216\6\0\13\216\1\0\15\216\12\0"+
    "\1\47\4\0\1\47\1\0\3\47\1\262\6\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\13\47\1\0\15\47"+
    "\12\0\1\47\4\0\1\47\1\0\10\47\1\263\1\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\15\47\12\0\1\47\4\0\1\47\1\0\10\47\1\264"+
    "\1\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\15\47\12\0\1\47\4\0\1\47\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\1\47\1\265"+
    "\11\47\1\0\15\47\12\0\1\47\4\0\1\47\1\0"+
    "\5\47\1\266\3\47\1\267\1\140\1\0\1\141\2\0"+
    "\2\47\6\0\13\47\1\0\15\47\12\0\1\47\4\0"+
    "\1\47\1\0\12\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\270\15\47\12\0\1\47\4\0\1\47"+
    "\1\0\12\47\1\140\1\0\1\141\2\0\2\47\6\0"+
    "\2\47\1\271\10\47\1\0\15\47\12\0\1\47\4\0"+
    "\1\47\1\0\5\47\1\272\4\47\1\140\1\0\1\141"+
    "\2\0\2\47\6\0\13\47\1\0\15\47\12\0\1\47"+
    "\4\0\1\47\1\0\7\47\1\273\2\47\1\140\1\0"+
    "\1\141\2\0\2\47\6\0\13\47\1\0\15\47\12\0"+
    "\1\47\4\0\1\47\1\0\12\47\1\140\1\0\1\141"+
    "\2\0\2\47\6\0\13\47\1\0\2\47\1\274\12\47"+
    "\12\0\1\47\4\0\1\47\1\0\12\47\1\140\1\0"+
    "\1\141\2\0\2\47\6\0\13\47\1\0\7\47\1\275"+
    "\5\47\12\0\1\47\4\0\1\47\1\0\12\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\13\47\1\0\12\47"+
    "\1\276\2\47\12\0\1\236\4\0\1\236\1\0\12\236"+
    "\2\0\1\163\1\164\1\0\2\236\6\0\13\236\1\0"+
    "\15\236\51\0\1\277\41\0\1\242\4\0\1\242\1\0"+
    "\12\242\2\0\1\163\2\0\2\242\6\0\13\242\1\0"+
    "\15\242\12\0\1\25\4\0\1\25\1\0\3\25\1\300"+
    "\6\25\5\0\2\25\6\0\13\25\1\0\15\25\12\0"+
    "\1\25\4\0\1\25\1\0\1\301\11\25\5\0\2\25"+
    "\6\0\13\25\1\0\15\25\12\0\1\25\4\0\1\25"+
    "\1\0\2\25\1\302\7\25\5\0\2\25\6\0\13\25"+
    "\1\0\15\25\12\0\1\25\4\0\1\25\1\0\12\25"+
    "\5\0\2\25\6\0\3\25\1\303\7\25\1\0\15\25"+
    "\12\0\1\25\4\0\1\25\1\0\11\25\1\304\5\0"+
    "\2\25\6\0\13\25\1\0\15\25\12\0\1\25\4\0"+
    "\1\25\1\0\7\25\1\305\2\25\5\0\2\25\6\0"+
    "\13\25\1\0\15\25\12\0\1\25\4\0\1\25\1\0"+
    "\3\25\1\306\6\25\5\0\2\25\6\0\13\25\1\0"+
    "\15\25\12\0\1\25\4\0\1\25\1\0\6\25\1\307"+
    "\3\25\5\0\2\25\6\0\13\25\1\0\15\25\12\0"+
    "\1\25\4\0\1\25\1\0\12\25\5\0\2\25\6\0"+
    "\2\25\1\310\10\25\1\0\15\25\12\0\1\255\4\0"+
    "\1\255\1\0\12\255\1\211\4\0\2\255\6\0\13\255"+
    "\1\0\15\255\12\0\1\311\4\0\1\311\1\0\12\311"+
    "\5\0\2\311\6\0\13\311\1\0\15\311\12\0\1\134"+
    "\4\0\1\134\1\0\3\134\1\312\6\134\1\211\1\0"+
    "\1\212\2\0\2\134\6\0\13\134\1\0\15\134\12\0"+
    "\1\134\4\0\1\134\1\0\10\134\1\313\1\134\1\211"+
    "\1\0\1\212\2\0\2\134\6\0\13\134\1\0\15\134"+
    "\12\0\1\47\4\0\1\47\1\0\4\47\1\314\5\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\15\47\12\0\1\47\4\0\1\47\1\0\12\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\13\47\1\315\15\47"+
    "\12\0\1\47\4\0\1\316\1\0\12\47\1\140\1\0"+
    "\1\141\2\0\2\47\6\0\13\47\1\0\15\47\12\0"+
    "\1\47\4\0\1\47\1\0\3\47\1\317\6\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\13\47\1\0\15\47"+
    "\12\0\1\47\4\0\1\47\1\0\12\47\1\140\1\0"+
    "\1\141\2\0\2\47\6\0\2\47\1\320\10\47\1\0"+
    "\15\47\12\0\1\47\4\0\1\47\1\0\12\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\12\47\1\321\1\0"+
    "\15\47\12\0\1\47\4\0\1\47\1\0\6\47\1\322"+
    "\3\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\15\47\12\0\1\47\4\0\1\47\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\2\47\1\323"+
    "\10\47\1\0\15\47\12\0\1\47\4\0\1\47\1\0"+
    "\12\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\324\15\47\12\0\1\47\4\0\1\47\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\3\47\1\325\11\47\12\0\1\47\4\0\1\47\1\0"+
    "\12\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\4\47\1\326\10\47\12\0\1\47\4\0\1\47"+
    "\1\0\12\47\1\140\1\0\1\141\2\0\2\47\6\0"+
    "\13\47\1\0\13\47\1\327\1\47\30\0\1\330\62\0"+
    "\1\25\4\0\1\25\1\0\12\25\5\0\2\25\6\0"+
    "\5\25\1\331\5\25\1\0\15\25\12\0\1\25\4\0"+
    "\1\25\1\0\1\332\11\25\5\0\2\25\6\0\13\25"+
    "\1\0\15\25\12\0\1\25\4\0\1\25\1\0\12\25"+
    "\5\0\2\25\6\0\5\25\1\333\5\25\1\0\15\25"+
    "\12\0\1\311\4\0\1\311\1\0\12\311\3\0\1\334"+
    "\1\0\2\311\6\0\13\311\1\0\15\311\12\0\1\134"+
    "\4\0\1\134\1\0\4\134\1\335\5\134\1\211\1\0"+
    "\1\212\2\0\2\134\6\0\13\134\1\0\15\134\12\0"+
    "\1\134\4\0\1\134\1\0\3\134\1\336\6\134\1\211"+
    "\1\0\1\212\2\0\2\134\6\0\13\134\1\0\15\134"+
    "\12\0\1\47\4\0\1\47\1\0\5\47\1\337\4\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\15\47\52\0\1\340\40\0\1\47\4\0\1\47\1\0"+
    "\3\47\1\341\6\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\0\15\47\12\0\1\47\4\0\1\47"+
    "\1\0\11\47\1\342\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\0\15\47\12\0\1\47\4\0\1\47"+
    "\1\0\1\343\11\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\0\15\47\12\0\1\47\4\0\1\47"+
    "\1\0\12\47\1\140\1\0\1\141\2\0\2\47\6\0"+
    "\3\47\1\344\7\47\1\0\15\47\12\0\1\47\4\0"+
    "\1\47\1\0\1\345\11\47\1\140\1\0\1\141\2\0"+
    "\2\47\6\0\13\47\1\0\15\47\12\0\1\47\4\0"+
    "\1\47\1\0\12\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\5\47\1\346\5\47\1\0\15\47\32\0\1\347"+
    "\60\0\1\47\4\0\1\47\1\0\12\47\1\140\1\0"+
    "\1\141\2\0\2\47\6\0\13\47\1\0\4\47\1\350"+
    "\10\47\12\0\1\47\4\0\1\47\1\0\12\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\13\47\1\0\12\47"+
    "\1\351\2\47\30\0\1\352\62\0\1\25\4\0\1\25"+
    "\1\0\12\25\5\0\2\25\6\0\7\25\1\353\3\25"+
    "\1\0\15\25\12\0\1\134\4\0\1\134\1\0\5\134"+
    "\1\354\4\134\1\211\1\0\1\212\2\0\2\134\6\0"+
    "\13\134\1\0\15\134\12\0\1\134\4\0\1\134\1\0"+
    "\11\134\1\355\1\211\1\0\1\212\2\0\2\134\6\0"+
    "\13\134\1\0\15\134\12\0\1\47\4\0\1\356\1\0"+
    "\12\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\357\15\47\100\0\1\360\12\0\1\47\4\0\1\47"+
    "\1\0\12\47\1\140\1\0\1\141\2\0\2\47\6\0"+
    "\5\47\1\361\5\47\1\0\15\47\12\0\1\47\4\0"+
    "\1\47\1\0\11\47\1\362\1\140\1\0\1\141\2\0"+
    "\2\47\6\0\13\47\1\0\15\47\12\0\1\47\4\0"+
    "\1\47\1\0\12\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\2\47\1\363\10\47\1\0\15\47\12\0\1\47"+
    "\4\0\1\47\1\0\3\47\1\364\6\47\1\140\1\0"+
    "\1\141\2\0\2\47\6\0\13\47\1\0\15\47\12\0"+
    "\1\47\4\0\1\47\1\0\12\47\1\140\1\0\1\141"+
    "\2\0\2\47\6\0\7\47\1\365\3\47\1\0\15\47"+
    "\21\0\1\366\71\0\1\47\4\0\1\47\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\1\47\1\367\13\47\12\0\1\47\4\0\1\47\1\0"+
    "\12\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\4\47\1\370\10\47\61\0\1\371\31\0\1\134"+
    "\4\0\1\134\1\0\11\134\1\372\1\211\1\0\1\212"+
    "\2\0\2\134\6\0\13\134\1\0\15\134\12\0\1\47"+
    "\4\0\1\47\1\0\3\47\1\373\6\47\1\140\1\0"+
    "\1\141\2\0\2\47\6\0\13\47\1\0\15\47\32\0"+
    "\1\374\60\0\1\47\4\0\1\47\1\0\5\47\1\375"+
    "\4\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\15\47\12\0\1\47\4\0\1\47\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\376"+
    "\15\47\12\0\1\47\4\0\1\47\1\0\7\47\1\377"+
    "\2\47\1\140\1\0\1\141\2\0\2\47\6\0\13\47"+
    "\1\0\15\47\12\0\1\47\4\0\1\u0100\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\15\47\25\0\1\u0101\135\0\1\u0102\30\0\1\47\4\0"+
    "\1\47\1\0\12\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\5\47\1\u0103\5\47\1\0\15\47\21\0\1\u0104"+
    "\111\0\1\u0105\60\0\1\47\4\0\1\47\1\0\12\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\5\47\1\u0106"+
    "\5\47\1\0\15\47\12\0\1\47\4\0\1\47\1\0"+
    "\3\47\1\u0107\6\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\0\15\47\21\0\1\u0108\106\0\1\u0109"+
    "\63\0\1\47\4\0\1\47\1\0\5\47\1\u010a\4\47"+
    "\1\140\1\0\1\141\2\0\2\47\6\0\13\47\1\0"+
    "\15\47\25\0\1\u010b\74\0\1\u010c\71\0\1\47\4\0"+
    "\1\47\1\0\12\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\4\47\1\u010d\6\47\1\0\15\47\24\0\1\u010e"+
    "\75\0\1\u010f\104\0\1\u0110\65\0\1\47\4\0\1\47"+
    "\1\0\3\47\1\u0111\6\47\1\140\1\0\1\141\2\0"+
    "\2\47\6\0\13\47\1\0\15\47\24\0\1\u0112\75\0"+
    "\1\u0113\71\0\1\47\4\0\1\47\1\0\12\47\1\140"+
    "\1\0\1\141\2\0\2\47\6\0\5\47\1\u0114\5\47"+
    "\1\0\15\47\24\0\1\u0115\66\0\1\47\4\0\1\47"+
    "\1\0\1\u0116\11\47\1\140\1\0\1\141\2\0\2\47"+
    "\6\0\13\47\1\0\15\47";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\1\11\2\1\3\11\14\1\2\11\13\1\1\11"+
    "\7\1\1\11\3\1\2\11\7\1\1\11\2\1\2\11"+
    "\5\1\2\11\1\1\1\0\11\1\2\0\5\1\1\0"+
    "\7\1\2\0\6\1\1\0\1\1\1\0\1\11\1\0"+
    "\1\11\2\0\2\1\1\11\1\1\1\0\13\1\2\0"+
    "\15\1\1\11\7\1\1\11\1\0\14\1\1\0\11\1"+
    "\1\11\6\1\1\0\11\1\1\0\3\1\1\0\6\1"+
    "\1\0\3\1\1\0\3\1\1\11\3\1\1\0\6\1"+
    "\1\0\2\1\1\0\4\1\1\0\1\11\5\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\2\1\2\0"+
    "\1\1\2\0\2\1\1\0\1\11\1\1\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[278];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // Vrai si le lexer se trouve dans un bloc if, else if, else ou condition
    boolean conditionBlock = false;
    // Vrao si le script que le lexer vient de lire se trouve à la racine du fichier
    boolean rootScript = false;

    // Nombre de début de bloc trouvé dans un code Javascript
    int nbBlockBegin = 0;
    // Nombre de fin de bloc trouvé dans un code Javascript
    int nbBlockEnd = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 60: break;
          case 2: 
            { if(yystate() == STATES_CALLS) { yybegin(INSTRUCTIONS); } return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 61: break;
          case 3: 
            { return SmlTypes.SEPARATOR;
            } 
            // fall through
          case 62: break;
          case 4: 
            { if(yystate() == JAVASCRIPT_CODE) {
          nbBlockBegin++;
          return SmlTypes.JAVASCRIPT_CODE;
        } else if(yystate() == EVENTS_DEFINITIONS) {
          yybegin(INSTRUCTIONS);
        }
        return SmlTypes.BEGIN_BLOCK;
            } 
            // fall through
          case 63: break;
          case 5: 
            { if(yystate() == JAVASCRIPT_CODE && nbBlockBegin > nbBlockEnd && nbBlockBegin != 0) {
          nbBlockEnd++;
          return SmlTypes.JAVASCRIPT_CODE;
        } else if(yystate() == BINDINGS) {
          yybegin(JAVASCRIPT_CODE);
        } else if(conditionBlock) {
          conditionBlock = false;
          yybegin(INSTRUCTIONS);
        } else if(yystate() == INSTRUCTIONS || yystate() == OPTIONS || yystate() == EVENTS_NAMES) {
          yybegin(YYINITIAL);
        } else if(yystate() == JAVASCRIPT_CODE) {
          yybegin(rootScript ? YYINITIAL : INSTRUCTIONS);
        }
        return SmlTypes.END_BLOCK;
            } 
            // fall through
          case 64: break;
          case 6: 
            { yybegin(YYINITIAL); return SmlTypes.STATE_NAME;
            } 
            // fall through
          case 65: break;
          case 7: 
            { yybegin(EVENTS_NAMES); return SmlTypes.ALIAS_NAME;
            } 
            // fall through
          case 66: break;
          case 8: 
            { return SmlTypes.EVENT_NAME;
            } 
            // fall through
          case 67: break;
          case 9: 
            { return SmlTypes.ALL_EVENTS;
            } 
            // fall through
          case 68: break;
          case 10: 
            { return SmlTypes.EVENT_NAME_SEPARATOR;
            } 
            // fall through
          case 69: break;
          case 11: 
            { return SmlTypes.JAVA_FUNCTION_CALL;
            } 
            // fall through
          case 70: break;
          case 12: 
            { return SmlTypes.TRACE_MESSAGE_SEPARATOR;
            } 
            // fall through
          case 71: break;
          case 13: 
            { return SmlTypes.OP_CONDS;
            } 
            // fall through
          case 72: break;
          case 14: 
            { yybegin(INSTRUCTIONS); return SmlTypes.JAVA_FUNCTION_CALL;
            } 
            // fall through
          case 73: break;
          case 15: 
            { return SmlTypes.BEGIN_PARENTHESE;
            } 
            // fall through
          case 74: break;
          case 16: 
            { yybegin(INSTRUCTIONS); return SmlTypes.END_PARENTHESE;
            } 
            // fall through
          case 75: break;
          case 17: 
            { return SmlTypes.CONST_CONDS;
            } 
            // fall through
          case 76: break;
          case 18: 
            { return SmlTypes.COMP_CONDS;
            } 
            // fall through
          case 77: break;
          case 19: 
            { return SmlTypes.STATE_NAME;
            } 
            // fall through
          case 78: break;
          case 20: 
            { return SmlTypes.STATE_NAME_SEPARATOR;
            } 
            // fall through
          case 79: break;
          case 21: 
            { yybegin(INSTRUCTIONS); return SmlTypes.THREAD_NAME;
            } 
            // fall through
          case 80: break;
          case 22: 
            { return SmlTypes.BIND_NAME;
            } 
            // fall through
          case 81: break;
          case 23: 
            { return SmlTypes.EQUALS_SEPARATOR;
            } 
            // fall through
          case 82: break;
          case 24: 
            { return SmlTypes.JAVASCRIPT_CODE;
            } 
            // fall through
          case 83: break;
          case 25: 
            { return SmlTypes.SML_VARS;
            } 
            // fall through
          case 84: break;
          case 26: 
            { return SmlTypes.DOT_SEPARATOR;
            } 
            // fall through
          case 85: break;
          case 27: 
            { yybegin(INSTRUCTIONS); return SmlTypes.EQUALS_SEPARATOR;
            } 
            // fall through
          case 86: break;
          case 28: 
            { return SmlTypes.COMMENT;
            } 
            // fall through
          case 87: break;
          case 29: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.IF;
            } 
            // fall through
          case 88: break;
          case 30: 
            { return SmlTypes.IDENTIFICATION_KEY;
            } 
            // fall through
          case 89: break;
          case 31: 
            { return SmlTypes.TRACE_MESSAGE_STRING;
            } 
            // fall through
          case 90: break;
          case 32: 
            { yybegin(INSTRUCTIONS); return SmlTypes.EXIT;
            } 
            // fall through
          case 91: break;
          case 33: 
            { return SmlTypes.ELSE;
            } 
            // fall through
          case 92: break;
          case 34: 
            { yybegin(CALL);return SmlTypes.CALL;
            } 
            // fall through
          case 93: break;
          case 35: 
            { yybegin(SET); return SmlTypes.SET;
            } 
            // fall through
          case 94: break;
          case 36: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.TRACE;
            } 
            // fall through
          case 95: break;
          case 37: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.EVENT;
            } 
            // fall through
          case 96: break;
          case 38: 
            { yybegin(INSTRUCTIONS); return SmlTypes.ENTER;
            } 
            // fall through
          case 97: break;
          case 39: 
            { yybegin(EVENTS_DEFINITIONS); return SmlTypes.ALARM;
            } 
            // fall through
          case 98: break;
          case 40: 
            { yybegin(ALIAS_NAMES); return SmlTypes.ALIAS;
            } 
            // fall through
          case 99: break;
          case 41: 
            { yybegin(STATES_NAMES); return SmlTypes.STATE;
            } 
            // fall through
          case 100: break;
          case 42: 
            { return SmlTypes.DEBUG;
            } 
            // fall through
          case 101: break;
          case 43: 
            { yybegin(OPTIONS); return SmlTypes.OPTION;
            } 
            // fall through
          case 102: break;
          case 44: 
            { rootScript = true; return SmlTypes.SCRIPT;
            } 
            // fall through
          case 103: break;
          case 45: 
            { rootScript = false; return SmlTypes.SCRIPT;
            } 
            // fall through
          case 104: break;
          case 46: 
            { yybegin(BINDINGS); return SmlTypes.BINDING;
            } 
            // fall through
          case 105: break;
          case 47: 
            { return SmlTypes.THREAD_KEYWORD;
            } 
            // fall through
          case 106: break;
          case 48: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.ELSE_IF;
            } 
            // fall through
          case 107: break;
          case 49: 
            { return SmlTypes.MESSAGE;
            } 
            // fall through
          case 108: break;
          case 50: 
            { return SmlTypes.WARNING;
            } 
            // fall through
          case 109: break;
          case 51: 
            { return SmlTypes.PROCESS_KEYWORD;
            } 
            // fall through
          case 110: break;
          case 52: 
            { return SmlTypes.EXEC_END;
            } 
            // fall through
          case 111: break;
          case 53: 
            { conditionBlock = true; yybegin(CONDITIONS); return SmlTypes.CONDITION;
            } 
            // fall through
          case 112: break;
          case 54: 
            { return SmlTypes.OPTIONS;
            } 
            // fall through
          case 113: break;
          case 55: 
            { return SmlTypes.THREAD_END;
            } 
            // fall through
          case 114: break;
          case 56: 
            { yybegin(STATES_CALLS); return SmlTypes.GOTO_STATE;
            } 
            // fall through
          case 115: break;
          case 57: 
            { yybegin(THREADS_NAMES); return SmlTypes.THREAD_STATE;
            } 
            // fall through
          case 116: break;
          case 58: 
            { yybegin(STATES_CALLS); return SmlTypes.PROCESS_STATE;
            } 
            // fall through
          case 117: break;
          case 59: 
            { return SmlTypes.CONSUME_EVENT;
            } 
            // fall through
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
