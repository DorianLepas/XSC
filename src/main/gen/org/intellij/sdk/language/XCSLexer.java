/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.XCSTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>XCS.flex</tt>
 */
class XCSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FUNCTION_HEADER = 2;
  public static final int CE_HEADER = 4;
  public static final int VSS_HEADER = 6;
  public static final int CORE = 8;
  public static final int NAME = 10;
  public static final int PROPERTY = 12;
  public static final int CE_CORE = 14;
  public static final int CE_NAME = 16;
  public static final int CE_PROPERTY = 18;
  public static final int VSS_CORE = 20;
  public static final int VSS_LIST_1 = 22;
  public static final int VSS_LIST_2 = 24;
  public static final int VSS_PROPERTY = 26;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\154\1\13\1\154\1\13\1\155"+
    "\1\153\1\156\5\13\1\157\1\123\1\1\1\160\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\154\2\13\1\43\1\13\1\161\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\162\1\122\4\1\4\13\1\43\1\123\1\163\1"+
    "\155\3\13\1\40\3\13\1\155\3\13\1\26\1\164\1\40\1\13\1\42\1\152\4\1\1\165\1"+
    "\13\1\166\17\13\1\167\21\13\1\147\2\13\1\147\1\170\1\13\1\42\3\13\1\171\1"+
    "\172\1\173\1\135\1\172\2\1\1\174\1\175\1\64\1\176\1\1\1\177\1\1\1\135\3\1"+
    "\2\13\1\64\1\200\1\201\1\202\1\203\1\204\1\1\2\13\1\152\62\1\1\205\2\13\1"+
    "\161\161\1\2\13\1\122\2\13\1\122\10\13\1\206\1\155\2\13\1\141\3\13\1\207\1"+
    "\175\1\13\1\210\4\211\2\13\2\1\1\175\35\1\1\212\1\1\1\24\1\213\1\24\4\13\1"+
    "\214\1\24\4\13\1\142\1\215\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13"+
    "\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135"+
    "\1\13\1\216\1\1\3\13\1\217\7\13\1\16\1\1\1\220\1\221\5\13\1\222\1\13\1\122"+
    "\1\26\3\1\1\220\2\13\1\26\1\1\3\13\1\155\4\13\1\60\1\123\1\13\1\223\1\40\1"+
    "\13\1\42\2\13\1\155\1\13\1\135\4\13\1\224\1\123\1\13\1\225\3\13\1\210\1\42"+
    "\1\123\1\13\1\115\4\13\1\32\1\160\1\13\1\226\1\227\1\230\1\211\2\13\1\142"+
    "\1\60\7\13\1\231\1\123\72\13\1\155\1\13\1\232\2\13\1\43\20\1\26\13\1\42\6"+
    "\13\1\161\2\1\1\210\1\233\1\35\1\234\1\235\6\13\1\16\1\1\1\236\25\13\1\42"+
    "\1\1\4\13\1\221\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\237\1\240\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\241\1\24\1\31\1\205\4\13\1\122\1\242\1\243\2\1\1\244"+
    "\1\13\1\14\1\245\2\42\2\1\7\13\1\31\4\1\3\13\1\154\7\1\1\246\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\247\1\250\2\1"+
    "\11\13\1\42\1\123\2\13\1\247\1\13\1\43\2\13\1\26\3\13\1\155\11\1\23\13\1\210"+
    "\1\13\1\60\1\26\11\1\1\251\2\13\1\252\1\13\1\60\1\13\1\210\1\13\1\122\4\1"+
    "\1\13\1\253\1\13\1\60\1\13\1\161\4\1\3\13\1\254\4\1\1\255\1\256\1\13\1\257"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\210\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\210"+
    "\1\1\1\57\1\175\3\13\1\31\1\1\1\13\1\152\1\123\3\13\1\260\1\1\2\13\1\261\4"+
    "\13\1\262\1\263\2\1\1\13\1\22\1\13\1\264\4\1\1\265\1\27\1\152\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\266\1\267\1\154\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\270\1\123\12\1\3\13\1\271\1\64\1\272\2\1\4\13\1\273\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\175\34\1\3\13\1\152"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\221\1\13\1\221\1\134\1\210\64\1\71\13"+
    "\1\161\6\1\6\13\1\122\1\1\14\13\1\155\53\1\2\13\1\122\75\1\44\13\1\210\33"+
    "\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13\1\42\1\154\3\13\1\210\1\155\1\123"+
    "\1\236\1\274\1\13\67\1\4\13\1\154\2\13\1\122\1\175\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\152\1\275\114\1\1\276"+
    "\1\277\1\300\1\1\1\301\11\1\1\302\33\1\5\13\1\136\3\13\1\153\1\303\1\304\1"+
    "\305\3\13\1\306\1\307\1\13\1\310\1\311\1\101\24\13\1\271\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\312\3\313\40\1\3\13\1\232\2\13\1\135\1\314\1\176\1\163\1\24\25\1\1\14\1"+
    "\222\1\315\75\1\14\13\1\154\1\210\2\1\4\13\1\31\1\123\112\1\1\305\1\13\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\43\1\325\1\43\47\1\1\13\1\161\1\13"+
    "\1\161\1\13\1\161\47\1\55\13\1\210\2\1\103\13\1\154\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\5\1\102\1\103\1\2\22\0\1\31\1\0\1\101\4\0\1\46\2\0\1\1\4\0\1\3"+
    "\1\30\2\34\1\30\1\35\3\30\1\100\1\30\1\27\1\0\1\33\1\53\1\104\2\0\1\17\1\21"+
    "\1\6\1\47\1\11\1\23\2\26\1\13\1\45\1\26\1\10\1\76\1\14\1\7\1\74\1\24\1\20"+
    "\1\22\1\12\1\25\1\15\1\32\2\26\1\50\1\43\1\0\1\44\1\0\1\16\1\0\1\41\1\75\1"+
    "\61\1\65\1\40\1\54\1\63\1\66\1\55\1\26\1\72\1\37\1\60\1\42\1\36\1\71\1\26"+
    "\1\57\1\62\1\64\1\56\1\77\1\73\1\67\1\70\1\26\1\51\1\0\1\52\7\0\1\102\24\0"+
    "\1\26\12\0\1\26\4\0\1\26\5\0\27\26\1\0\12\26\4\0\14\26\16\0\5\26\7\0\1\26"+
    "\1\0\1\26\1\0\5\26\1\0\2\26\2\0\4\26\1\0\1\26\6\0\1\26\1\0\3\26\1\0\1\26\1"+
    "\0\4\26\1\0\23\26\1\0\11\26\1\0\26\26\2\0\1\26\6\0\10\26\10\0\16\26\1\0\1"+
    "\26\1\0\2\26\1\0\2\26\1\0\1\26\10\0\13\26\5\0\3\26\15\0\12\30\4\0\6\26\1\0"+
    "\10\26\2\0\12\26\1\0\6\26\12\30\3\26\2\0\14\26\2\0\3\26\12\30\14\26\4\0\1"+
    "\26\5\0\16\26\2\0\14\26\4\0\5\26\1\0\10\26\6\0\20\26\2\0\12\30\1\26\2\0\16"+
    "\26\1\0\1\26\3\0\4\26\2\0\11\26\2\0\2\26\2\0\4\26\10\0\1\26\4\0\2\26\1\0\1"+
    "\26\1\0\3\26\1\0\6\26\4\0\2\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\26\1\0\5\26"+
    "\4\0\2\26\2\0\3\26\3\0\1\26\7\0\4\26\1\0\1\26\7\0\12\30\6\26\13\0\3\26\1\0"+
    "\11\26\1\0\2\26\1\0\2\26\1\0\5\26\2\0\12\26\1\0\3\26\1\0\3\26\2\0\1\26\30"+
    "\0\1\26\7\0\3\26\1\0\10\26\2\0\6\26\2\0\2\26\2\0\3\26\10\0\2\26\4\0\2\26\1"+
    "\0\1\26\1\0\1\26\20\0\2\26\1\0\6\26\3\0\3\26\1\0\4\26\3\0\2\26\1\0\1\26\1"+
    "\0\2\26\3\0\2\26\3\0\3\26\3\0\14\26\4\0\5\26\3\0\3\26\1\0\4\26\2\0\1\26\6"+
    "\0\1\26\10\0\4\26\1\0\10\26\1\0\3\26\1\0\30\26\3\0\10\26\1\0\3\26\1\0\4\26"+
    "\7\0\2\26\1\0\3\26\5\0\4\26\1\0\5\26\2\0\4\26\5\0\2\26\7\0\1\26\2\0\2\26\16"+
    "\0\3\26\1\0\10\26\1\0\7\26\1\0\3\26\1\0\5\26\5\0\4\26\7\0\1\26\12\0\6\26\2"+
    "\0\2\26\1\0\22\26\3\0\10\26\1\0\11\26\1\0\1\26\2\0\7\26\3\0\1\26\4\0\6\26"+
    "\1\0\1\26\1\0\10\26\2\0\2\26\14\0\17\26\1\0\12\30\7\0\2\26\1\0\1\26\2\0\2"+
    "\26\1\0\1\26\2\0\1\26\6\0\4\26\1\0\7\26\1\0\3\26\1\0\1\26\1\0\1\26\2\0\2\26"+
    "\1\0\15\26\1\0\3\26\2\0\5\26\1\0\1\26\1\0\6\26\2\0\12\30\2\0\4\26\10\0\2\26"+
    "\13\0\1\26\1\0\1\26\1\0\1\26\4\0\12\26\1\0\24\26\3\0\5\26\1\0\12\26\6\0\1"+
    "\26\11\0\12\30\4\26\2\0\6\26\1\0\1\26\5\0\1\26\2\0\13\26\1\0\15\26\1\0\4\26"+
    "\2\0\7\26\1\0\1\26\1\0\4\26\2\0\1\26\1\0\4\26\2\0\7\26\1\0\1\26\1\0\4\26\2"+
    "\0\16\26\2\0\6\26\2\0\15\26\2\0\14\26\3\0\13\26\7\0\15\26\1\0\7\26\13\0\4"+
    "\26\14\0\1\26\1\0\2\26\14\0\4\26\3\0\1\26\4\0\2\26\15\0\3\26\2\0\12\26\15"+
    "\0\1\26\23\0\5\26\12\30\3\0\6\26\1\0\23\26\1\0\2\26\6\0\6\26\5\0\15\26\1\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\6\26\1\0\7\26\1\0\1\26\3\0\3\26\1\0\7\26\3\0\4"+
    "\26\2\0\6\26\14\0\2\102\25\0\1\26\4\0\1\26\14\0\1\26\15\0\1\26\2\0\1\26\4"+
    "\0\1\26\2\0\12\26\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26\1\0\1\26\1\0\4\26\1"+
    "\0\13\26\2\0\4\26\5\0\5\26\4\0\1\26\7\0\17\26\6\0\15\26\7\0\10\26\11\0\7\26"+
    "\1\0\7\26\6\0\3\26\11\0\5\26\2\0\5\26\3\0\7\26\2\0\2\26\2\0\3\26\5\0\13\26"+
    "\12\30\2\26\4\0\3\26\1\0\12\26\1\0\1\26\7\0\11\26\2\0\27\26\2\0\15\26\3\0"+
    "\1\26\1\0\1\26\2\0\1\26\16\0\1\26\12\30\5\26\3\0\5\26\12\0\6\26\2\0\6\26\2"+
    "\0\6\26\11\0\13\26\1\0\2\26\2\0\7\26\4\0\5\26\3\0\5\26\5\0\12\26\1\0\5\26"+
    "\1\0\1\26\1\0\2\26\1\0\2\26\1\0\12\26\3\0\15\26\3\0\2\26\30\0\16\26\4\0\1"+
    "\26\2\0\6\26\2\0\6\26\2\0\6\26\2\0\3\26\3\0\14\26\1\0\16\26\1\0\2\26\1\0\1"+
    "\26\15\0\1\26\2\0\4\26\4\0\10\26\1\0\5\26\12\0\6\26\2\0\1\26\1\0\14\26\1\0"+
    "\2\26\3\0\1\26\2\0\4\26\1\0\2\26\12\0\10\26\6\0\6\26\1\0\2\26\5\0\10\26\1"+
    "\0\3\26\1\0\13\26\4\0\3\26\4\0\6\26\1\0\12\30\4\26\2\0\1\26\11\0\5\26\5\0"+
    "\3\26\3\0\12\30\1\26\1\0\1\26\3\0\10\26\6\0\1\26\1\0\7\26\1\0\1\26\1\0\4\26"+
    "\1\0\2\26\6\0\1\26\5\0\7\26\2\0\7\26\3\0\6\26\1\0\1\26\10\0\6\26\2\0\10\26"+
    "\10\0\6\26\2\0\1\26\3\0\1\26\13\0\10\26\5\0\15\26\3\0\2\26\6\0\5\26\3\0\6"+
    "\26\10\0\10\26\2\0\7\26\16\0\4\26\4\0\3\26\15\0\1\26\2\0\2\26\2\0\4\26\1\0"+
    "\14\26\1\0\1\26\1\0\7\26\1\0\21\26\1\0\4\26\2\0\10\26\1\0\7\26\1\0\14\26\1"+
    "\0\4\26\1\0\5\26\1\0\1\26\3\0\11\26\1\0\10\26\2\0\22\30\5\0\1\26\12\0\2\26"+
    "\1\0\2\26\1\0\5\26\6\0\2\26\1\0\1\26\2\0\1\26\1\0\12\26\1\0\4\26\1\0\1\26"+
    "\1\0\1\26\6\0\1\26\4\0\1\26\1\0\1\26\1\0\1\26\1\0\3\26\1\0\2\26\1\0\1\26\2"+
    "\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\2\26\1\0\1\26\2\0\4\26\1\0"+
    "\7\26\1\0\4\26\1\0\4\26\1\0\1\26\1\0\12\26\1\0\5\26\1\0\3\26\1\0\5\26\1\0"+
    "\5\26");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\1\1\1\3\3\4\1\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\13"+
    "\1\15\1\16\1\15\1\13\1\15\1\5\1\17\1\5"+
    "\1\20\1\21\2\1\1\22\11\1\1\23\1\24\2\1"+
    "\1\25\1\13\1\26\1\27\1\26\1\13\1\26\1\30"+
    "\2\31\2\1\1\32\4\1\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\1\1\41\2\1\1\42\1\43\2\4"+
    "\4\0\2\13\2\0\1\44\2\0\1\45\16\0\2\13"+
    "\1\31\2\0\1\46\11\0\2\4\4\0\3\13\1\47"+
    "\14\0\1\50\3\0\2\13\2\31\11\0\2\4\1\51"+
    "\1\14\1\15\1\16\2\13\14\0\1\25\1\26\1\27"+
    "\2\13\1\52\4\0\1\34\1\37\3\0\2\4\1\0"+
    "\2\13\22\0\2\13\7\0\2\4\1\51\2\13\21\0"+
    "\2\13\7\0\2\4\26\0\2\4\1\53\2\0\1\53"+
    "\13\0\1\54\3\0\1\55\1\0\2\4\12\0\1\53"+
    "\5\0\2\4\16\0\1\56\1\0\2\4\15\0\2\4"+
    "\12\0\2\4\10\0\2\4\6\0\2\4\2\0\1\53"+
    "\3\0\2\4\6\0\2\4\5\0\2\4\4\0\1\4"+
    "\1\57\3\0\1\4\2\0\1\4\2\0\1\4\1\0"+
    "\2\4\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u03c6\0\u0495\0\u04da\0\u051f\0\u03c6\0\u0564\0\u05a9"+
    "\0\u03c6\0\u03c6\0\u03c6\0\u03c6\0\u05ee\0\u0633\0\u0678\0\u06bd"+
    "\0\u0702\0\u0747\0\u078c\0\u05ee\0\u07d1\0\u03c6\0\u0816\0\u03c6"+
    "\0\u085b\0\u08a0\0\u08e5\0\u03c6\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u03c6\0\u03c6\0\u0b97"+
    "\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u05ee"+
    "\0\u03c6\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u03c6\0\u0ed3\0\u0f18"+
    "\0\u0f5d\0\u0fa2\0\u03c6\0\u0fe7\0\u03c6\0\u03c6\0\u102c\0\u03c6"+
    "\0\u1071\0\u03c6\0\u10b6\0\u10fb\0\u03c6\0\u1140\0\u1185\0\u11ca"+
    "\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u0816"+
    "\0\u0816\0\u13f2\0\u08e5\0\u08e5\0\u1437\0\u147c\0\u14c1\0\u1506"+
    "\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e"+
    "\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u0e8e\0\u0e8e"+
    "\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4"+
    "\0\u1b39\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c"+
    "\0\u1d61\0\u03c6\0\u03c6\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u03c6"+
    "\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u03c6\0\u2280"+
    "\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8"+
    "\0\u24ed\0\u2532\0\u2577\0\u03c6\0\u03c6\0\u03c6\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u03c6\0\u03c6\0\u03c6\0\u2982"+
    "\0\u29c7\0\u0e04\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u03c6\0\u03c6"+
    "\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03"+
    "\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b"+
    "\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u3153"+
    "\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b"+
    "\0\u33c0\0\u3405\0\u344a\0\u348f\0\u34d4\0\u03c6\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u3786"+
    "\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969\0\u39ae"+
    "\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91\0\u3bd6"+
    "\0\u3c1b\0\u3c60\0\u3ca5\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe"+
    "\0\u3e43\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026"+
    "\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u4209\0\u424e"+
    "\0\u4293\0\u42d8\0\u431d\0\u4362\0\u03c6\0\u43a7\0\u43ec\0\u4431"+
    "\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614\0\u4659"+
    "\0\u469e\0\u46e3\0\u4728\0\u03c6\0\u476d\0\u0f18\0\u47b2\0\u03c6"+
    "\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u4950\0\u4995\0\u49da"+
    "\0\u4a1f\0\u4a64\0\u4aa9\0\u4aee\0\u4b33\0\u4b78\0\u4bbd\0\u4c02"+
    "\0\u4c47\0\u4c8c\0\u4cd1\0\u4d16\0\u4d5b\0\u4da0\0\u4de5\0\u4e2a"+
    "\0\u4e6f\0\u4eb4\0\u4ef9\0\u4f3e\0\u4f83\0\u4fc8\0\u500d\0\u5052"+
    "\0\u5097\0\u50dc\0\u5121\0\u03c6\0\u5166\0\u51ab\0\u51f0\0\u5235"+
    "\0\u527a\0\u52bf\0\u5304\0\u5349\0\u538e\0\u53d3\0\u5418\0\u545d"+
    "\0\u54a2\0\u54e7\0\u552c\0\u5571\0\u55b6\0\u55fb\0\u5640\0\u5685"+
    "\0\u56ca\0\u570f\0\u5754\0\u5799\0\u57de\0\u5823\0\u5868\0\u58ad"+
    "\0\u58f2\0\u5937\0\u597c\0\u59c1\0\u5a06\0\u5a4b\0\u5a90\0\u5ad5"+
    "\0\u5b1a\0\u5b5f\0\u5ba4\0\u5be9\0\u5c2e\0\u5c73\0\u5cb8\0\u5cfd"+
    "\0\u5d42\0\u5d87\0\u5dcc\0\u5e11\0\u5e56\0\u5e9b\0\u5ee0\0\u5f25"+
    "\0\u5f6a\0\u5faf\0\u5ff4\0\u6039\0\u607e\0\u60c3\0\u6108\0\u614d"+
    "\0\u6192\0\u61d7\0\u621c\0\u6261\0\u62a6\0\u62eb\0\u6330\0\u6375"+
    "\0\u63ba\0\u63ff\0\u6444\0\u6489\0\u64ce\0\u6513\0\u6558\0\u659d"+
    "\0\u04da\0\u65e2\0\u6627\0\u666c\0\u66b1\0\u66f6\0\u673b\0\u6780"+
    "\0\u67c5\0\u680a\0\u684f\0\u6894\0\u68d9\0\u691e\0\u04da";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\1\17\1\21\2\22\1\23\6\24\1\25"+
    "\11\24\1\17\1\24\1\22\1\24\1\17\7\24\2\17"+
    "\1\24\1\17\2\24\3\17\25\24\2\17\1\22\1\17"+
    "\1\26\1\27\1\17\1\26\2\22\14\26\1\30\4\26"+
    "\1\31\1\26\1\22\1\26\1\32\46\26\1\17\1\22"+
    "\2\26\1\27\1\17\1\26\2\22\21\26\1\31\1\26"+
    "\1\22\1\26\1\33\46\26\1\17\1\22\2\26\1\27"+
    "\1\17\1\26\2\22\21\26\1\31\1\26\1\22\1\26"+
    "\1\34\46\26\1\17\1\22\2\26\1\27\1\17\1\26"+
    "\2\22\2\35\1\36\2\35\1\37\1\35\1\40\1\35"+
    "\1\41\1\35\1\42\1\35\1\43\1\35\1\37\1\35"+
    "\1\26\1\35\1\22\1\35\1\32\7\35\2\26\1\44"+
    "\1\45\2\35\1\46\2\26\25\35\1\47\1\17\1\22"+
    "\1\50\4\17\2\22\21\51\1\17\1\51\1\22\1\51"+
    "\1\32\7\51\2\17\1\51\1\52\2\51\1\46\2\17"+
    "\25\51\1\53\1\17\1\22\1\54\4\17\2\22\1\55"+
    "\2\17\1\56\1\17\1\57\1\17\1\60\1\17\1\61"+
    "\1\62\1\17\1\63\6\17\1\22\1\64\14\17\1\65"+
    "\2\17\1\66\1\67\20\17\1\70\4\17\1\71\1\17"+
    "\1\22\1\17\1\26\1\27\1\17\1\26\2\22\2\35"+
    "\1\72\2\35\1\73\1\35\1\74\1\35\1\75\1\35"+
    "\1\76\1\35\1\77\1\35\1\73\1\35\1\26\1\35"+
    "\1\22\1\35\1\33\7\35\2\26\1\100\1\45\2\35"+
    "\1\101\2\26\25\35\1\47\1\17\1\22\1\50\4\17"+
    "\2\22\1\102\20\103\1\17\1\103\1\22\1\103\1\33"+
    "\7\103\2\17\1\103\1\104\2\103\1\101\2\17\25\103"+
    "\1\105\1\17\1\22\1\106\4\17\2\22\3\17\1\107"+
    "\3\17\1\110\2\17\1\111\1\17\1\112\6\17\1\22"+
    "\20\17\1\113\1\67\25\17\1\71\1\17\1\22\1\17"+
    "\1\26\1\27\1\17\1\26\2\22\11\26\1\114\11\26"+
    "\1\22\1\26\1\115\15\26\1\116\27\26\1\47\1\17"+
    "\1\22\1\50\4\17\2\22\2\17\1\117\20\17\1\22"+
    "\1\17\1\120\47\17\1\22\5\17\2\22\2\17\1\117"+
    "\2\17\1\121\15\17\1\22\1\17\1\122\47\17\1\22"+
    "\5\17\2\22\1\123\13\17\1\124\6\17\1\22\20\17"+
    "\1\125\1\67\25\17\1\71\1\17\1\22\1\17\105\0"+
    "\2\20\1\0\2\20\1\0\77\20\3\0\1\126\107\0"+
    "\1\24\1\127\17\24\1\0\1\24\1\0\1\24\1\0"+
    "\7\24\2\0\1\24\1\0\2\24\3\0\25\24\12\0"+
    "\21\24\1\0\1\24\1\0\1\24\1\0\7\24\2\0"+
    "\1\24\1\0\2\24\3\0\25\24\12\0\15\24\1\130"+
    "\3\24\1\0\1\24\1\0\1\24\1\0\7\24\2\0"+
    "\1\24\1\0\2\24\3\0\25\24\4\0\2\27\1\0"+
    "\2\27\1\0\77\27\30\0\1\131\3\0\2\131\42\0"+
    "\1\131\12\0\21\35\1\0\1\35\1\0\1\35\1\0"+
    "\7\35\2\0\1\35\1\0\2\35\3\0\25\35\12\0"+
    "\21\35\1\0\1\35\1\0\1\35\1\0\7\35\1\132"+
    "\1\0\1\35\1\0\2\35\3\0\25\35\12\0\21\35"+
    "\1\0\1\35\1\0\1\35\1\0\2\44\5\35\2\0"+
    "\1\35\1\0\2\35\3\0\24\35\1\44\12\0\21\35"+
    "\1\0\1\35\1\0\1\35\1\0\7\35\1\133\1\0"+
    "\1\35\1\0\2\35\3\0\25\35\12\0\21\35\1\0"+
    "\1\35\1\0\1\35\1\0\7\35\1\134\1\0\1\35"+
    "\1\0\2\35\3\0\25\35\12\0\1\35\1\135\17\35"+
    "\1\0\1\35\1\0\1\35\1\0\2\35\1\136\4\35"+
    "\1\133\1\0\1\35\1\0\2\35\3\0\25\35\12\0"+
    "\21\35\1\0\1\35\1\0\1\35\1\0\1\35\1\44"+
    "\5\35\2\0\1\35\1\0\2\35\3\0\24\35\1\44"+
    "\12\0\21\137\1\0\1\137\1\0\1\137\1\0\7\137"+
    "\2\0\1\137\1\0\2\137\3\0\25\137\4\0\2\140"+
    "\1\0\2\140\1\0\73\140\1\141\2\0\1\140\6\0"+
    "\21\51\1\0\1\51\1\0\1\51\1\0\7\51\2\0"+
    "\1\51\1\0\2\51\3\0\25\51\12\0\21\142\1\0"+
    "\1\142\1\0\1\142\1\0\7\142\2\0\1\142\1\0"+
    "\2\142\3\0\25\142\4\0\2\143\1\0\2\143\1\0"+
    "\73\143\1\144\2\0\1\143\66\0\1\145\115\0\1\146"+
    "\67\0\1\147\76\0\1\150\67\0\1\151\105\0\1\152"+
    "\104\0\1\153\123\0\1\154\102\0\1\155\105\0\1\156"+
    "\34\0\21\157\1\0\1\157\1\0\1\157\1\0\7\157"+
    "\2\0\1\157\1\0\2\157\3\0\25\157\12\0\21\35"+
    "\1\0\1\35\1\0\1\35\1\0\7\35\1\160\1\0"+
    "\1\35\1\0\2\35\3\0\25\35\12\0\21\35\1\0"+
    "\1\35\1\0\1\35\1\0\2\100\5\35\2\0\1\35"+
    "\1\0\2\35\3\0\24\35\1\100\12\0\21\35\1\0"+
    "\1\35\1\0\1\35\1\0\7\35\1\161\1\0\1\35"+
    "\1\0\2\35\3\0\25\35\12\0\21\35\1\0\1\35"+
    "\1\0\1\35\1\0\7\35\1\162\1\0\1\35\1\0"+
    "\2\35\3\0\25\35\12\0\1\35\1\163\17\35\1\0"+
    "\1\35\1\0\1\35\1\0\2\35\1\164\4\35\1\161"+
    "\1\0\1\35\1\0\2\35\3\0\25\35\12\0\21\35"+
    "\1\0\1\35\1\0\1\35\1\0\1\35\1\100\5\35"+
    "\2\0\1\35\1\0\2\35\3\0\24\35\1\100\12\0"+
    "\3\103\1\165\15\103\1\0\1\103\1\0\1\103\1\0"+
    "\7\103\2\0\1\103\1\0\2\103\3\0\25\103\12\0"+
    "\21\103\1\0\1\103\1\0\1\103\1\0\7\103\2\0"+
    "\1\103\1\0\2\103\3\0\25\103\12\0\21\166\1\0"+
    "\1\166\1\0\1\166\1\0\7\166\2\0\1\166\1\0"+
    "\2\166\3\0\25\166\4\0\2\167\1\0\2\167\1\0"+
    "\73\167\1\170\2\0\1\167\77\0\1\171\61\0\1\172"+
    "\70\0\1\173\104\0\1\174\107\0\1\175\104\0\1\176"+
    "\55\0\1\177\156\0\1\200\56\0\1\201\44\0\2\126"+
    "\1\0\2\126\1\0\77\126\6\0\2\24\1\202\16\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\12\0\3\24\1\203\15\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\27\0\1\204\4\0\1\131"+
    "\3\0\2\131\42\0\1\131\34\0\1\205\3\0\2\205"+
    "\42\0\1\205\34\0\1\206\3\0\2\206\42\0\1\206"+
    "\34\0\1\207\3\0\2\207\42\0\1\207\12\0\1\35"+
    "\1\210\17\35\1\0\1\35\1\0\1\35\1\0\7\35"+
    "\2\0\1\35\1\0\2\35\3\0\25\35\12\0\21\35"+
    "\1\0\1\35\1\0\1\35\1\0\2\35\1\211\4\35"+
    "\2\0\1\35\1\0\2\35\3\0\25\35\12\0\21\137"+
    "\1\0\1\137\1\0\1\137\1\0\7\137\2\0\1\137"+
    "\1\212\2\137\3\0\25\137\12\0\21\142\1\0\1\142"+
    "\1\0\1\142\1\0\7\142\2\0\1\142\1\213\2\142"+
    "\3\0\25\142\44\0\1\214\104\0\1\215\56\0\1\216"+
    "\132\0\1\217\103\0\1\220\123\0\1\221\12\0\1\222"+
    "\55\0\1\223\16\0\1\224\64\0\1\225\125\0\1\226"+
    "\106\0\1\227\26\0\21\157\1\0\1\157\1\0\1\157"+
    "\1\0\7\157\2\0\1\157\1\0\2\157\3\0\25\157"+
    "\1\230\33\0\1\231\3\0\2\231\42\0\1\231\34\0"+
    "\1\232\3\0\2\232\42\0\1\232\34\0\1\233\3\0"+
    "\2\233\42\0\1\233\12\0\1\35\1\234\17\35\1\0"+
    "\1\35\1\0\1\35\1\0\7\35\2\0\1\35\1\0"+
    "\2\35\3\0\25\35\12\0\21\35\1\0\1\35\1\0"+
    "\1\35\1\0\2\35\1\235\4\35\2\0\1\35\1\0"+
    "\2\35\3\0\25\35\12\0\5\103\1\236\13\103\1\0"+
    "\1\103\1\0\1\103\1\0\7\103\2\0\1\103\1\0"+
    "\2\103\3\0\25\103\12\0\21\166\1\0\1\166\1\0"+
    "\1\166\1\0\7\166\2\0\1\166\1\237\2\166\3\0"+
    "\25\166\44\0\1\240\104\0\1\241\135\0\1\242\74\0"+
    "\1\243\53\0\1\244\3\0\2\244\42\0\1\244\34\0"+
    "\1\245\3\0\2\245\42\0\1\245\17\0\1\246\131\0"+
    "\1\247\125\0\1\250\31\0\2\24\1\251\16\24\1\0"+
    "\1\24\1\0\1\24\1\0\7\24\2\0\1\24\1\0"+
    "\2\24\3\0\25\24\12\0\5\24\1\252\13\24\1\0"+
    "\1\24\1\0\1\24\1\0\7\24\2\0\1\24\1\0"+
    "\2\24\3\0\25\24\34\0\1\253\3\0\2\253\42\0"+
    "\1\253\34\0\1\205\3\0\2\205\6\0\1\254\33\0"+
    "\1\205\34\0\1\206\3\0\2\206\6\0\1\255\33\0"+
    "\1\206\34\0\1\207\3\0\2\207\6\0\1\256\33\0"+
    "\1\207\12\0\2\35\1\257\16\35\1\0\1\35\1\0"+
    "\1\35\1\0\7\35\2\0\1\35\1\0\2\35\3\0"+
    "\25\35\12\0\21\35\1\0\1\35\1\0\1\35\1\0"+
    "\3\35\1\260\3\35\2\0\1\35\1\0\2\35\3\0"+
    "\25\35\65\0\1\261\65\0\1\262\102\0\1\263\121\0"+
    "\1\264\65\0\1\265\130\0\1\266\61\0\1\267\132\0"+
    "\1\270\101\0\1\271\113\0\1\272\54\0\1\273\65\0"+
    "\1\274\112\0\1\231\3\0\2\231\6\0\1\275\33\0"+
    "\1\231\34\0\1\232\3\0\2\232\6\0\1\276\33\0"+
    "\1\232\34\0\1\233\3\0\2\233\6\0\1\277\33\0"+
    "\1\233\12\0\2\35\1\300\16\35\1\0\1\35\1\0"+
    "\1\35\1\0\7\35\2\0\1\35\1\0\2\35\3\0"+
    "\25\35\12\0\21\35\1\0\1\35\1\0\1\35\1\0"+
    "\3\35\1\301\3\35\2\0\1\35\1\0\2\35\3\0"+
    "\25\35\12\0\21\103\1\0\1\103\1\0\1\103\1\0"+
    "\7\103\2\0\1\103\1\0\1\302\1\103\3\0\25\103"+
    "\46\0\1\303\117\0\1\304\66\0\1\305\127\0\1\306"+
    "\52\0\1\244\3\0\2\244\6\0\1\307\33\0\1\244"+
    "\34\0\1\245\3\0\2\245\6\0\1\310\33\0\1\245"+
    "\16\0\1\311\153\0\1\312\105\0\1\313\30\0\3\24"+
    "\1\314\15\24\1\0\1\24\1\0\1\24\1\0\7\24"+
    "\2\0\1\24\1\0\2\24\3\0\25\24\12\0\10\24"+
    "\1\315\10\24\1\0\1\24\1\0\1\24\1\0\7\24"+
    "\2\0\1\24\1\0\2\24\3\0\25\24\34\0\1\253"+
    "\1\316\2\0\2\253\42\0\1\253\12\0\3\35\1\317"+
    "\15\35\1\0\1\35\1\0\1\35\1\0\7\35\2\0"+
    "\1\35\1\0\2\35\3\0\25\35\12\0\21\35\1\0"+
    "\1\35\1\0\1\35\1\0\4\35\1\320\2\35\2\0"+
    "\1\35\1\0\2\35\3\0\25\35\76\0\1\321\76\0"+
    "\1\322\100\0\1\323\36\0\1\324\1\0\1\325\1\326"+
    "\6\0\1\327\153\0\1\330\51\0\1\331\105\0\1\332"+
    "\26\0\1\333\33\0\1\334\77\0\1\324\1\335\1\336"+
    "\1\337\102\0\1\340\166\0\1\341\47\0\1\342\52\0"+
    "\3\35\1\343\15\35\1\0\1\35\1\0\1\35\1\0"+
    "\7\35\2\0\1\35\1\0\2\35\3\0\25\35\12\0"+
    "\21\35\1\0\1\35\1\0\1\35\1\0\4\35\1\344"+
    "\2\35\2\0\1\35\1\0\2\35\3\0\25\35\70\0"+
    "\1\345\34\0\1\346\131\0\1\347\55\0\1\350\105\0"+
    "\1\351\163\0\1\352\25\0\1\353\77\0\1\354\20\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\12\0\14\24\1\355\4\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\36\0\1\356\60\0\11\35"+
    "\1\357\7\35\1\0\1\35\1\0\1\35\1\0\7\35"+
    "\2\0\1\35\1\0\2\35\3\0\25\35\12\0\21\35"+
    "\1\0\1\35\1\0\1\35\1\0\5\35\1\360\1\35"+
    "\2\0\1\35\1\0\2\35\3\0\25\35\23\0\1\361"+
    "\75\0\1\362\165\0\1\363\103\0\1\364\55\0\1\365"+
    "\104\0\1\366\121\0\1\367\66\0\1\370\140\0\1\371"+
    "\71\0\1\372\121\0\1\373\70\0\1\374\106\0\1\375"+
    "\61\0\1\376\104\0\1\377\105\0\1\374\101\0\1\u0100"+
    "\126\0\1\u0101\31\0\11\35\1\u0102\7\35\1\0\1\35"+
    "\1\0\1\35\1\0\7\35\2\0\1\35\1\0\2\35"+
    "\3\0\25\35\12\0\21\35\1\0\1\35\1\0\1\35"+
    "\1\0\5\35\1\u0103\1\35\2\0\1\35\1\0\2\35"+
    "\3\0\25\35\14\0\1\u0104\135\0\1\u0105\124\0\1\u0106"+
    "\113\0\1\u0107\33\0\1\u0108\104\0\1\u0109\151\0\1\u010a"+
    "\26\0\4\24\1\u010b\14\24\1\0\1\24\1\0\1\24"+
    "\1\0\7\24\2\0\1\24\1\0\2\24\3\0\25\24"+
    "\12\0\3\24\1\u010c\15\24\1\0\1\24\1\0\1\24"+
    "\1\0\7\24\2\0\1\24\1\0\2\24\3\0\25\24"+
    "\12\0\6\35\1\40\12\35\1\0\1\35\1\0\1\35"+
    "\1\0\7\35\2\0\1\35\1\0\2\35\3\0\25\35"+
    "\12\0\21\35\1\0\1\35\1\0\1\35\1\0\6\35"+
    "\1\40\2\0\1\35\1\0\2\35\3\0\25\35\65\0"+
    "\1\u010d\63\0\1\u010e\103\0\1\u010f\136\0\1\u0110\73\0"+
    "\1\u0111\63\0\1\u0112\106\0\1\u0113\130\0\1\u0114\76\0"+
    "\1\u0115\65\0\1\u0116\105\0\1\u0117\53\0\1\u0118\134\0"+
    "\1\u0119\124\0\1\u0110\63\0\1\u011a\105\0\1\u011b\126\0"+
    "\1\u011c\30\0\6\35\1\74\12\35\1\0\1\35\1\0"+
    "\1\35\1\0\7\35\2\0\1\35\1\0\2\35\3\0"+
    "\25\35\12\0\21\35\1\0\1\35\1\0\1\35\1\0"+
    "\6\35\1\74\2\0\1\35\1\0\2\35\3\0\25\35"+
    "\44\0\1\u011d\124\0\1\u011e\64\0\1\u011f\135\0\1\u011e"+
    "\23\0\1\u0120\155\0\1\u0121\63\0\1\u0122\52\0\5\24"+
    "\1\u0123\13\24\1\0\1\24\1\0\1\24\1\0\7\24"+
    "\2\0\1\24\1\0\2\24\3\0\25\24\12\0\1\u0124"+
    "\20\24\1\0\1\24\1\0\1\24\1\0\7\24\2\0"+
    "\1\24\1\0\2\24\3\0\25\24\76\0\1\u0125\111\0"+
    "\1\u0126\46\0\1\u0127\103\0\1\u0125\104\0\1\u0128\122\0"+
    "\1\u0110\65\0\1\u0129\67\0\1\u012a\120\0\1\u012b\61\0"+
    "\1\u012c\1\0\1\u012d\153\0\1\u012e\75\0\1\u012f\107\0"+
    "\1\u0130\102\0\1\u0131\113\0\1\u0125\37\0\1\u0132\163\0"+
    "\1\u0133\45\0\1\u0134\57\0\1\u0135\1\0\1\u0136\102\0"+
    "\1\u0137\163\0\1\u0138\72\0\1\u0139\32\0\1\24\1\u013a"+
    "\17\24\1\0\1\24\1\0\1\24\1\0\7\24\2\0"+
    "\1\24\1\0\2\24\3\0\25\24\12\0\14\24\1\u013b"+
    "\4\24\1\0\1\24\1\0\1\24\1\0\7\24\2\0"+
    "\1\24\1\0\2\24\3\0\25\24\44\0\1\u013c\130\0"+
    "\1\u0110\32\0\1\u013d\147\0\1\u013e\67\0\1\u013f\135\0"+
    "\1\u0140\77\0\1\u0141\74\0\1\u0142\111\0\1\u0143\105\0"+
    "\1\u0144\104\0\1\u0145\62\0\1\u0146\104\0\1\u0147\104\0"+
    "\1\u0148\130\0\1\u0149\70\0\1\u014a\116\0\1\u014b\30\0"+
    "\6\24\1\u014c\12\24\1\0\1\24\1\0\1\24\1\0"+
    "\7\24\2\0\1\24\1\0\2\24\3\0\25\24\12\0"+
    "\10\24\1\u014d\10\24\1\0\1\24\1\0\1\24\1\0"+
    "\7\24\2\0\1\24\1\0\2\24\3\0\25\24\43\0"+
    "\1\u014e\105\0\1\u014f\120\0\1\u0150\111\0\1\u0151\63\0"+
    "\1\u0152\104\0\1\u0153\104\0\1\u0154\132\0\1\u0125\102\0"+
    "\1\u0125\32\0\1\u0155\104\0\1\u0156\4\0\1\u0157\12\0"+
    "\1\u0158\143\0\1\u0159\52\0\1\u015a\105\0\1\u015b\55\0"+
    "\1\u015c\105\0\1\u015d\100\0\3\24\1\u015e\15\24\1\0"+
    "\1\24\1\0\1\24\1\0\7\24\2\0\1\24\1\0"+
    "\2\24\3\0\25\24\12\0\14\24\1\u015f\4\24\1\0"+
    "\1\24\1\0\1\24\1\0\7\24\2\0\1\24\1\0"+
    "\2\24\3\0\25\24\104\0\1\u0125\64\0\1\u0160\101\0"+
    "\1\u0161\111\0\1\u0162\101\0\1\u0163\105\0\1\u0164\101\0"+
    "\1\u0165\65\0\1\u0166\104\0\1\u0167\105\0\1\u0168\122\0"+
    "\1\u0169\66\0\1\u016a\145\0\1\u0134\64\0\1\u016b\62\0"+
    "\1\u016c\54\0\7\24\1\u016d\11\24\1\0\1\24\1\0"+
    "\1\24\1\0\7\24\2\0\1\24\1\0\2\24\3\0"+
    "\25\24\12\0\3\24\1\u016e\15\24\1\0\1\24\1\0"+
    "\1\24\1\0\7\24\2\0\1\24\1\0\2\24\3\0"+
    "\25\24\75\0\1\u016f\53\0\1\u0170\57\0\1\u0171\155\0"+
    "\1\u0172\102\0\1\u0125\36\0\1\336\76\0\1\u0173\113\0"+
    "\1\u0174\144\0\1\u0175\114\0\1\u0176\107\0\1\u0177\76\0"+
    "\1\u0134\30\0\1\u0178\104\0\3\24\1\u0179\15\24\1\0"+
    "\1\24\1\0\1\24\1\0\7\24\2\0\1\24\1\0"+
    "\2\24\3\0\25\24\12\0\16\24\1\u017a\2\24\1\0"+
    "\1\24\1\0\1\24\1\0\7\24\2\0\1\24\1\0"+
    "\2\24\3\0\25\24\43\0\1\u017b\124\0\1\u0125\111\0"+
    "\1\u017c\75\0\1\u017d\115\0\1\u017e\72\0\1\u017f\113\0"+
    "\1\u0180\105\0\1\u0143\32\0\1\u0181\160\0\1\u0182\24\0"+
    "\6\24\1\u0183\12\24\1\0\1\24\1\0\1\24\1\0"+
    "\7\24\2\0\1\24\1\0\2\24\3\0\25\24\12\0"+
    "\17\24\1\u0184\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\7\24\2\0\1\24\1\0\2\24\3\0\25\24\45\0"+
    "\1\u0185\103\0\1\u0186\104\0\1\u0187\104\0\1\361\104\0"+
    "\1\u0188\106\0\1\u0189\100\0\1\u018a\106\0\1\u0109\52\0"+
    "\4\24\1\u018b\14\24\1\0\1\24\1\0\1\24\1\0"+
    "\7\24\2\0\1\24\1\0\2\24\3\0\25\24\12\0"+
    "\3\24\1\u018c\15\24\1\0\1\24\1\0\1\24\1\0"+
    "\7\24\2\0\1\24\1\0\2\24\3\0\25\24\70\0"+
    "\1\u018d\100\0\1\u018e\106\0\1\u018f\77\0\1\u0190\107\0"+
    "\1\u0191\41\0\1\u0192\75\0\10\24\1\u0193\10\24\1\0"+
    "\1\24\1\0\1\24\1\0\7\24\2\0\1\24\1\0"+
    "\2\24\3\0\25\24\12\0\6\24\1\u0194\12\24\1\0"+
    "\1\24\1\0\1\24\1\0\7\24\2\0\1\24\1\0"+
    "\2\24\3\0\25\24\44\0\1\u0195\61\0\1\u0196\103\0"+
    "\1\u0197\102\0\1\u0198\132\0\1\u0199\120\0\1\u019a\36\0"+
    "\7\24\1\u019b\11\24\1\0\1\24\1\0\1\24\1\0"+
    "\7\24\2\0\1\24\1\0\2\24\3\0\25\24\12\0"+
    "\1\u019c\20\24\1\0\1\24\1\0\1\24\1\0\7\24"+
    "\2\0\1\24\1\0\2\24\3\0\25\24\20\0\1\u019d"+
    "\131\0\1\u019e\101\0\1\u019f\106\0\1\u01a0\106\0\1\u0144"+
    "\102\0\1\u01a1\52\0\11\24\1\u01a2\7\24\1\0\1\24"+
    "\1\0\1\24\1\0\7\24\2\0\1\24\1\0\2\24"+
    "\3\0\25\24\12\0\3\24\1\u01a3\15\24\1\0\1\24"+
    "\1\0\1\24\1\0\7\24\2\0\1\24\1\0\2\24"+
    "\3\0\25\24\45\0\1\u01a4\102\0\1\u01a5\64\0\1\u01a6"+
    "\154\0\1\u0144\72\0\1\u01a7\35\0\12\24\1\u01a8\6\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\12\0\14\24\1\u01a9\4\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\64\0\1\u01aa\102\0\1\u01aa"+
    "\105\0\1\u01ab\45\0\1\u01ac\72\0\5\24\1\u01ad\13\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\44\0\1\u0164\123\0\1\u01ae"+
    "\65\0\1\u01af\52\0\11\24\1\u01b0\7\24\1\0\1\24"+
    "\1\0\1\24\1\0\7\24\2\0\1\24\1\0\2\24"+
    "\3\0\25\24\45\0\1\u01b1\134\0\1\u01b2\21\0\13\24"+
    "\1\u01b3\5\24\1\0\1\24\1\0\1\24\1\0\7\24"+
    "\2\0\1\24\1\0\2\24\3\0\25\24\74\0\1\u0164"+
    "\53\0\1\u01b4\53\0\2\24\1\u01b5\16\24\1\0\1\24"+
    "\1\0\1\24\1\0\7\24\2\0\1\24\1\0\2\24"+
    "\3\0\25\24\74\0\1\u0125\22\0\3\24\1\u01b6\15\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\12\0\14\24\1\u01b7\4\24"+
    "\1\0\1\24\1\0\1\24\1\0\7\24\2\0\1\24"+
    "\1\0\2\24\3\0\25\24\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26979];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\1\11\2\1\1\11\3\1\1\11\2\1\4\11"+
    "\11\1\1\11\1\1\1\11\3\1\1\11\11\1\2\11"+
    "\11\1\1\11\4\1\1\11\4\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\3\1\4\0"+
    "\2\1\2\0\1\1\2\0\1\1\16\0\3\1\2\0"+
    "\1\1\11\0\2\1\4\0\2\1\2\11\14\0\1\11"+
    "\3\0\3\1\1\11\11\0\3\1\3\11\2\1\14\0"+
    "\3\11\3\1\4\0\2\11\3\0\2\1\1\0\2\1"+
    "\22\0\2\1\7\0\2\1\1\11\2\1\21\0\2\1"+
    "\7\0\2\1\26\0\2\1\1\11\2\0\1\1\13\0"+
    "\1\11\3\0\1\11\1\0\2\1\12\0\1\1\5\0"+
    "\2\1\16\0\1\11\1\0\2\1\15\0\2\1\12\0"+
    "\2\1\10\0\2\1\6\0\2\1\2\0\1\1\3\0"+
    "\2\1\6\0\2\1\5\0\2\1\4\0\2\1\3\0"+
    "\1\1\2\0\1\1\2\0\1\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[439];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  XCSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 49: break;
          case 2: 
            { yybegin(YYINITIAL); return XCSTypes.FUNCTION_COMMENT;
            } 
            // fall through
          case 50: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 51: break;
          case 4: 
            { yybegin(FUNCTION_HEADER); return XCSTypes.FUNCTION_NAME;
            } 
            // fall through
          case 52: break;
          case 5: 
            { yybegin(YYINITIAL); return XCSTypes.FUNCTION_END;
            } 
            // fall through
          case 53: break;
          case 6: 
            { return XCSTypes.FUNCTION_COMMENT;
            } 
            // fall through
          case 54: break;
          case 7: 
            { return XCSTypes.COLON;
            } 
            // fall through
          case 55: break;
          case 8: 
            { yybegin(CORE); return XCSTypes.CORE_START;
            } 
            // fall through
          case 56: break;
          case 9: 
            { yybegin(CE_CORE); return XCSTypes.CORE_START;
            } 
            // fall through
          case 57: break;
          case 10: 
            { yybegin(VSS_LIST_1); return XCSTypes.CORE_START;
            } 
            // fall through
          case 58: break;
          case 11: 
            { return XCSTypes.VARIABLE_VALUE;
            } 
            // fall through
          case 59: break;
          case 12: 
            { yybegin(NAME); return XCSTypes.LIST_TYPE;
            } 
            // fall through
          case 60: break;
          case 13: 
            { yybegin(NAME); return XCSTypes.VARIABLE_TYPE;
            } 
            // fall through
          case 61: break;
          case 14: 
            { yybegin(NAME); return XCSTypes.ASCII_TYPE;
            } 
            // fall through
          case 62: break;
          case 15: 
            { yybegin(PROPERTY); return XCSTypes.PROPERTY_START;
            } 
            // fall through
          case 63: break;
          case 16: 
            { return XCSTypes.CORE_END ;
            } 
            // fall through
          case 64: break;
          case 17: 
            { yybegin(CORE); return XCSTypes.VARIABLE_NAME;
            } 
            // fall through
          case 65: break;
          case 18: 
            { yybegin(CORE); return XCSTypes.CORE_END ;
            } 
            // fall through
          case 66: break;
          case 19: 
            { yybegin(CORE);return XCSTypes.PROPERTY_END;
            } 
            // fall through
          case 67: break;
          case 20: 
            { return XCSTypes.EQUALS;
            } 
            // fall through
          case 68: break;
          case 21: 
            { yybegin(CE_NAME); return XCSTypes.LIST_TYPE;
            } 
            // fall through
          case 69: break;
          case 22: 
            { yybegin(CE_NAME); return XCSTypes.VARIABLE_TYPE;
            } 
            // fall through
          case 70: break;
          case 23: 
            { yybegin(CE_NAME); return XCSTypes.ASCII_TYPE;
            } 
            // fall through
          case 71: break;
          case 24: 
            { yybegin(CE_PROPERTY); return XCSTypes.PROPERTY_START;
            } 
            // fall through
          case 72: break;
          case 25: 
            { yybegin(CE_CORE); return XCSTypes.VARIABLE_VALUE;
            } 
            // fall through
          case 73: break;
          case 26: 
            { yybegin(CE_CORE); return XCSTypes.CORE_END ;
            } 
            // fall through
          case 74: break;
          case 27: 
            { yybegin(CE_CORE);return XCSTypes.PROPERTY_END;
            } 
            // fall through
          case 75: break;
          case 28: 
            { return XCSTypes.ASCII_TYPE;
            } 
            // fall through
          case 76: break;
          case 29: 
            { return XCSTypes.CORE_START;
            } 
            // fall through
          case 77: break;
          case 30: 
            { yybegin(VSS_PROPERTY); return XCSTypes.PROPERTY_START;
            } 
            // fall through
          case 78: break;
          case 31: 
            { return XCSTypes.LIST_TYPE;
            } 
            // fall through
          case 79: break;
          case 32: 
            { yybegin(VSS_LIST_2); return XCSTypes.CORE_START;
            } 
            // fall through
          case 80: break;
          case 33: 
            { yybegin(VSS_CORE); return XCSTypes.CORE_START;
            } 
            // fall through
          case 81: break;
          case 34: 
            { yybegin(VSS_CORE);return XCSTypes.PROPERTY_END;
            } 
            // fall through
          case 82: break;
          case 35: 
            { yybegin(YYINITIAL); return XCSTypes.COMMENT;
            } 
            // fall through
          case 83: break;
          case 36: 
            { return XCSTypes.ASCII_VALUE;
            } 
            // fall through
          case 84: break;
          case 37: 
            { yybegin(CORE); return XCSTypes.ASCII_VALUE;
            } 
            // fall through
          case 85: break;
          case 38: 
            { yybegin(CE_CORE); return XCSTypes.ASCII_VALUE;
            } 
            // fall through
          case 86: break;
          case 39: 
            { yybegin(CORE); return XCSTypes.VARIABLE_VALUE;
            } 
            // fall through
          case 87: break;
          case 40: 
            { return XCSTypes.PROPERTY_VALUE;
            } 
            // fall through
          case 88: break;
          case 41: 
            { return XCSTypes.STREAM_FUNCTION;
            } 
            // fall through
          case 89: break;
          case 42: 
            { yybegin(CE_CORE); return XCSTypes.CEID;
            } 
            // fall through
          case 90: break;
          case 43: 
            { return XCSTypes.PROPERTY_NAME;
            } 
            // fall through
          case 91: break;
          case 44: 
            { return XCSTypes.PROPERTY_NAME_CE;
            } 
            // fall through
          case 92: break;
          case 45: 
            { return XCSTypes.PROPERTY_NAME_VSS;
            } 
            // fall through
          case 93: break;
          case 46: 
            { return XCSTypes.VFEI_CMD_ITEM_NAME;
            } 
            // fall through
          case 94: break;
          case 47: 
            { yybegin(VSS_HEADER); return XCSTypes.VFEI_SECS_SEQ;
            } 
            // fall through
          case 95: break;
          case 48: 
            { yybegin(CE_HEADER); return XCSTypes.COLLECTION_EVENT;
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
