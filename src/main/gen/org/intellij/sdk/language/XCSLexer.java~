/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.intellij.sdk.language.psi.XCSTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>XCS.flex</tt>
 */
class XCSLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int FUNCTION_HEADER = 2;
  public static final int CE_HEADER = 4;
  public static final int EC_HEADER = 6;
  public static final int VSS_HEADER = 8;
  public static final int CORE = 10;
  public static final int NAME = 12;
  public static final int PROPERTY = 14;
  public static final int CE_CORE = 16;
  public static final int CE_NAME = 18;
  public static final int CE_PROPERTY = 20;
  public static final int EC_CORE = 22;
  public static final int EC_NAME = 24;
  public static final int EC_PROPERTY = 26;
  public static final int VSS_CORE = 28;
  public static final int VSS_LIST_1 = 30;
  public static final int VSS_LIST_2 = 32;
  public static final int VSS_PROPERTY = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15680 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\1\40\2\13\1\41\2\13"+
    "\1\42\1\1\1\13\1\43\4\1\1\13\1\44\1\1\1\45\1\22\7\13\1\46\1\24\1\34\1\47\1"+
    "\35\1\50\1\51\1\52\1\46\1\16\1\53\1\47\1\35\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\22\1\35\1\62\1\63\1\64\1\46\1\65\1\66\1\47\1\35\1\62\1\67\1\70\1\46\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\57\1\1\1\100\1\101\1\35\1\102\1\103\1\104"+
    "\1\46\1\1\1\100\1\101\1\35\1\105\1\103\1\106\1\46\1\107\1\110\1\101\1\13\1"+
    "\37\1\111\1\112\1\46\1\113\1\114\1\115\1\13\1\116\1\117\1\120\1\57\1\121\1"+
    "\24\2\13\1\31\1\122\1\123\2\1\1\124\1\125\1\126\1\127\1\130\1\131\2\1\1\64"+
    "\1\132\1\123\1\133\1\134\1\13\1\135\1\24\1\136\1\134\1\13\1\135\1\137\3\1"+
    "\4\13\1\123\4\13\1\140\2\13\1\141\2\13\1\142\24\13\1\143\1\144\2\13\1\143"+
    "\2\13\1\145\1\146\1\14\3\13\1\146\3\13\1\37\2\1\1\13\1\1\5\13\1\147\1\24\45"+
    "\13\1\150\1\13\1\24\1\31\4\13\1\151\1\152\1\153\1\154\1\13\1\154\1\13\1\155"+
    "\1\153\1\156\5\13\1\157\1\123\1\1\1\160\1\123\5\13\1\26\2\13\1\31\4\13\1\60"+
    "\1\13\1\122\2\43\1\57\1\13\1\42\1\154\2\13\1\43\1\13\1\161\1\123\2\1\1\13"+
    "\1\43\3\13\1\122\1\13\1\150\2\123\1\162\1\122\4\1\4\13\1\43\1\123\1\163\1"+
    "\155\3\13\1\40\3\13\1\155\3\13\1\26\1\164\1\40\1\13\1\42\1\152\4\1\1\165\1"+
    "\13\1\166\17\13\1\167\21\13\1\147\2\13\1\147\1\170\1\13\1\42\3\13\1\171\1"+
    "\172\1\173\1\135\1\172\2\1\1\174\1\175\1\64\1\176\1\1\1\177\1\1\1\135\3\1"+
    "\2\13\1\64\1\200\1\201\1\202\1\203\1\204\1\1\2\13\1\152\62\1\1\205\2\13\1"+
    "\161\161\1\2\13\1\122\2\13\1\122\10\13\1\206\1\155\2\13\1\141\3\13\1\207\1"+
    "\175\1\13\1\210\4\211\2\13\2\1\1\175\35\1\1\212\1\1\1\24\1\213\1\24\4\13\1"+
    "\214\1\24\4\13\1\142\1\215\1\13\1\42\1\24\4\13\1\122\1\1\1\13\1\31\3\1\1\13"+
    "\40\1\133\13\1\60\4\1\135\13\1\60\2\1\10\13\1\135\4\1\2\13\1\42\20\13\1\135"+
    "\1\13\1\216\1\1\3\13\1\217\7\13\1\16\1\1\1\220\1\221\5\13\1\222\1\13\1\122"+
    "\1\26\3\1\1\220\2\13\1\26\1\1\3\13\1\155\4\13\1\60\1\123\1\13\1\223\1\40\1"+
    "\13\1\42\2\13\1\155\1\13\1\135\4\13\1\224\1\123\1\13\1\225\3\13\1\210\1\42"+
    "\1\123\1\13\1\115\4\13\1\32\1\160\1\13\1\226\1\227\1\230\1\211\2\13\1\142"+
    "\1\60\7\13\1\231\1\123\72\13\1\155\1\13\1\232\2\13\1\43\20\1\26\13\1\42\6"+
    "\13\1\161\2\1\1\210\1\233\1\35\1\234\1\235\6\13\1\16\1\1\1\236\25\13\1\42"+
    "\1\1\4\13\1\221\2\13\1\26\2\1\1\43\1\13\1\1\1\13\1\237\1\240\2\1\1\136\7\13"+
    "\1\135\1\1\1\123\1\24\1\241\1\24\1\31\1\205\4\13\1\122\1\242\1\243\2\1\1\244"+
    "\1\13\1\14\1\245\2\42\2\1\7\13\1\31\4\1\3\13\1\154\7\1\1\246\10\1\1\13\1\135"+
    "\3\13\2\64\1\1\2\13\1\1\1\13\1\31\2\13\1\31\1\13\1\42\2\13\1\247\1\250\2\1"+
    "\11\13\1\42\1\123\2\13\1\247\1\13\1\43\2\13\1\26\3\13\1\155\11\1\23\13\1\210"+
    "\1\13\1\60\1\26\11\1\1\251\2\13\1\252\1\13\1\60\1\13\1\210\1\13\1\122\4\1"+
    "\1\13\1\253\1\13\1\60\1\13\1\161\4\1\3\13\1\254\4\1\1\255\1\256\1\13\1\257"+
    "\2\1\1\13\1\135\1\13\1\135\2\1\1\134\1\13\1\210\1\1\3\13\1\60\1\13\1\60\1"+
    "\13\1\32\1\13\1\16\6\1\4\13\1\152\3\1\3\13\1\32\3\13\1\32\60\1\4\13\1\210"+
    "\1\1\1\57\1\175\3\13\1\31\1\1\1\13\1\152\1\123\3\13\1\260\1\1\2\13\1\261\4"+
    "\13\1\262\1\263\2\1\1\13\1\22\1\13\1\264\4\1\1\265\1\27\1\152\3\13\1\31\1"+
    "\123\1\34\1\47\1\35\1\62\1\67\1\266\1\267\1\154\10\1\4\13\1\31\1\123\2\1\4"+
    "\13\1\270\1\123\12\1\3\13\1\271\1\64\1\272\2\1\4\13\1\273\1\123\2\1\3\13\1"+
    "\26\1\123\3\1\1\13\1\102\1\43\1\123\26\1\4\13\1\123\1\175\34\1\3\13\1\152"+
    "\20\1\1\35\2\13\1\14\1\64\1\123\1\1\1\221\1\13\1\221\1\134\1\210\64\1\71\13"+
    "\1\161\6\1\6\13\1\122\1\1\14\13\1\155\53\1\2\13\1\122\75\1\44\13\1\210\33"+
    "\1\43\13\1\152\1\13\1\122\1\123\6\1\1\13\1\42\1\154\3\13\1\210\1\155\1\123"+
    "\1\236\1\274\1\13\67\1\4\13\1\154\2\13\1\122\1\175\1\13\4\1\1\64\1\1\76\13"+
    "\1\135\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1\31\1\135\1\152\1\275\114\1\1\276"+
    "\1\277\1\300\1\1\1\301\11\1\1\302\33\1\5\13\1\136\3\13\1\153\1\303\1\304\1"+
    "\305\3\13\1\306\1\307\1\13\1\310\1\311\1\101\24\13\1\271\1\13\1\101\1\142"+
    "\1\13\1\142\1\13\1\136\1\13\1\136\1\122\1\13\1\122\1\13\1\35\1\13\1\35\1\13"+
    "\1\312\3\313\40\1\3\13\1\232\2\13\1\135\1\314\1\176\1\163\1\24\25\1\1\14\1"+
    "\222\1\315\75\1\14\13\1\154\1\210\2\1\4\13\1\31\1\123\112\1\1\305\1\13\1\316"+
    "\1\317\1\320\1\321\1\322\1\323\1\324\1\43\1\325\1\43\47\1\1\13\1\161\1\13"+
    "\1\161\1\13\1\161\47\1\55\13\1\210\2\1\103\13\1\154\15\13\1\42\150\13\1\16"+
    "\25\1\41\13\1\42\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3424 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\5\1\103\1\104\1\2\22\0\1\33\1\0\1\102\4\0\1\50\2\0\1\1\2\0\1\51"+
    "\1\0\1\3\1\32\2\36\1\32\1\37\3\32\1\101\1\32\1\31\1\0\1\35\1\56\1\105\2\0"+
    "\1\17\1\21\1\6\1\52\1\11\1\27\2\30\1\13\1\47\1\30\1\10\1\26\1\14\1\7\1\25"+
    "\1\23\1\20\1\22\1\12\1\24\1\15\1\34\2\30\1\53\1\45\1\0\1\46\1\0\1\16\1\0\1"+
    "\43\1\77\1\64\1\70\1\42\1\57\1\66\1\71\1\60\1\30\1\75\1\41\1\63\1\44\1\40"+
    "\1\74\1\30\1\62\1\65\1\67\1\61\1\100\1\76\1\72\1\73\1\30\1\54\1\0\1\55\7\0"+
    "\1\103\24\0\1\30\12\0\1\30\4\0\1\30\5\0\27\30\1\0\12\30\4\0\14\30\16\0\5\30"+
    "\7\0\1\30\1\0\1\30\1\0\5\30\1\0\2\30\2\0\4\30\1\0\1\30\6\0\1\30\1\0\3\30\1"+
    "\0\1\30\1\0\4\30\1\0\23\30\1\0\11\30\1\0\26\30\2\0\1\30\6\0\10\30\10\0\16"+
    "\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0\1\30\10\0\13\30\5\0\3\30\15\0\12\32\4\0"+
    "\6\30\1\0\10\30\2\0\12\30\1\0\6\30\12\32\3\30\2\0\14\30\2\0\3\30\12\32\14"+
    "\30\4\0\1\30\5\0\16\30\2\0\14\30\4\0\5\30\1\0\10\30\6\0\20\30\2\0\12\32\1"+
    "\30\2\0\16\30\1\0\1\30\3\0\4\30\2\0\11\30\2\0\2\30\2\0\4\30\10\0\1\30\4\0"+
    "\2\30\1\0\1\30\1\0\3\30\1\0\6\30\4\0\2\30\1\0\2\30\1\0\2\30\1\0\2\30\2\0\1"+
    "\30\1\0\5\30\4\0\2\30\2\0\3\30\3\0\1\30\7\0\4\30\1\0\1\30\7\0\12\32\6\30\13"+
    "\0\3\30\1\0\11\30\1\0\2\30\1\0\2\30\1\0\5\30\2\0\12\30\1\0\3\30\1\0\3\30\2"+
    "\0\1\30\30\0\1\30\7\0\3\30\1\0\10\30\2\0\6\30\2\0\2\30\2\0\3\30\10\0\2\30"+
    "\4\0\2\30\1\0\1\30\1\0\1\30\20\0\2\30\1\0\6\30\3\0\3\30\1\0\4\30\3\0\2\30"+
    "\1\0\1\30\1\0\2\30\3\0\2\30\3\0\3\30\3\0\14\30\4\0\5\30\3\0\3\30\1\0\4\30"+
    "\2\0\1\30\6\0\1\30\10\0\4\30\1\0\10\30\1\0\3\30\1\0\30\30\3\0\10\30\1\0\3"+
    "\30\1\0\4\30\7\0\2\30\1\0\3\30\5\0\4\30\1\0\5\30\2\0\4\30\5\0\2\30\7\0\1\30"+
    "\2\0\2\30\16\0\3\30\1\0\10\30\1\0\7\30\1\0\3\30\1\0\5\30\5\0\4\30\7\0\1\30"+
    "\12\0\6\30\2\0\2\30\1\0\22\30\3\0\10\30\1\0\11\30\1\0\1\30\2\0\7\30\3\0\1"+
    "\30\4\0\6\30\1\0\1\30\1\0\10\30\2\0\2\30\14\0\17\30\1\0\12\32\7\0\2\30\1\0"+
    "\1\30\2\0\2\30\1\0\1\30\2\0\1\30\6\0\4\30\1\0\7\30\1\0\3\30\1\0\1\30\1\0\1"+
    "\30\2\0\2\30\1\0\15\30\1\0\3\30\2\0\5\30\1\0\1\30\1\0\6\30\2\0\12\32\2\0\4"+
    "\30\10\0\2\30\13\0\1\30\1\0\1\30\1\0\1\30\4\0\12\30\1\0\24\30\3\0\5\30\1\0"+
    "\12\30\6\0\1\30\11\0\12\32\4\30\2\0\6\30\1\0\1\30\5\0\1\30\2\0\13\30\1\0\15"+
    "\30\1\0\4\30\2\0\7\30\1\0\1\30\1\0\4\30\2\0\1\30\1\0\4\30\2\0\7\30\1\0\1\30"+
    "\1\0\4\30\2\0\16\30\2\0\6\30\2\0\15\30\2\0\14\30\3\0\13\30\7\0\15\30\1\0\7"+
    "\30\13\0\4\30\14\0\1\30\1\0\2\30\14\0\4\30\3\0\1\30\4\0\2\30\15\0\3\30\2\0"+
    "\12\30\15\0\1\30\23\0\5\30\12\32\3\0\6\30\1\0\23\30\1\0\2\30\6\0\6\30\5\0"+
    "\15\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0\6\30\1\0\7\30\1\0\1\30\3\0\3\30\1\0"+
    "\7\30\3\0\4\30\2\0\6\30\14\0\2\103\25\0\1\30\4\0\1\30\14\0\1\30\15\0\1\30"+
    "\2\0\1\30\4\0\1\30\2\0\12\30\1\0\1\30\3\0\5\30\6\0\1\30\1\0\1\30\1\0\1\30"+
    "\1\0\4\30\1\0\13\30\2\0\4\30\5\0\5\30\4\0\1\30\7\0\17\30\6\0\15\30\7\0\10"+
    "\30\11\0\7\30\1\0\7\30\6\0\3\30\11\0\5\30\2\0\5\30\3\0\7\30\2\0\2\30\2\0\3"+
    "\30\5\0\13\30\12\32\2\30\4\0\3\30\1\0\12\30\1\0\1\30\7\0\11\30\2\0\27\30\2"+
    "\0\15\30\3\0\1\30\1\0\1\30\2\0\1\30\16\0\1\30\12\32\5\30\3\0\5\30\12\0\6\30"+
    "\2\0\6\30\2\0\6\30\11\0\13\30\1\0\2\30\2\0\7\30\4\0\5\30\3\0\5\30\5\0\12\30"+
    "\1\0\5\30\1\0\1\30\1\0\2\30\1\0\2\30\1\0\12\30\3\0\15\30\3\0\2\30\30\0\16"+
    "\30\4\0\1\30\2\0\6\30\2\0\6\30\2\0\6\30\2\0\3\30\3\0\14\30\1\0\16\30\1\0\2"+
    "\30\1\0\1\30\15\0\1\30\2\0\4\30\4\0\10\30\1\0\5\30\12\0\6\30\2\0\1\30\1\0"+
    "\14\30\1\0\2\30\3\0\1\30\2\0\4\30\1\0\2\30\12\0\10\30\6\0\6\30\1\0\2\30\5"+
    "\0\10\30\1\0\3\30\1\0\13\30\4\0\3\30\4\0\6\30\1\0\12\32\4\30\2\0\1\30\11\0"+
    "\5\30\5\0\3\30\3\0\12\32\1\30\1\0\1\30\3\0\10\30\6\0\1\30\1\0\7\30\1\0\1\30"+
    "\1\0\4\30\1\0\2\30\6\0\1\30\5\0\7\30\2\0\7\30\3\0\6\30\1\0\1\30\10\0\6\30"+
    "\2\0\10\30\10\0\6\30\2\0\1\30\3\0\1\30\13\0\10\30\5\0\15\30\3\0\2\30\6\0\5"+
    "\30\3\0\6\30\10\0\10\30\2\0\7\30\16\0\4\30\4\0\3\30\15\0\1\30\2\0\2\30\2\0"+
    "\4\30\1\0\14\30\1\0\1\30\1\0\7\30\1\0\21\30\1\0\4\30\2\0\10\30\1\0\7\30\1"+
    "\0\14\30\1\0\4\30\1\0\5\30\1\0\1\30\3\0\11\30\1\0\10\30\2\0\22\32\5\0\1\30"+
    "\12\0\2\30\1\0\2\30\1\0\5\30\6\0\2\30\1\0\1\30\2\0\1\30\1\0\12\30\1\0\4\30"+
    "\1\0\1\30\1\0\1\30\6\0\1\30\4\0\1\30\1\0\1\30\1\0\1\30\1\0\3\30\1\0\2\30\1"+
    "\0\1\30\2\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0\1\30\1\0\2\30\1\0\1\30\2\0"+
    "\4\30\1\0\7\30\1\0\4\30\1\0\4\30\1\0\1\30\1\0\12\30\1\0\5\30\1\0\3\30\1\0"+
    "\5\30\1\0\5\30");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\1\1\1\2\1\1\1\3\4\4\1\5\1\6"+
    "\1\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\14\1\16\1\17\1\16\1\14\1\16\2\5\1\20"+
    "\1\5\1\21\1\22\3\1\1\23\12\1\1\24\1\25"+
    "\1\1\1\26\1\14\1\27\1\30\1\27\1\14\1\31"+
    "\1\27\1\32\2\33\3\1\1\34\4\1\1\35\1\36"+
    "\1\14\1\37\1\40\1\37\1\14\1\37\1\41\2\42"+
    "\3\1\1\43\4\1\1\44\1\45\1\46\1\47\1\50"+
    "\1\1\1\51\2\1\1\52\1\53\3\4\4\0\2\14"+
    "\2\0\1\54\1\0\1\55\1\0\1\56\16\0\2\14"+
    "\1\33\2\0\1\57\7\0\2\14\1\42\2\0\1\60"+
    "\11\0\3\4\4\0\3\14\1\55\14\0\1\61\3\0"+
    "\2\14\2\33\7\0\2\14\2\42\11\0\3\4\1\62"+
    "\1\15\1\16\1\17\2\14\14\0\1\26\1\27\1\30"+
    "\2\14\1\63\4\0\1\36\1\37\1\40\2\14\1\64"+
    "\4\0\1\45\1\47\3\0\3\4\1\0\2\14\22\0"+
    "\2\14\4\0\2\14\7\0\3\4\1\62\2\14\21\0"+
    "\2\14\4\0\2\14\7\0\3\4\30\0\3\4\1\65"+
    "\2\0\1\65\13\0\1\66\2\0\1\67\2\0\1\70"+
    "\1\0\3\4\12\0\1\65\6\0\3\4\17\0\1\71"+
    "\1\0\3\4\15\0\3\4\12\0\3\4\10\0\3\4"+
    "\6\0\3\4\2\0\1\65\3\0\3\4\6\0\3\4"+
    "\5\0\1\4\1\72\1\4\4\0\1\4\1\73\3\0"+
    "\1\4\2\0\1\4\2\0\1\4\1\0\2\4\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u04ec\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u04ec\0\u06d6\0\u071c\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0"+
    "\0\u0906\0\u0762\0\u094c\0\u0762\0\u04ec\0\u0992\0\u04ec\0\u09d8"+
    "\0\u0a1e\0\u0a64\0\u0aaa\0\u04ec\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2"+
    "\0\u0c08\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u04ec\0\u04ec"+
    "\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u04ec"+
    "\0\u0762\0\u04ec\0\u0f96\0\u0fdc\0\u1022\0\u0fdc\0\u1068\0\u04ec"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u04ec\0\u11c6\0\u120c\0\u1252"+
    "\0\u1298\0\u12de\0\u1324\0\u0762\0\u04ec\0\u136a\0\u13b0\0\u13f6"+
    "\0\u136a\0\u143c\0\u04ec\0\u1482\0\u14c8\0\u150e\0\u1554\0\u04ec"+
    "\0\u159a\0\u04ec\0\u15e0\0\u04ec\0\u1626\0\u04ec\0\u166c\0\u16b2"+
    "\0\u04ec\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u0992\0\u0992\0\u19fa\0\u0a64"+
    "\0\u0aaa\0\u0aaa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1068\0\u1068\0\u1f2c\0\u1f72"+
    "\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2"+
    "\0\u21e8\0\u143c\0\u143c\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u04ec\0\u04ec\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u04ec\0\u2a62\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u04ec\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u04ec\0\u2ec2\0\u2f08"+
    "\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2\0\u3138"+
    "\0\u317e\0\u31c4\0\u320a\0\u04ec\0\u04ec\0\u04ec\0\u3250\0\u3296"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u04ec\0\u04ec\0\u04ec\0\u3624"+
    "\0\u366a\0\u0fdc\0\u36b0\0\u36f6\0\u373c\0\u3782\0\u04ec\0\u04ec"+
    "\0\u04ec\0\u37c8\0\u380e\0\u136a\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u04ec\0\u04ec\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca"+
    "\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa"+
    "\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a"+
    "\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a"+
    "\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u44e8\0\u452e\0\u4574\0\u04ec"+
    "\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e\0\u47a4"+
    "\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948\0\u498e\0\u49d4"+
    "\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04"+
    "\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34"+
    "\0\u4e7a\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294"+
    "\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4"+
    "\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae\0\u56f4"+
    "\0\u04ec\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898\0\u58de"+
    "\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8\0\u04ec"+
    "\0\u5b0e\0\u10f4\0\u04ec\0\u5b54\0\u5b9a\0\u04ec\0\u5be0\0\u5c26"+
    "\0\u5c6c\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56"+
    "\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040\0\u6086"+
    "\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270\0\u62b6"+
    "\0\u62fc\0\u6342\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u64e6"+
    "\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644\0\u04ec\0\u668a\0\u66d0"+
    "\0\u6716\0\u675c\0\u67a2\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900"+
    "\0\u6946\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea\0\u6b30"+
    "\0\u6b76\0\u6bbc\0\u6c02\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a\0\u6d60"+
    "\0\u6da6\0\u6dec\0\u6e32\0\u6e78\0\u6ebe\0\u6f04\0\u6f4a\0\u6f90"+
    "\0\u6fd6\0\u701c\0\u7062\0\u70a8\0\u70ee\0\u7134\0\u717a\0\u71c0"+
    "\0\u7206\0\u724c\0\u7292\0\u72d8\0\u731e\0\u7364\0\u73aa\0\u73f0"+
    "\0\u7436\0\u747c\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da\0\u7620"+
    "\0\u7666\0\u76ac\0\u76f2\0\u7738\0\u777e\0\u77c4\0\u780a\0\u7850"+
    "\0\u7896\0\u78dc\0\u7922\0\u7968\0\u79ae\0\u79f4\0\u7a3a\0\u7a80"+
    "\0\u7ac6\0\u7b0c\0\u7b52\0\u0604\0\u7b98\0\u7bde\0\u7c24\0\u7c6a"+
    "\0\u7cb0\0\u7cf6\0\u0604\0\u7d3c\0\u7d82\0\u7dc8\0\u7e0e\0\u7e54"+
    "\0\u7e9a\0\u7ee0\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e\0\u8084"+
    "\0\u0604";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\23\1\24\1\23\1\25\2\26\1\27\2\30\1\31"+
    "\3\30\1\32\13\30\1\23\1\30\1\26\1\30\1\23"+
    "\7\30\2\23\1\30\2\23\2\30\3\23\23\30\2\23"+
    "\1\26\1\23\1\33\1\34\1\23\1\33\2\26\14\33"+
    "\1\35\6\33\1\36\1\33\1\26\1\33\1\37\45\33"+
    "\1\23\1\26\2\33\1\34\1\23\1\33\2\26\23\33"+
    "\1\36\1\33\1\26\1\33\1\40\45\33\1\23\1\26"+
    "\2\33\1\34\1\23\1\33\2\26\23\33\1\36\1\33"+
    "\1\26\1\33\1\41\45\33\1\23\1\26\2\33\1\34"+
    "\1\23\1\33\2\26\23\33\1\36\1\33\1\26\1\33"+
    "\1\42\45\33\1\23\1\26\2\33\1\34\1\23\1\33"+
    "\2\26\2\43\1\44\2\43\1\45\1\43\1\46\1\43"+
    "\1\47\1\43\1\50\2\43\1\45\2\43\1\51\1\43"+
    "\1\33\1\43\1\26\1\43\1\37\7\43\2\33\1\52"+
    "\1\53\1\54\2\43\1\55\2\33\23\43\1\56\1\23"+
    "\1\26\1\57\4\23\2\26\23\60\1\23\1\60\1\26"+
    "\1\60\1\37\7\60\2\23\1\60\1\61\1\62\2\60"+
    "\1\55\2\23\23\60\1\63\1\23\1\26\1\64\4\23"+
    "\2\26\1\65\2\23\1\66\1\23\1\67\1\23\1\70"+
    "\1\23\1\71\1\72\1\23\1\73\2\23\1\74\5\23"+
    "\1\26\1\75\15\23\1\76\2\23\1\77\1\100\23\23"+
    "\1\101\1\23\1\26\1\23\1\33\1\34\1\23\1\33"+
    "\2\26\2\43\1\102\2\43\1\103\1\43\1\104\1\43"+
    "\1\105\1\43\1\106\2\43\1\103\2\43\1\107\1\43"+
    "\1\33\1\43\1\26\1\43\1\110\7\43\2\33\1\111"+
    "\1\53\1\54\2\43\1\112\2\33\23\43\1\56\1\23"+
    "\1\26\1\57\4\23\2\26\1\113\22\114\1\23\1\114"+
    "\1\26\1\114\1\40\7\114\2\23\1\114\1\115\1\116"+
    "\2\114\1\112\2\23\23\114\1\117\1\23\1\26\1\120"+
    "\4\23\2\26\3\23\1\121\3\23\1\122\2\23\1\123"+
    "\1\23\1\124\10\23\1\26\21\23\1\125\1\100\23\23"+
    "\1\101\1\23\1\26\1\23\1\33\1\34\1\23\1\33"+
    "\2\26\2\43\1\126\2\43\1\127\1\43\1\130\1\43"+
    "\1\131\1\43\1\132\2\43\1\127\2\43\1\133\1\43"+
    "\1\33\1\43\1\26\1\43\1\110\7\43\2\33\1\134"+
    "\1\53\1\54\2\43\1\135\2\33\23\43\1\56\1\23"+
    "\1\26\1\57\4\23\2\26\3\136\1\137\17\136\1\23"+
    "\1\136\1\26\1\136\1\41\7\136\2\23\1\136\1\140"+
    "\1\141\2\136\1\135\2\23\23\136\1\142\1\23\1\26"+
    "\1\143\4\23\2\26\7\23\1\144\4\23\1\145\3\23"+
    "\1\146\4\23\1\26\16\23\1\147\2\23\1\150\1\100"+
    "\23\23\1\101\1\23\1\26\1\23\1\33\1\34\1\23"+
    "\1\33\2\26\11\33\1\151\13\33\1\26\1\33\1\110"+
    "\16\33\1\152\25\33\1\56\1\23\1\26\1\57\4\23"+
    "\2\26\2\23\1\153\22\23\1\26\1\23\1\154\46\23"+
    "\1\26\5\23\2\26\2\23\1\153\2\23\1\155\17\23"+
    "\1\26\1\23\1\156\46\23\1\26\5\23\2\26\1\157"+
    "\13\23\1\160\10\23\1\26\21\23\1\161\1\100\23\23"+
    "\1\101\1\23\1\26\1\23\106\0\2\24\1\0\2\24"+
    "\1\0\100\24\3\0\1\162\110\0\1\30\1\163\21\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\23\30\1\0\1\30"+
    "\1\0\1\30\1\0\7\30\2\0\1\30\2\0\2\30"+
    "\3\0\23\30\12\0\15\30\1\164\5\30\1\0\1\30"+
    "\1\0\1\30\1\0\7\30\2\0\1\30\2\0\2\30"+
    "\3\0\23\30\12\0\21\30\1\165\1\30\1\0\1\30"+
    "\1\0\1\30\1\0\7\30\2\0\1\30\2\0\2\30"+
    "\3\0\23\30\4\0\2\34\1\0\2\34\1\0\100\34"+
    "\32\0\1\166\3\0\2\166\41\0\1\166\12\0\23\43"+
    "\1\0\1\43\1\0\1\43\1\0\7\43\2\0\1\43"+
    "\2\0\2\43\3\0\23\43\12\0\23\43\1\0\1\43"+
    "\1\0\1\43\1\0\7\43\1\167\1\0\1\43\2\0"+
    "\2\43\3\0\23\43\12\0\23\43\1\0\1\43\1\0"+
    "\1\43\1\0\2\52\5\43\2\0\1\43\2\0\2\43"+
    "\3\0\22\43\1\52\12\0\23\43\1\0\1\43\1\0"+
    "\1\43\1\0\7\43\1\170\1\0\1\43\2\0\2\43"+
    "\3\0\23\43\12\0\23\43\1\0\1\43\1\0\1\43"+
    "\1\0\7\43\1\171\1\0\1\43\2\0\2\43\3\0"+
    "\23\43\12\0\1\43\1\172\21\43\1\0\1\43\1\0"+
    "\1\43\1\0\2\43\1\173\4\43\1\170\1\0\1\43"+
    "\2\0\2\43\3\0\23\43\12\0\23\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\52\5\43\2\0\1\43"+
    "\2\0\2\43\3\0\22\43\1\52\12\0\23\174\1\0"+
    "\1\174\1\0\1\174\1\0\7\174\2\0\1\174\2\0"+
    "\2\174\3\0\23\174\4\0\2\175\1\0\2\175\1\0"+
    "\74\175\1\176\2\0\1\175\6\0\23\60\1\0\1\60"+
    "\1\0\1\60\1\0\7\60\2\0\1\60\2\0\2\60"+
    "\3\0\23\60\12\0\23\177\1\0\1\177\1\0\1\177"+
    "\1\0\7\177\2\0\1\177\2\0\2\177\3\0\23\177"+
    "\12\0\23\200\1\0\1\200\1\0\1\200\1\0\7\200"+
    "\2\0\1\200\2\0\2\200\3\0\23\200\4\0\2\201"+
    "\1\0\2\201\1\0\74\201\1\202\2\0\1\201\71\0"+
    "\1\203\114\0\1\204\72\0\1\205\77\0\1\206\67\0"+
    "\1\207\106\0\1\210\105\0\1\211\124\0\1\212\106\0"+
    "\1\213\103\0\1\214\33\0\23\215\1\0\1\215\1\0"+
    "\1\215\1\0\7\215\2\0\1\215\2\0\2\215\3\0"+
    "\23\215\12\0\23\43\1\0\1\43\1\0\1\43\1\0"+
    "\7\43\1\216\1\0\1\43\2\0\2\43\3\0\23\43"+
    "\12\0\23\43\1\0\1\43\1\0\1\43\1\0\2\111"+
    "\5\43\2\0\1\43\2\0\2\43\3\0\22\43\1\111"+
    "\12\0\23\43\1\0\1\43\1\0\1\43\1\0\7\43"+
    "\1\217\1\0\1\43\2\0\2\43\3\0\23\43\12\0"+
    "\23\43\1\0\1\43\1\0\1\43\1\0\7\43\1\220"+
    "\1\0\1\43\2\0\2\43\3\0\23\43\12\0\1\43"+
    "\1\221\21\43\1\0\1\43\1\0\1\43\1\0\2\43"+
    "\1\222\4\43\1\217\1\0\1\43\2\0\2\43\3\0"+
    "\23\43\12\0\23\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\111\5\43\2\0\1\43\2\0\2\43\3\0"+
    "\22\43\1\111\12\0\3\114\1\223\17\114\1\0\1\114"+
    "\1\0\1\114\1\0\7\114\2\0\1\114\2\0\2\114"+
    "\3\0\23\114\12\0\23\114\1\0\1\114\1\0\1\114"+
    "\1\0\7\114\2\0\1\114\2\0\2\114\3\0\23\114"+
    "\12\0\23\224\1\0\1\224\1\0\1\224\1\0\7\224"+
    "\2\0\1\224\2\0\2\224\3\0\23\224\4\0\2\225"+
    "\1\0\2\225\1\0\74\225\1\226\2\0\1\225\100\0"+
    "\1\227\64\0\1\230\70\0\1\231\105\0\1\232\51\0"+
    "\23\43\1\0\1\43\1\0\1\43\1\0\7\43\1\233"+
    "\1\0\1\43\2\0\2\43\3\0\23\43\12\0\23\43"+
    "\1\0\1\43\1\0\1\43\1\0\2\134\5\43\2\0"+
    "\1\43\2\0\2\43\3\0\22\43\1\134\12\0\23\43"+
    "\1\0\1\43\1\0\1\43\1\0\7\43\1\234\1\0"+
    "\1\43\2\0\2\43\3\0\23\43\12\0\23\43\1\0"+
    "\1\43\1\0\1\43\1\0\7\43\1\235\1\0\1\43"+
    "\2\0\2\43\3\0\23\43\12\0\1\43\1\236\21\43"+
    "\1\0\1\43\1\0\1\43\1\0\2\43\1\237\4\43"+
    "\1\234\1\0\1\43\2\0\2\43\3\0\23\43\12\0"+
    "\23\43\1\0\1\43\1\0\1\43\1\0\1\43\1\134"+
    "\5\43\2\0\1\43\2\0\2\43\3\0\22\43\1\134"+
    "\12\0\23\136\1\0\1\136\1\0\1\136\1\0\7\136"+
    "\2\0\1\136\2\0\2\136\3\0\23\136\12\0\1\240"+
    "\22\136\1\0\1\136\1\0\1\136\1\0\7\136\2\0"+
    "\1\136\2\0\2\136\3\0\23\136\12\0\23\241\1\0"+
    "\1\241\1\0\1\241\1\0\7\241\2\0\1\241\2\0"+
    "\2\241\3\0\23\241\4\0\2\242\1\0\2\242\1\0"+
    "\74\242\1\243\2\0\1\242\57\0\1\244\70\0\1\245"+
    "\123\0\1\246\67\0\1\247\110\0\1\250\105\0\1\251"+
    "\54\0\1\252\162\0\1\253\56\0\1\254\43\0\2\162"+
    "\1\0\2\162\1\0\100\162\6\0\2\30\1\255\20\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\16\30\1\256\4\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\3\30\1\257\17\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\33\0\1\260\2\0\1\166"+
    "\3\0\2\166\41\0\1\166\36\0\1\261\3\0\2\261"+
    "\41\0\1\261\36\0\1\262\3\0\2\262\41\0\1\262"+
    "\36\0\1\263\3\0\2\263\41\0\1\263\12\0\1\43"+
    "\1\264\21\43\1\0\1\43\1\0\1\43\1\0\7\43"+
    "\2\0\1\43\2\0\2\43\3\0\23\43\12\0\23\43"+
    "\1\0\1\43\1\0\1\43\1\0\2\43\1\265\4\43"+
    "\2\0\1\43\2\0\2\43\3\0\23\43\12\0\23\174"+
    "\1\0\1\174\1\0\1\174\1\0\7\174\2\0\1\174"+
    "\1\266\1\0\2\174\3\0\23\174\12\0\23\177\1\0"+
    "\1\177\1\0\1\177\1\0\7\177\2\0\1\177\1\267"+
    "\1\0\2\177\3\0\23\177\46\0\1\270\105\0\1\271"+
    "\55\0\1\272\135\0\1\273\104\0\1\274\125\0\1\275"+
    "\12\0\1\276\55\0\1\277\17\0\1\300\110\0\1\301"+
    "\61\0\1\302\127\0\1\303\26\0\23\215\1\0\1\215"+
    "\1\0\1\215\1\0\7\215\2\0\1\215\2\0\2\215"+
    "\3\0\23\215\1\304\35\0\1\305\3\0\2\305\41\0"+
    "\1\305\36\0\1\306\3\0\2\306\41\0\1\306\36\0"+
    "\1\307\3\0\2\307\41\0\1\307\12\0\1\43\1\310"+
    "\21\43\1\0\1\43\1\0\1\43\1\0\7\43\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\12\0\23\43\1\0"+
    "\1\43\1\0\1\43\1\0\2\43\1\311\4\43\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\12\0\5\114\1\312"+
    "\15\114\1\0\1\114\1\0\1\114\1\0\7\114\2\0"+
    "\1\114\2\0\2\114\3\0\23\114\12\0\23\224\1\0"+
    "\1\224\1\0\1\224\1\0\7\224\2\0\1\224\1\313"+
    "\1\0\2\224\3\0\23\224\46\0\1\314\105\0\1\315"+
    "\137\0\1\316\75\0\1\317\53\0\1\320\3\0\2\320"+
    "\41\0\1\320\36\0\1\321\3\0\2\321\41\0\1\321"+
    "\36\0\1\322\3\0\2\322\41\0\1\322\12\0\1\43"+
    "\1\323\21\43\1\0\1\43\1\0\1\43\1\0\7\43"+
    "\2\0\1\43\2\0\2\43\3\0\23\43\12\0\23\43"+
    "\1\0\1\43\1\0\1\43\1\0\2\43\1\324\4\43"+
    "\2\0\1\43\2\0\2\43\3\0\23\43\12\0\5\136"+
    "\1\325\15\136\1\0\1\136\1\0\1\136\1\0\7\136"+
    "\2\0\1\136\2\0\2\136\3\0\23\136\12\0\23\241"+
    "\1\0\1\241\1\0\1\241\1\0\7\241\2\0\1\241"+
    "\1\326\1\0\2\241\3\0\23\241\46\0\1\327\127\0"+
    "\1\330\65\0\1\331\120\0\1\332\60\0\1\333\3\0"+
    "\2\333\41\0\1\333\36\0\1\334\3\0\2\334\41\0"+
    "\1\334\17\0\1\335\134\0\1\336\127\0\1\337\27\0"+
    "\2\30\1\340\20\30\1\0\1\30\1\0\1\30\1\0"+
    "\7\30\2\0\1\30\2\0\2\30\3\0\23\30\12\0"+
    "\5\30\1\341\15\30\1\0\1\30\1\0\1\30\1\0"+
    "\7\30\2\0\1\30\2\0\2\30\3\0\23\30\12\0"+
    "\5\30\1\342\15\30\1\0\1\30\1\0\1\30\1\0"+
    "\7\30\2\0\1\30\2\0\2\30\3\0\23\30\36\0"+
    "\1\343\3\0\2\343\41\0\1\343\36\0\1\261\3\0"+
    "\2\261\6\0\1\344\32\0\1\261\36\0\1\262\3\0"+
    "\2\262\6\0\1\345\32\0\1\262\36\0\1\263\3\0"+
    "\2\263\6\0\1\346\32\0\1\263\12\0\2\43\1\347"+
    "\20\43\1\0\1\43\1\0\1\43\1\0\7\43\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\12\0\23\43\1\0"+
    "\1\43\1\0\1\43\1\0\3\43\1\350\3\43\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\70\0\1\351\65\0"+
    "\1\352\103\0\1\353\123\0\1\354\65\0\1\355\132\0"+
    "\1\356\61\0\1\357\134\0\1\360\102\0\1\361\42\0"+
    "\1\362\157\0\1\363\54\0\1\364\74\0\1\305\3\0"+
    "\2\305\6\0\1\365\32\0\1\305\36\0\1\306\3\0"+
    "\2\306\6\0\1\366\32\0\1\306\36\0\1\307\3\0"+
    "\2\307\6\0\1\367\32\0\1\307\12\0\2\43\1\370"+
    "\20\43\1\0\1\43\1\0\1\43\1\0\7\43\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\12\0\23\43\1\0"+
    "\1\43\1\0\1\43\1\0\3\43\1\371\3\43\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\12\0\23\114\1\0"+
    "\1\114\1\0\1\114\1\0\7\114\2\0\1\114\2\0"+
    "\1\372\1\114\3\0\23\114\50\0\1\373\121\0\1\374"+
    "\66\0\1\375\131\0\1\376\52\0\1\320\3\0\2\320"+
    "\6\0\1\377\32\0\1\320\36\0\1\321\3\0\2\321"+
    "\6\0\1\u0100\32\0\1\321\36\0\1\322\3\0\2\322"+
    "\6\0\1\u0101\32\0\1\322\12\0\2\43\1\u0102\20\43"+
    "\1\0\1\43\1\0\1\43\1\0\7\43\2\0\1\43"+
    "\2\0\2\43\3\0\23\43\12\0\23\43\1\0\1\43"+
    "\1\0\1\43\1\0\3\43\1\u0103\3\43\2\0\1\43"+
    "\2\0\2\43\3\0\23\43\12\0\23\136\1\0\1\136"+
    "\1\0\1\136\1\0\7\136\2\0\1\136\2\0\1\u0104"+
    "\1\136\3\0\23\136\64\0\1\u0105\112\0\1\u0106\42\0"+
    "\1\u0107\126\0\1\u0108\74\0\1\333\3\0\2\333\6\0"+
    "\1\u0109\32\0\1\333\36\0\1\334\3\0\2\334\6\0"+
    "\1\u010a\32\0\1\334\16\0\1\u010b\157\0\1\u010c\106\0"+
    "\1\u010d\26\0\3\30\1\u010e\17\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\12\0\17\30\1\u010f\3\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\12\0\10\30\1\u0110\12\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\36\0\1\343\1\u0111\2\0\2\343\41\0\1\343"+
    "\12\0\3\43\1\u0112\17\43\1\0\1\43\1\0\1\43"+
    "\1\0\7\43\2\0\1\43\2\0\2\43\3\0\23\43"+
    "\12\0\23\43\1\0\1\43\1\0\1\43\1\0\4\43"+
    "\1\u0113\2\43\2\0\1\43\2\0\2\43\3\0\23\43"+
    "\101\0\1\u0114\77\0\1\u0115\101\0\1\u0116\34\0\1\u0117"+
    "\1\0\1\u0118\1\u0119\5\0\1\u011a\160\0\1\u011b\51\0"+
    "\1\u011c\106\0\1\u011d\27\0\1\u011e\31\0\1\u011f\100\0"+
    "\1\u0117\1\u0120\1\u0121\1\u0122\132\0\1\u0123\56\0\1\u0124"+
    "\171\0\1\u0125\14\0\3\43\1\u0126\17\43\1\0\1\43"+
    "\1\0\1\43\1\0\7\43\2\0\1\43\2\0\2\43"+
    "\3\0\23\43\12\0\23\43\1\0\1\43\1\0\1\43"+
    "\1\0\4\43\1\u0127\2\43\2\0\1\43\2\0\2\43"+
    "\3\0\23\43\73\0\1\u0128\32\0\1\u0129\134\0\1\u012a"+
    "\54\0\1\u012b\101\0\3\43\1\u012c\17\43\1\0\1\43"+
    "\1\0\1\43\1\0\7\43\2\0\1\43\2\0\2\43"+
    "\3\0\23\43\12\0\23\43\1\0\1\43\1\0\1\43"+
    "\1\0\4\43\1\u012d\2\43\2\0\1\43\2\0\2\43"+
    "\3\0\23\43\16\0\1\u012e\1\0\1\u012f\103\0\1\u012e"+
    "\135\0\1\u0130\124\0\1\u0131\37\0\1\u0132\167\0\1\u0133"+
    "\23\0\1\u0134\100\0\1\u0135\22\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\12\0\20\30\1\u0136\2\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\12\0\14\30\1\u0137\6\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\40\0\1\u0138\57\0\11\43\1\u0139\11\43\1\0"+
    "\1\43\1\0\1\43\1\0\7\43\2\0\1\43\2\0"+
    "\2\43\3\0\23\43\12\0\23\43\1\0\1\43\1\0"+
    "\1\43\1\0\5\43\1\u013a\1\43\2\0\1\43\2\0"+
    "\2\43\3\0\23\43\23\0\1\u013b\76\0\1\u013c\171\0"+
    "\1\u013d\104\0\1\u013e\55\0\1\u013f\105\0\1\u0140\123\0"+
    "\1\u0141\66\0\1\u0142\70\0\1\u0143\144\0\1\u0144\47\0"+
    "\1\u0145\144\0\1\u0146\107\0\1\u0147\61\0\1\u0148\105\0"+
    "\1\u0149\126\0\1\u014a\65\0\1\u0146\102\0\1\u014b\52\0"+
    "\11\43\1\u014c\11\43\1\0\1\43\1\0\1\43\1\0"+
    "\7\43\2\0\1\43\2\0\2\43\3\0\23\43\12\0"+
    "\23\43\1\0\1\43\1\0\1\43\1\0\5\43\1\u014d"+
    "\1\43\2\0\1\43\2\0\2\43\3\0\23\43\14\0"+
    "\1\u014e\140\0\1\u014f\126\0\1\u0150\114\0\1\u0151\20\0"+
    "\11\43\1\u0152\11\43\1\0\1\43\1\0\1\43\1\0"+
    "\7\43\2\0\1\43\2\0\2\43\3\0\23\43\12\0"+
    "\23\43\1\0\1\43\1\0\1\43\1\0\5\43\1\u0153"+
    "\1\43\2\0\1\43\2\0\2\43\3\0\23\43\77\0"+
    "\1\u0154\55\0\1\u0155\126\0\1\u0156\62\0\1\u0157\63\0"+
    "\1\u0158\105\0\1\u0159\155\0\1\u015a\24\0\4\30\1\u015b"+
    "\16\30\1\0\1\30\1\0\1\30\1\0\7\30\2\0"+
    "\1\30\2\0\2\30\3\0\23\30\12\0\3\30\1\u015c"+
    "\17\30\1\0\1\30\1\0\1\30\1\0\7\30\2\0"+
    "\1\30\2\0\2\30\3\0\23\30\12\0\3\30\1\u015d"+
    "\17\30\1\0\1\30\1\0\1\30\1\0\7\30\2\0"+
    "\1\30\2\0\2\30\3\0\23\30\12\0\6\43\1\46"+
    "\14\43\1\0\1\43\1\0\1\43\1\0\7\43\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\12\0\23\43\1\0"+
    "\1\43\1\0\1\43\1\0\6\43\1\46\2\0\1\43"+
    "\2\0\2\43\3\0\23\43\70\0\1\u015e\63\0\1\u015f"+
    "\104\0\1\u0160\140\0\1\u0161\74\0\1\u0162\63\0\1\u0163"+
    "\107\0\1\u0164\132\0\1\u0165\77\0\1\u0166\65\0\1\u0167"+
    "\106\0\1\u0168\52\0\1\u0169\137\0\1\u016a\126\0\1\u0161"+
    "\63\0\1\u016b\131\0\1\u016c\62\0\1\u016d\51\0\6\43"+
    "\1\104\14\43\1\0\1\43\1\0\1\43\1\0\7\43"+
    "\2\0\1\43\2\0\2\43\3\0\23\43\12\0\23\43"+
    "\1\0\1\43\1\0\1\43\1\0\6\43\1\104\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\46\0\1\u016e\126\0"+
    "\1\u016f\64\0\1\u0170\137\0\1\u016f\17\0\6\43\1\130"+
    "\14\43\1\0\1\43\1\0\1\43\1\0\7\43\2\0"+
    "\1\43\2\0\2\43\3\0\23\43\12\0\23\43\1\0"+
    "\1\43\1\0\1\43\1\0\6\43\1\130\2\0\1\43"+
    "\2\0\2\43\3\0\23\43\100\0\1\u0171\74\0\1\u0171"+
    "\107\0\1\u0172\107\0\1\331\26\0\1\u0173\161\0\1\u0174"+
    "\63\0\1\u0175\51\0\5\30\1\u0176\15\30\1\0\1\30"+
    "\1\0\1\30\1\0\7\30\2\0\1\30\2\0\2\30"+
    "\3\0\23\30\12\0\6\30\1\u0177\14\30\1\0\1\30"+
    "\1\0\1\30\1\0\7\30\2\0\1\30\2\0\2\30"+
    "\3\0\23\30\12\0\1\u0178\22\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\101\0\1\u0179\110\0\1\u017a\50\0\1\u017b\104\0"+
    "\1\u0179\105\0\1\u017c\124\0\1\u0161\65\0\1\u017d\66\0"+
    "\1\u017e\123\0\1\u017f\60\0\1\u0180\1\0\1\u0181\157\0"+
    "\1\u0182\76\0\1\u0183\110\0\1\u0184\103\0\1\u0185\44\0"+
    "\1\u0186\155\0\1\u0179\115\0\1\u0187\47\0\1\u0188\56\0"+
    "\1\u0189\1\0\1\u018a\132\0\1\u018b\60\0\1\u018c\103\0"+
    "\1\u018d\167\0\1\u018e\73\0\1\u018f\30\0\1\30\1\u0190"+
    "\21\30\1\0\1\30\1\0\1\30\1\0\7\30\2\0"+
    "\1\30\2\0\2\30\3\0\23\30\12\0\4\30\1\u0191"+
    "\16\30\1\0\1\30\1\0\1\30\1\0\7\30\2\0"+
    "\1\30\2\0\2\30\3\0\23\30\12\0\14\30\1\u0192"+
    "\6\30\1\0\1\30\1\0\1\30\1\0\7\30\2\0"+
    "\1\30\2\0\2\30\3\0\23\30\46\0\1\u0193\132\0"+
    "\1\u0161\30\0\1\u0194\153\0\1\u0195\67\0\1\u0196\137\0"+
    "\1\u0197\100\0\1\u0198\75\0\1\u0199\112\0\1\u019a\106\0"+
    "\1\u019b\105\0\1\u019c\62\0\1\u019d\105\0\1\u019e\105\0"+
    "\1\u019f\132\0\1\u01a0\61\0\1\u01a1\115\0\1\u01a2\117\0"+
    "\1\u01a3\26\0\6\30\1\u01a4\14\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\12\0\1\u01a5\22\30\1\0\1\30\1\0\1\30"+
    "\1\0\7\30\2\0\1\30\2\0\2\30\3\0\23\30"+
    "\12\0\10\30\1\u01a6\12\30\1\0\1\30\1\0\1\30"+
    "\1\0\7\30\2\0\1\30\2\0\2\30\3\0\23\30"+
    "\45\0\1\u01a7\106\0\1\u01a8\122\0\1\u01a9\112\0\1\u01aa"+
    "\63\0\1\u01ab\105\0\1\u01ac\105\0\1\u01ad\134\0\1\u0179"+
    "\103\0\1\u0179\30\0\1\u01ae\105\0\1\u01af\4\0\1\u01b0"+
    "\14\0\1\u01b1\145\0\1\u01b2\52\0\1\u01b3\106\0\1\u01b4"+
    "\104\0\1\u01b5\55\0\1\u01b6\106\0\1\u01b7\101\0\3\30"+
    "\1\u01b8\17\30\1\0\1\30\1\0\1\30\1\0\7\30"+
    "\2\0\1\30\2\0\2\30\3\0\23\30\12\0\1\30"+
    "\1\u01b9\21\30\1\0\1\30\1\0\1\30\1\0\7\30"+
    "\2\0\1\30\2\0\2\30\3\0\23\30\12\0\14\30"+
    "\1\u01ba\6\30\1\0\1\30\1\0\1\30\1\0\7\30"+
    "\2\0\1\30\2\0\2\30\3\0\23\30\105\0\1\u0179"+
    "\67\0\1\u01bb\102\0\1\u01bc\112\0\1\u01bd\102\0\1\u01be"+
    "\106\0\1\u01bf\102\0\1\u01c0\65\0\1\u01c1\105\0\1\u01c2"+
    "\106\0\1\u01c3\124\0\1\u01c4\66\0\1\u01c5\145\0\1\u0188"+
    "\67\0\1\u01c6\103\0\1\u0171\64\0\1\u01c7\53\0\7\30"+
    "\1\u01c8\13\30\1\0\1\30\1\0\1\30\1\0\7\30"+
    "\2\0\1\30\2\0\2\30\3\0\23\30\12\0\6\30"+
    "\1\u01c9\14\30\1\0\1\30\1\0\1\30\1\0\7\30"+
    "\2\0\1\30\2\0\2\30\3\0\23\30\12\0\3\30"+
    "\1\u01ca\17\30\1\0\1\30\1\0\1\30\1\0\7\30"+
    "\2\0\1\30\2\0\2\30\3\0\23\30\100\0\1\u01cb"+
    "\53\0\1\u01cc\56\0\1\u01cd\161\0\1\u01ce\103\0\1\u0179"+
    "\34\0\1\u0121\77\0\1\u01cf\114\0\1\u01d0\150\0\1\u01d1"+
    "\115\0\1\u01d2\110\0\1\u01d3\77\0\1\u0188\26\0\1\u01d4"+
    "\105\0\3\30\1\u01d5\17\30\1\0\1\30\1\0\1\30"+
    "\1\0\7\30\2\0\1\30\2\0\2\30\3\0\23\30"+
    "\12\0\14\30\1\u01d6\6\30\1\0\1\30\1\0\1\30"+
    "\1\0\7\30\2\0\1\30\2\0\2\30\3\0\23\30"+
    "\12\0\15\30\1\u01d7\5\30\1\0\1\30\1\0\1\30"+
    "\1\0\7\30\2\0\1\30\2\0\2\30\3\0\23\30"+
    "\45\0\1\u01d8\126\0\1\u0179\112\0\1\u01d9\76\0\1\u01da"+
    "\116\0\1\u01db\73\0\1\u01dc\114\0\1\u01dd\106\0\1\u019a"+
    "\30\0\1\u01de\164\0\1\u01df\22\0\6\30\1\u01e0\14\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\4\30\1\u01e1\16\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\16\30\1\u01e2\4\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\47\0\1\u01e3\104\0\1\u01e4"+
    "\105\0\1\u01e5\105\0\1\u013b\105\0\1\u01e6\107\0\1\u01e7"+
    "\101\0\1\u01e8\107\0\1\u0159\51\0\4\30\1\u01e9\16\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\11\30\1\u01ea\11\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\3\30\1\u01eb\17\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\73\0\1\u01ec\101\0\1\u01ed"+
    "\107\0\1\u01ee\100\0\1\u01ef\110\0\1\u01f0\37\0\1\u01f1"+
    "\76\0\10\30\1\u01f2\12\30\1\0\1\30\1\0\1\30"+
    "\1\0\7\30\2\0\1\30\2\0\2\30\3\0\23\30"+
    "\12\0\6\30\1\u01f3\14\30\1\0\1\30\1\0\1\30"+
    "\1\0\7\30\2\0\1\30\2\0\2\30\3\0\23\30"+
    "\12\0\6\30\1\u01f4\14\30\1\0\1\30\1\0\1\30"+
    "\1\0\7\30\2\0\1\30\2\0\2\30\3\0\23\30"+
    "\46\0\1\u01f5\60\0\1\u01f6\104\0\1\u01f7\103\0\1\u01f8"+
    "\135\0\1\u01f9\122\0\1\u01fa\34\0\7\30\1\u01fb\13\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\4\30\1\u01fc\16\30"+
    "\1\0\1\30\1\0\1\30\1\0\7\30\2\0\1\30"+
    "\2\0\2\30\3\0\23\30\12\0\1\u01fd\22\30\1\0"+
    "\1\30\1\0\1\30\1\0\7\30\2\0\1\30\2\0"+
    "\2\30\3\0\23\30\20\0\1\u01fe\134\0\1\u01ff\102\0"+
    "\1\u0200\107\0\1\u0201\107\0\1\u019b\103\0\1\u0202\51\0"+
    "\11\30\1\u0203\11\30\1\0\1\30\1\0\1\30\1\0"+
    "\7\30\2\0\1\30\2\0\2\30\3\0\23\30\12\0"+
    "\14\30\1\u0204\6\30\1\0\1\30\1\0\1\30\1\0"+
    "\7\30\2\0\1\30\2\0\2\30\3\0\23\30\12\0"+
    "\3\30\1\u0205\17\30\1\0\1\30\1\0\1\30\1\0"+
    "\7\30\2\0\1\30\2\0\2\30\3\0\23\30\47\0"+
    "\1\u0206\103\0\1\u0207\63\0\1\u0208\160\0\1\u019b\73\0"+
    "\1\u0209\33\0\12\30\1\u020a\10\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\12\0\14\30\1\u020b\6\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\67\0\1\u020c\103\0\1\u020c\106\0\1\u020d\43\0"+
    "\1\u020e\73\0\5\30\1\u020f\15\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\46\0\1\u01bf\125\0\1\u0210\65\0\1\u0211\51\0"+
    "\11\30\1\u0212\11\30\1\0\1\30\1\0\1\30\1\0"+
    "\7\30\2\0\1\30\2\0\2\30\3\0\23\30\47\0"+
    "\1\u0213\136\0\1\u0214\17\0\13\30\1\u0215\7\30\1\0"+
    "\1\30\1\0\1\30\1\0\7\30\2\0\1\30\2\0"+
    "\2\30\3\0\23\30\77\0\1\u01bf\53\0\1\u0216\52\0"+
    "\2\30\1\u0217\20\30\1\0\1\30\1\0\1\30\1\0"+
    "\7\30\2\0\1\30\2\0\2\30\3\0\23\30\77\0"+
    "\1\u0179\20\0\3\30\1\u0218\17\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\12\0\14\30\1\u0219\6\30\1\0\1\30\1\0"+
    "\1\30\1\0\7\30\2\0\1\30\2\0\2\30\3\0"+
    "\23\30\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32970];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\1\11\2\1\1\11\4\1\1\11\2\1\5\11"+
    "\12\1\1\11\1\1\1\11\4\1\1\11\12\1\2\11"+
    "\7\1\1\11\1\1\1\11\5\1\1\11\4\1\1\11"+
    "\7\1\1\11\5\1\1\11\4\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\4\1\4\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\1\16\0"+
    "\3\1\2\0\1\1\7\0\3\1\2\0\1\1\11\0"+
    "\3\1\4\0\2\1\2\11\14\0\1\11\3\0\3\1"+
    "\1\11\7\0\3\1\1\11\11\0\4\1\3\11\2\1"+
    "\14\0\3\11\3\1\4\0\3\11\3\1\4\0\2\11"+
    "\3\0\3\1\1\0\2\1\22\0\2\1\4\0\2\1"+
    "\7\0\3\1\1\11\2\1\21\0\2\1\4\0\2\1"+
    "\7\0\3\1\30\0\3\1\1\11\2\0\1\1\13\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\0\3\1\12\0"+
    "\1\1\6\0\3\1\17\0\1\11\1\0\3\1\15\0"+
    "\3\1\12\0\3\1\10\0\3\1\6\0\3\1\2\0"+
    "\1\1\3\0\3\1\6\0\3\1\5\0\3\1\4\0"+
    "\2\1\3\0\1\1\2\0\1\1\2\0\1\1\1\0"+
    "\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[537];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  XCSLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 61: break;
          case 2: 
            { yybegin(YYINITIAL); return XCSTypes.FUNCTION_COMMENT;
            } 
            // fall through
          case 62: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 4: 
            { yybegin(FUNCTION_HEADER); return XCSTypes.FUNCTION_NAME;
            } 
            // fall through
          case 64: break;
          case 5: 
            { yybegin(YYINITIAL); return XCSTypes.FUNCTION_END;
            } 
            // fall through
          case 65: break;
          case 6: 
            { return XCSTypes.FUNCTION_COMMENT;
            } 
            // fall through
          case 66: break;
          case 7: 
            { return XCSTypes.COLON;
            } 
            // fall through
          case 67: break;
          case 8: 
            { yybegin(CORE); return XCSTypes.CORE_START;
            } 
            // fall through
          case 68: break;
          case 9: 
            { yybegin(CE_CORE); return XCSTypes.CORE_START;
            } 
            // fall through
          case 69: break;
          case 10: 
            { yybegin(EC_CORE); return XCSTypes.CORE_START;
            } 
            // fall through
          case 70: break;
          case 11: 
            { yybegin(VSS_LIST_1); return XCSTypes.CORE_START;
            } 
            // fall through
          case 71: break;
          case 12: 
            { return XCSTypes.VARIABLE_VALUE;
            } 
            // fall through
          case 72: break;
          case 13: 
            { yybegin(NAME); return XCSTypes.LIST_TYPE;
            } 
            // fall through
          case 73: break;
          case 14: 
            { yybegin(NAME); return XCSTypes.VARIABLE_TYPE;
            } 
            // fall through
          case 74: break;
          case 15: 
            { yybegin(NAME); return XCSTypes.ASCII_TYPE;
            } 
            // fall through
          case 75: break;
          case 16: 
            { yybegin(PROPERTY); return XCSTypes.PROPERTY_START;
            } 
            // fall through
          case 76: break;
          case 17: 
            { return XCSTypes.CORE_END ;
            } 
            // fall through
          case 77: break;
          case 18: 
            { yybegin(CORE); return XCSTypes.VARIABLE_NAME;
            } 
            // fall through
          case 78: break;
          case 19: 
            { yybegin(CORE); return XCSTypes.CORE_END ;
            } 
            // fall through
          case 79: break;
          case 20: 
            { yybegin(CORE);return XCSTypes.PROPERTY_END;
            } 
            // fall through
          case 80: break;
          case 21: 
            { return XCSTypes.EQUALS;
            } 
            // fall through
          case 81: break;
          case 22: 
            { yybegin(CE_NAME); return XCSTypes.LIST_TYPE;
            } 
            // fall through
          case 82: break;
          case 23: 
            { yybegin(CE_NAME); return XCSTypes.VARIABLE_TYPE;
            } 
            // fall through
          case 83: break;
          case 24: 
            { yybegin(CE_NAME); return XCSTypes.ASCII_TYPE;
            } 
            // fall through
          case 84: break;
          case 25: 
            { return XCSTypes.CORE_START;
            } 
            // fall through
          case 85: break;
          case 26: 
            { yybegin(CE_PROPERTY); return XCSTypes.PROPERTY_START;
            } 
            // fall through
          case 86: break;
          case 27: 
            { yybegin(CE_CORE); return XCSTypes.VARIABLE_VALUE;
            } 
            // fall through
          case 87: break;
          case 28: 
            { yybegin(CE_CORE); return XCSTypes.CORE_END ;
            } 
            // fall through
          case 88: break;
          case 29: 
            { yybegin(CE_CORE);return XCSTypes.PROPERTY_END;
            } 
            // fall through
          case 89: break;
          case 30: 
            { yybegin(EC_NAME); return XCSTypes.LIST_TYPE;
            } 
            // fall through
          case 90: break;
          case 31: 
            { yybegin(EC_NAME); return XCSTypes.VARIABLE_TYPE;
            } 
            // fall through
          case 91: break;
          case 32: 
            { yybegin(EC_NAME); return XCSTypes.ASCII_TYPE;
            } 
            // fall through
          case 92: break;
          case 33: 
            { yybegin(EC_PROPERTY); return XCSTypes.PROPERTY_START;
            } 
            // fall through
          case 93: break;
          case 34: 
            { yybegin(EC_CORE); return XCSTypes.PROPERTY_VALUE;
            } 
            // fall through
          case 94: break;
          case 35: 
            { yybegin(EC_CORE); return XCSTypes.CORE_END;
            } 
            // fall through
          case 95: break;
          case 36: 
            { yybegin(EC_CORE);return XCSTypes.PROPERTY_END;
            } 
            // fall through
          case 96: break;
          case 37: 
            { return XCSTypes.ASCII_TYPE;
            } 
            // fall through
          case 97: break;
          case 38: 
            { yybegin(VSS_PROPERTY); return XCSTypes.PROPERTY_START;
            } 
            // fall through
          case 98: break;
          case 39: 
            { return XCSTypes.LIST_TYPE;
            } 
            // fall through
          case 99: break;
          case 40: 
            { yybegin(VSS_LIST_2); return XCSTypes.CORE_START;
            } 
            // fall through
          case 100: break;
          case 41: 
            { yybegin(VSS_CORE); return XCSTypes.CORE_START;
            } 
            // fall through
          case 101: break;
          case 42: 
            { yybegin(VSS_CORE);return XCSTypes.PROPERTY_END;
            } 
            // fall through
          case 102: break;
          case 43: 
            { yybegin(YYINITIAL); return XCSTypes.COMMENT;
            } 
            // fall through
          case 103: break;
          case 44: 
            { return XCSTypes.ASCII_VALUE;
            } 
            // fall through
          case 104: break;
          case 45: 
            { yybegin(CORE); return XCSTypes.VARIABLE_VALUE;
            } 
            // fall through
          case 105: break;
          case 46: 
            { yybegin(CORE); return XCSTypes.ASCII_VALUE;
            } 
            // fall through
          case 106: break;
          case 47: 
            { yybegin(CE_CORE); return XCSTypes.ASCII_VALUE;
            } 
            // fall through
          case 107: break;
          case 48: 
            { yybegin(EC_CORE); return XCSTypes.ASCII_VALUE;
            } 
            // fall through
          case 108: break;
          case 49: 
            { return XCSTypes.PROPERTY_VALUE;
            } 
            // fall through
          case 109: break;
          case 50: 
            { return XCSTypes.STREAM_FUNCTION;
            } 
            // fall through
          case 110: break;
          case 51: 
            { yybegin(CE_CORE); return XCSTypes.CEID;
            } 
            // fall through
          case 111: break;
          case 52: 
            { yybegin(EC_CORE); return XCSTypes.ECID;
            } 
            // fall through
          case 112: break;
          case 53: 
            { return XCSTypes.PROPERTY_NAME;
            } 
            // fall through
          case 113: break;
          case 54: 
            { return XCSTypes.PROPERTY_NAME_CE;
            } 
            // fall through
          case 114: break;
          case 55: 
            { return XCSTypes.PROPERTY_NAME_EC;
            } 
            // fall through
          case 115: break;
          case 56: 
            { return XCSTypes.PROPERTY_NAME_VSS;
            } 
            // fall through
          case 116: break;
          case 57: 
            { return XCSTypes.VFEI_CMD_ITEM_NAME;
            } 
            // fall through
          case 117: break;
          case 58: 
            { yybegin(EC_HEADER); return XCSTypes.EQUIPMENT_CONSTANT;
            } 
            // fall through
          case 118: break;
          case 59: 
            { yybegin(VSS_HEADER); return XCSTypes.VFEI_SECS_SEQ;
            } 
            // fall through
          case 119: break;
          case 60: 
            { yybegin(CE_HEADER); return XCSTypes.COLLECTION_EVENT;
            } 
            // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
