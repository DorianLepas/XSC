{
  parserClass="cea.language.sml.parser.SmlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Sml"
  psiImplClassSuffix="Impl"
  psiPackage="cea.language.sml.psi"
  psiImplPackage="cea.language.sml.psi.impl"

  elementTypeHolderClass="cea.language.sml.psi.SmlTypes"
  elementTypeClass="cea.language.sml.psi.SmlElementType"
  tokenTypeClass="cea.language.sml.psi.SmlTokenType"

  pin=1
}

smlFile ::= smlFileContent*

private smlFileContent ::= (COMMENT|LINE_END|stateBlock|aliasBlock|alarmBlock|eventBlock|traceBlock|scriptBlock)

/* Règles grammaticales d'un état */
stateBlock ::= STATE separator stateName beginBlock stateBody* endBlock

private stateBody ::= stateBlock|aliasBlock|alarmBlock|eventBlock|traceBlock|enterBlock|exitBlock|optionsBlock


/* Règles grammaticales d'un alias */
aliasBlock ::= ALIAS separator aliasName beginBlock aliasBlockBody endBlock

private aliasBlockBody ::= EVENT_NAME+ {name="Events names"}


/* Règles grammaticales d'une alarm */
alarmBlock ::= ALARM separator eventsDefinition beginBlock instructions* endBlock


/* Règles grammaticales d'un événement */
eventBlock ::= EVENT separator eventsDefinition beginBlock instructions* endBlock


/* Règles grammaticales d'une trace */
traceBlock ::= TRACE separator eventsDefinition beginBlock instructions* endBlock


/* Règles grammaticales d'un script */
scriptBlock ::= SCRIPT beginBlock bindingBlock javascript? endBlock

bindingBlock ::= BINDING beginBlock bind+ endBlock

bind ::= BIND_NAME BINDS_SEPARATOR smlVars {name="binds"}

javascript ::= JAVASCRIPT_CODE+

/* Règles grammaticales d'un bloc enter */
enterBlock ::= ENTER beginBlock instructions* endBlock


/* Règles grammaticales d'un bloc exit */
exitBlock ::= EXIT beginBlock instructions* endBlock


/* Règles grammaticales d'un bloc option */
optionsBlock ::= OPTION beginBlock OPTIONS* endBlock


/* Règle grammaticales d'un bloc condition */
conditionBlock ::= CONDITION beginBlock conditions* endBlock

/* Règles des blocs if, else if ou else */
ifBlock ::= IF ifConditions beginBlock instructions* endBlock

elseIfBlock ::= ELSE_IF ifConditions beginBlock instructions* endBlock

elseBlock ::= ELSE beginBlock instructions* endBlock


/* Règle des définitions d'événements */
eventsDefinition ::= EVENT_NAME (EVENT_NAME_SEPARATOR EVENT_NAME)* | ALL_EVENTS {name="Events definition"}


/* Règle des conditions pour un bloc de condition */
conditions ::= (SML_VARS|CONST_CONDS) ((OP_CONDS|COMP_CONDS) (SML_VARS|CONST_CONDS))*

/* Règle des conditions pour un bloc if, else if ou else */
ifConditions ::= BEGIN_PARENTHESE (SML_VARS|CONST_CONDS) ((OP_CONDS|COMP_CONDS) (SML_VARS|CONST_CONDS))* END_PARENTHESE


/* Règles grammaticales des instructions */
private instructions ::= ifBlock|elseIfBlock|elseBlock|conditionBlock|scriptBlock
|(threadStateInstruction
|callJavaFunctionInstruction
|gotoStateInstruction
|processStateInstruction
|threadEndInstruction
|traceInstruction
|execEndInstruction
|consumeEventInstruction) {name="Instructions"}

// Instruction goto state
gotoStateInstruction ::= GOTO_STATE SEPARATOR stateName (STATE_NAME_SEPARATOR stateName)*

// Instruction process state
processStateInstruction ::= PROCESS_STATE SEPARATOR stateName identificationKey

// Instrution call
callJavaFunctionInstruction ::= CALL JAVA_FUNCTION_CALL

// Instruction thread_end
threadEndInstruction ::= THREAD_END

// Instruction thread_state
threadStateInstruction ::= THREAD_STATE SEPARATOR THREAD_NAME identificationKey

// Instruction exec_end
execEndInstruction ::= EXEC_END

// Instruction consume_event
consumeEventInstruction ::= CONSUME_EVENT

// Instruction MESSAGE, WARNING ou DEBUG
traceInstruction ::= (MESSAGE|WARNING|DEBUG) traceMessage?

traceMessage ::= (TRACE_MESSAGE_STRING|SML_VARS) (TRACE_MESSAGE_SEPARATOR (TRACE_MESSAGE_STRING|SML_VARS))*

/* Les règles suivantes ne contiennent qu'un seul token avec le message d'erreur
   associé à ce token lorsque celui-ci est manquant */
private separator ::= SEPARATOR {name="Separator ':' "}

private beginBlock ::= BEGIN_BLOCK {name="Begin block '{' "}

private endBlock ::= END_BLOCK {name="End block '}' "}

private stateName ::= STATE_NAME {name="State name"}

private aliasName ::= ALIAS_NAME {name="Alias name"}

private identificationKey ::= IDENTIFICATION_KEY {name="Identification Key"}

private binds ::= BINDS {name="Bindings"}

private smlVars ::= SML_VARS {name="Variables"}